import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as r,b as n,e as a,w as t,d as s,a as l}from"./app-61ed31ff.js";const d={},u={class:"hint-container details"},k=n("summary",null,"本文内容",-1),g={class:"table-of-contents"},m=l(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>Redis 之所以快，除了它是基于内存的数据库外，还有一个重要的因素，就是它底层的 <strong>数据结构</strong>。</p><p>所以，想知道 Redis 为什么快的秘诀之一，就是去探究探究它底层的数据结构。</p></div><h2 id="前置知识-redisobject" tabindex="-1"><a class="header-anchor" href="#前置知识-redisobject" aria-hidden="true">#</a> &gt; 前置知识：redisObject</h2><p>Redis 使用 <strong>redisObject 结构体表示各种数据结构</strong>（Redis 种把各种数据类型看成不同的对象），redisObject 结构体中的属性如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类型</span>
    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 编码</span>
    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 指向 type 类型底层实现（数据结构）的指针</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span> robj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来分别简单的介绍一下这三个属性。</p><div class="hint-container info"><p class="hint-container-title">类型（type）</p><p><strong>type 属性记录了对象（数据结构）的类型</strong>，即 String、List、Hash、Set、zSet。</p><p>在 Redis 种，key 总是 String 类型，而 value 可以是任意一种对象。</p><p>我们也可以使用 <code>TYPE key</code> 命令来查看该 key 对应 <strong>value 的类型</strong>。</p></div><div class="hint-container info"><p class="hint-container-title">编码（encoding）和 底层实现的指针（ptr）</p><p><strong>encoding 属性记录了对象的编码</strong>，也就是 <strong>这个对象使用了什么数据结构作为底层实现</strong>，而 <strong>ptr 指针则指向了这个底层的数据结构</strong>。</p><p>Redis 中每种对象都至少使用了 2 种不同的编码，如下图列出了每种类型的对象可以使用的编码：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302231858184.png" alt="image-20230223185531411" loading="lazy"></p><p>Redis 为对象提供至少 2 种不同的编码，Redis 为什么要这么做呢？</p><p>不同的编码对应着不同的底层数据结构，这就意味着可以 <strong>根据不同的场景来选择不同的数据结构</strong>，从而达到更加高效的数据存取，因为每种数据结构都有各自的优势与劣势。当你学习完这些数据结构后，就知道它们各自的使用场景了。</p></div><h2 id="_1-redis-数据结构有哪些" tabindex="-1"><a class="header-anchor" href="#_1-redis-数据结构有哪些" aria-hidden="true">#</a> 1. Redis 数据结构有哪些</h2><p>Redis 中的 <strong>数据结构</strong> 不是指 String、List、Hash、Set、zSet 等这些基本数据类型，而是指这些 <strong>数据类型的底层实现</strong>。</p><p>下面通过一张数据类型和数据结构的对应关系图，了解一下五种基本数据类型的底层实现：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302232032985.png" alt="img" loading="lazy"></p><p>可以看见，之前的双向链表和压缩列表分别被 quicklist 和 listpack 代替了，至于为什么要做这个改变，看下去你就知道了。</p><h2 id="_2-简单动态字符串-sds" tabindex="-1"><a class="header-anchor" href="#_2-简单动态字符串-sds" aria-hidden="true">#</a> 2. 简单动态字符串 SDS</h2><p>Redis 是用 C 语言实现的，但是它并没有直接使用 C 语言的 <code>char*</code> 字符数组来作为 Redis 字符串的底层实现，而是自己构建了一种 <strong>简单动态字符串</strong>（Simple Dynamic String，SDS）。</p><p>Redis 这么追求高效，不使用 C 语句的字符串肯定是它有一些缺陷，所以得先了解它有什么缺陷，才能知道 Redis 的 SDS 为什么要这么设计。下面就来对比下 C 字符串和 SDS 的设计：</p><p><strong>1、C 字符串是以空字符（&#39;\\0&#39;）结尾的字符数组，而 SDS 使用一个 len 属性来判断字符是否结束</strong>。</p><p>这就使得 C 字符串在获取长度时，需要额外计算，复杂度为 O(n)，而 <strong>SDS 获取字符串长度的复杂度为 O(1)</strong>。</p><p>而且若字符串本身包含空字符时，会导致数据意外截断而发生错误，因此不能用于存储二进制数据，而 <strong>SDS</strong> 会以处理二进制的方式来处理数据，因此 <strong>可以保存二进制数据</strong>，例如图片、视频等文件。</p><p><strong>2、C 字符串需要手动分配内存，而且分配后不可变，而 SDS 可以动态调整内存大小</strong>。</p><p>这就导致在拼接字符串，或者错误处理长度信息时，C 字符串可能会导致缓冲区溢出，进而导致内存越界访问，而 <strong>SDS</strong> 在拼接字符串之前，会 <strong>先检查内存空间</strong> 是否足够，<strong>不够会自动扩容</strong>，防止缓冲区溢出的问题。</p><h3 id="_2-1-sds-结构" tabindex="-1"><a class="header-anchor" href="#_2-1-sds-结构" aria-hidden="true">#</a> 2.1 SDS 结构</h3><p>那么 SDS 是如何知道内存空间是否足够的呢？一个 SDS 结构有如下属性：</p><ul><li><p><strong>len</strong>：字符串长度，获取字符串长度时，返回该属性值即可；</p></li><li><p><strong>alloc</strong>：分配的空间大小，检查内存空间是否足够时，使用 alloc - len 即可计算出剩余空间大小；</p></li><li><p><strong>flags</strong>：SDS 的类型，分别有 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64 五种类型。<strong>影响的是 len 和 alloc 两个属性的类型</strong>，比如 sdshdr16 的 len 和 alloc 都是 uint16 类型，而 sdshdr32 则是 uint32 类型。这样可以使得在保存较小的字符串时，头结构使用的空间也比较小，而不是都使用一个较大类型的属性来表示。</p></li><li><p><strong>buf[]</strong>：保存实际数据的字符数组，可以保存字符串和二进制数据。</p></li></ul><blockquote><p>由于 SDS 需要一些额外的空间来保存这些额外的信息，所以为了节省空间，Redis 还为 String 数据类型提供了多种不同的编码方式，分别是 int、row、embstr。<strong>只有在编码方式是 row 和 embstr 时，底层才使用了 SDS</strong>，这在 Redis 数据类型中会详细讲解。</p></blockquote><h3 id="_2-2-内存对齐优化" tabindex="-1"><a class="header-anchor" href="#_2-2-内存对齐优化" aria-hidden="true">#</a> 2.2 内存对齐优化</h3><p>除了上面为不同类型的 SDS 设置不同的结构体外，Redis 还 <strong>通过编译优化来避免内存对齐带来的空间消耗</strong>。</p><p>先来看看什么是内存对齐，当一个结构体中有两个类型不同的成员变量时，而且它们所占用的空间也不一样，那么编译器会按照 <strong>2 字节对齐的方式</strong> 给这些变量分配内存。</p><p>比如，下面这个结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>
 <span class="token punctuation">}</span> test1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，在 C 语言中，char 类型占 1B，int 类型占 4B，那么该结构体应该占 5B。但实际上，它占用了 8B，这是因为即使 char 只占 1B，但由于编译器以 <strong>字节对齐</strong> 的方式分配内存（假设 CPU 一次读取 4 字节，编译器对齐系数为 4），所以也会为 char 分配 4B，来达到让 int 内存对齐的效果（让 int 变量起始地址为对齐系数的最小倍数）。</p><p>那么怎么取消内存对齐呢？只需要在声明结构体时，加上 <code>__attribute__((packed))</code> 即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">test2</span>  <span class="token punctuation">{</span>
    <span class="token keyword">char</span> a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>
 <span class="token punctuation">}</span> test2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时该结构体占用的字节数就是 5B 了，而 <strong>Redis 中的数据结构使用的正是这种定义方式，减少了内存对齐带来的空间消耗</strong>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr8</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint8_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr16</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint16_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr32</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint32_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// ......</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">内存对齐有什么好处？</p><p>内存中存放的数据是给 CPU 使用的，<strong>CPU 一次能从内存中拿多少数据</strong>，受到 <strong>地址总线宽度</strong> 的限制，而且 CPU 从内存中获取数据时，<strong>起始地址必须是地址总线宽度的倍数</strong>。</p><p>例如 CPU 的地址总线是 64 位（8 字节），那么当一个 int 变量（4 字节）存储到 0x06 地址时，<strong>CPU 需要读取两次，才能获取这个变量的值</strong>：</p><ul><li>第一次读取 0x00 ~ 0x08 这 8 个字节；</li><li>第二次读取 0x08 ~ 0x0F 这 8 个字节。</li></ul><p>然后分别保存后两个字节和前两个字节，才能读取到这个变量的值。这样大大降低了 CPU 的执行效率。</p><p><strong>内存对齐的目的就是为了让 CPU 一次能获取到数据，从而提升性能</strong>，而内存对齐，指的是 <strong>变量地址的对齐，即：变量起始地址 % 对齐系数 = 0</strong>，而 <strong>不是变量大小的对齐</strong>。回顾上面的结构体，就能明白了，把 int 变量内存地址对齐后，CPU 访问时，就可以一次获取到该变量。</p><p>每个平台的编译器都会有默认对齐系数（也叫对齐模数），可以通过预编译命令<code>#pragma pack(n)</code>，n=1,2,4,8,16 来改变这一系数，一般默认为 8。</p></div><div class="hint-container info"><p class="hint-container-title">Redis 取消内存对齐会降低 CPU 性能吗？</p><p>Redis SDS 采用了 <code>__attribute__ ((__packed__))</code>（紧凑排列）取消了内存对齐，节省了内存，那么会不会对 CPU 访问产生影响呢？</p><p>我们观察一个细节，Redis 的不同 SDS 结构体声明，其 <strong>变量声明顺序都是按占用空间大小从大到小排列的</strong>，这样使得就算采用内存对齐，那也只对最后的变量起作用（尾随填充），而后面其实无需填充，CPU 一次性就能读取到所有数据（后面占用的空间小），所以就算 <strong>采用紧凑排列，也不会降低 CPU 的性能，还可以节约后面的内存</strong>。</p></div><h2 id="_3-双向链表" tabindex="-1"><a class="header-anchor" href="#_3-双向链表" aria-hidden="true">#</a> 3. 双向链表</h2><p>Redis 的双向链表相比普通的双向链表，又封装了一层，使得操作更方便，list 结构定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">{</span>
    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token comment">//链表头节点</span>
    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>    <span class="token comment">//链表尾节点</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//节点值复制函数</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//节点值释放函数</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//节点值比较函数</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>    <span class="token comment">//链表节点数量</span>
<span class="token punctuation">}</span> list<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>listNode 结构就是普通的双向链表了：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token comment">//前置节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token comment">//后置节点</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>    <span class="token comment">//节点的值</span>
<span class="token punctuation">}</span> listNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/https%2Fcdn.xiaolincoding.com%2Fmysql%2Fother-2023_12_23-1703322477.png" alt="img" loading="lazy"></p><p>可以看出，Redis 的双向链表可以 <strong>很方便的获取头尾节点、节点数量，复杂度都是 O(1)</strong>。并且 <strong>获取某个节点的前驱/后继节点的复杂度也是 O(1)</strong>。</p><p>不过 <strong>链表</strong> 有个很大的缺陷就是 <strong>每个节点间的内存在物理上是不连续的</strong>，这就导致链表 <strong>无法很好的利用 CPU 缓存</strong>，因为 CPU 向内存读取数据时，都是一次性读取连续的内存空间到缓存中。</p><p>而且链表除了保存数据外，还使用了额外的空间保存其他信息，比如前驱/后继节点，<strong>内存开销比较大</strong>。</p><p>基于以上缺点，Redis 3.0 的 List 在数据量较少时采用了压缩列表作为底层实现，而又因为压缩列表存在性能问题（后续文章会讲解），在最新版本中使了 quicklist 来实现。</p><h2 id="_4-压缩列表" tabindex="-1"><a class="header-anchor" href="#_4-压缩列表" aria-hidden="true">#</a> 4. 压缩列表</h2><p>前面说到双向链表最大的缺陷就是物理上内存空间不连续，而且每个节点都会消耗额外的空间保存头信息。那么压缩列表的实现，就很好的解决了它的问题。</p><p><strong>压缩列表</strong>是一种紧凑型的数据结构，<strong>在物理上内存空间是连续的</strong>，而且 <strong>不需要为每个元素都保存额外信息</strong>，Redis 还针对不同的数据大小，设计了<strong>多套编码规则</strong>，以此来达到 <strong>占用更小内存</strong> 的效果。</p><p>当 <strong>List、Hash、zSet 保存的元素数量较少、元素值不大</strong> 的情况下，会使用 <strong>压缩列表</strong> 来实现。为什么需要上述两个条件？这跟压缩列表的缺陷有关，我们后续说明。</p><h3 id="_4-1-压缩列表结构" tabindex="-1"><a class="header-anchor" href="#_4-1-压缩列表结构" aria-hidden="true">#</a> 4.1 压缩列表结构</h3><p>压缩列表跟数组类似，使用一块连续的内存保存数据，只不过在数组的基础上，新增了一些字段以方便对其的操作：</p><ul><li><strong>zlbytes</strong>：整个压缩列表 <strong>占用内存的字节数</strong>；</li><li><strong>zltail</strong>：压缩列表尾节点距离起始地址的字节数，即 <strong>尾节点的偏移量</strong>，以方便获取尾节点；</li><li><strong>zllen</strong>：压缩列表的 <strong>节点数</strong>；</li><li><strong>entry</strong>：压缩列表中的节点，<strong>节点中保存实际的数据</strong>；</li><li><strong>zlend</strong>：压缩列表的 <strong>结束标志</strong>，是一个固定值 0xFF。</li></ul><p>而对于保存数据的节点 entry，包含三个属性：</p><ul><li><strong>prev_entry_len</strong>：前节点的长度，以找到上一个节点，方便 <strong>从后往前遍历</strong>；</li><li><strong>encoding</strong>：当前节点 value 的 <strong>数据类型</strong>，还可以知道 <strong>当前节点的长度</strong>，以找到下一个节点，类型有字符串和整数；</li><li><strong>data</strong>：当前节点的 <strong>实际数据</strong>。</li></ul><p>压缩列表的整体结构如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/数据结构%2FRedis 底层数据结构.assets-2023_12_23-1703325394.png" alt="image-20231223175631990" loading="lazy"></p><p>接下来详细讲解 entry，其 <strong>prevlen 的大小取决与前节点的大小</strong>：</p><ul><li>若 <strong>前节点的长度小于 254 字节</strong>，则 prevlen 使用 <strong>1 字节</strong> 来保存该长度值；</li><li>反之，prevlen 使用 <strong>5 字节</strong> 来保存前节点的长度值。</li></ul><p>其 <strong>encoding 编码的类型和占用的大小，取决于保存数据的类型 (字符串或整数) 和大小 (字符串的长度)</strong>：</p><ul><li>若保存的数据是 <strong>整数</strong>，则 encoding 编码方式有多种，但都只占用 <strong>1 字节</strong>；</li><li>若保存的数据是 <strong>字符串</strong>，则根据 <strong>字符串的长度大小</strong>，encoding 有不同的编码方式，占用的空间大小也不相同，分别由 <strong>1/2/5 字节</strong>。</li></ul><p>详细的编码规则如下，content 即 data：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/数据结构%2FRedis 底层数据结构.assets-2023_12_23-1703327748.png" alt="image-20231223183547014" loading="lazy"></p><p>encoding 编码的前两位表示数据类型，对于字符串类型来说，除了前两位外的剩余位就表示字符串的实际长度。</p><h3 id="_4-2-压缩列表缺陷" tabindex="-1"><a class="header-anchor" href="#_4-2-压缩列表缺陷" aria-hidden="true">#</a> 4.2 压缩列表缺陷</h3><p>压缩列表有一个很大的缺陷，就是 <strong>因为 prevlen 变大导致的连锁更新</strong>。</p><p>通过前面我们知道，prevlen 空间大小取决于前一个节点所占用的空间大小，那么当压缩列表中的 entry 都占用了接近 254 字节的空间时，此时 <strong>prevlen 使用 1 字节刚刚好足够保存</strong>。但突然 <strong>将一个大于 253 的 entry 插入到头节点时</strong>，那么 prevlen 就要从 1 字节扩大到 5 字节了，扩大后，后面的 prevlen 也要继续扩大，就会导致连锁更新了。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/数据结构%2FRedis 底层数据结构.assets-2023_12_23-1703330680.png" alt="image-20231223192433101" loading="lazy"></p><p>这种连锁更新导致的 <strong>内存扩展需要重新分配内存</strong>，多次重新分配内存无疑会消耗很大的性能，从而导致压缩列表的 <strong>访问性能下降</strong>。</p><p>所以刚开始说当 <strong>List、Hash、zSet 保存的元素数量较少、元素值不大</strong> 的情况下，会使用 <strong>压缩列表</strong> 来实现。因为元素较少时，即使发生了连锁更新，影响也不算太大。</p><p>不过 Redis 5.0 引入的 listpack 解决了这种连锁更新的问题。</p><h2 id="_5-哈希表" tabindex="-1"><a class="header-anchor" href="#_5-哈希表" aria-hidden="true">#</a> 5. 哈希表</h2><p>Redis 的哈希表与普通哈希表类似，只是多了几个属性，额外又封装了一层，方便操作。</p><p>Redis 哈希表的结构定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictht</span> <span class="token punctuation">{</span>
    dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>    <span class="token comment">//哈希表数组</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>      <span class="token comment">//哈希表大小</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span>    <span class="token comment">//哈希表大小掩码，用于计算索引值</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span>    <span class="token comment">//该哈希表已有的节点数量</span>
<span class="token punctuation">}</span> dictht<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，哈希表 table 由一个 <strong>哈希表节点数组</strong> 构成，其结构如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>    <span class="token comment">//键值对中的键</span>
    <span class="token comment">//键值对中的值</span>
    <span class="token keyword">union</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>
        <span class="token class-name">uint64_t</span> u64<span class="token punctuation">;</span>
        <span class="token class-name">int64_t</span> s64<span class="token punctuation">;</span>
        <span class="token keyword">double</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> v<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>	<span class="token comment">//指向下一个哈希表节点，形成链表</span>
<span class="token punctuation">}</span> dictEntry<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，<strong>dictEntry 的值是一个联合体</strong>，所以这个值是其中的某一种，这样当保存的数据是 <strong>整数或浮点数</strong> 时，就可以 <strong>直接将数据嵌入到结构体中</strong>，<strong>节省了指针的空间</strong>。若是其他数据类型时，则需要 void 指针指向实际的数据。</p><p>在解决 <strong>哈希冲突</strong> 问题时，Redis 采用了比较简单的 <strong>链式哈希</strong>，next 指针的作用即使如此。</p><p>一个哈希表结构例子如下所示：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/https%2Fcdn.xiaolincoding.com%2Fmysql%2Fother-2023_12_23-1703333405.png" alt="img" loading="lazy"></p><p>我们知道，在使用链式哈希来解决哈希冲突时，有一个问题就是 <strong>当链表长度过长时</strong>，会导致哈希表的 <strong>查询时间复杂度从 O(1) 将为 O(n)</strong>。要解决这个问题，就需要进行 <strong>rehash 对哈希表进行扩容</strong>。</p>`,82),v=n("strong",null,"渐进式 rehash",-1),b={href:"https://code.0x3f4.run/backend/database/redis/basis/kv%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0.html#_6-%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3",target:"_blank",rel:"noopener noreferrer"},h=l(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">{</span>
    <span class="token comment">//…</span>
    dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 	<span class="token comment">//两个Hash表，交替使用，用于rehash操作</span>
    <span class="token comment">//…</span>
<span class="token punctuation">}</span> dict<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rehash 的触发条件跟 <strong>负载因子 (Load Factor)</strong> 有关，它的计算公式为：</p><ul><li><strong>负载因子 = 哈希表已存储节点数 / 哈希表大小</strong></li></ul><p>Redis 哈希表触发 Redis 的条件有两个：</p><ul><li><strong>当负载因子大于等于 1，并且没有进行 RDB 或 AOF 重写（bgsave / bgrewriteaof 命令）时</strong>，就会进行 rehash；</li><li><strong>当负载因为大于等于 5 将强制进行 rehash</strong>，因为此时哈希冲突已经很严重了。</li></ul><h2 id="_6-整数集合" tabindex="-1"><a class="header-anchor" href="#_6-整数集合" aria-hidden="true">#</a> 6. 整数集合</h2><p>当 <strong>Set</strong> 数据类型 <strong>只包含整数元素，并且数量不多时</strong>，就采用 <strong>整数集合</strong> 作为底层实现，否则采用哈希表。</p><p>整数集合在物理上是一块连续的内存空间，结构如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">intset</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> encoding<span class="token punctuation">;</span>    <span class="token comment">//编码方式</span>
    <span class="token class-name">uint32_t</span> length<span class="token punctuation">;</span>    <span class="token comment">//集合包含的元素数量</span>
    <span class="token class-name">int8_t</span> contents<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//保存元素的数组</span>
<span class="token punctuation">}</span> intset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处需要注意，<strong>contents 的类型并不是 int8，而是由 encoding 决定</strong>。</p><p>所以，<strong>当新插入元素的类型比 contents 数组原有类型大时</strong>（比如向 uint16_t 的 contents 中插入一个 uint32_t 类型的数据），就会先进行 contents 数组的 <strong>内存升级 (扩容)</strong>，全部扩容为新插入元素类型大小后，再将旧元素放置到新的位置，才能将新元素插入。</p><p>这样做的好处无疑还是 <strong>节省内存空间</strong>，<strong>需要存储多大数据类型的值，才分配多大的内存</strong>。</p><p>不过整数集合 <strong>不支持降级操作</strong>，升级后就算删除了类型较大的元素，这个整数集合依旧是原来的类型大小。</p><h2 id="_7-跳表" tabindex="-1"><a class="header-anchor" href="#_7-跳表" aria-hidden="true">#</a> 7. 跳表</h2><p>zSet 的底层实现之一是跳表，它是一种基于链表的多层结构，优化了查询时的时间复杂度，为 O(logN)。</p><p>并且 zSet 的 ZSCORE 命令支持通过 key 获取指定 member 的 score（复杂度为 <code>O(1)</code>），也能通过 ZRANGEBYSCORE 按照 score 获取指定范围的 member（复杂度为 <code>O(logN)</code>）。</p><p>其实这与 zSet 的底层数据结构有关，翻开 zSet 的源码，可以看到它是由 <strong>dict 哈希表和 zsl 跳表</strong> 组合实现的：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zset</span> <span class="token punctuation">{</span>
    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span>
    zskiplist <span class="token operator">*</span>zsl<span class="token punctuation">;</span>
<span class="token punctuation">}</span> zset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们在往 zSet 中插入/更新数据时，Redis 会分别在跳表和哈希表中都进行插入/更新。</p><p>在哈希表中，<strong>key 就是 member，value 是一个指针，指向该 member 在跳表中的 score</strong>，所以可以快速定位到一个 member 的 score。</p><p>在 Redis 中，跳表节点的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">{</span>
    <span class="token comment">// Sorted Set中的元素</span>
    sds ele<span class="token punctuation">;</span>
    <span class="token comment">// 元素权重值</span>
    <span class="token keyword">double</span> score<span class="token punctuation">;</span>
    <span class="token comment">// 后向指针</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span>
    <span class="token comment">// 节点的level数组，保存每层上的前向指针和跨度</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> span<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> zskiplistNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，除了保存数据、score 等信息之外，还有一个 level 数组，里面记录了该节点的前向指针（用于倒序查询），以及跨度 span，span 的值是两节点之间的节点数 + 1，由于 <strong>跳表是按序排列的</strong>，所以可以 <strong>通过 span 来获取某元素在集合中的排名</strong>（即 <code>ZRANK</code> 命令）。</p><p>下面再来看看跳表结构体的定义：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplist</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> level<span class="token punctuation">;</span>
<span class="token punctuation">}</span> zskiplist<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跳表结构体中定义了头尾指针、跳表的长度和层数，这样在查询时直接从头/尾指针开始访问即可。</p><p>完整的跳表结构如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202307120018340.png" alt="image-20230711224822896" loading="lazy"></p><p>可以发现，在查询时，从最顶层根据跳表的特性往下层寻找，<strong>当上下相邻层的结点数之比为 1:2 时，就把链表的 O(N) 复杂度降到了 O(logN)</strong>，类似二分查找。</p><h3 id="_7-1-如何维持上下相邻层的结点数之比为-1-2" tabindex="-1"><a class="header-anchor" href="#_7-1-如何维持上下相邻层的结点数之比为-1-2" aria-hidden="true">#</a> 7.1 如何维持上下相邻层的结点数之比为 1:2</h3><p>如果要强行维持，那么在势必会影响插入/删除性能，因为涉及到其他节点层数的调整。</p><p>来看看 Redis 是怎么设计的，其中 <code>zslRandomLevel()</code> 是用来生成节点的层数的：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZSKIPLIST_MAXLEVEL</span> <span class="token expression"><span class="token number">64</span>  </span><span class="token comment">// 最大层数为64</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZSKIPLIST_P</span> <span class="token expression"><span class="token number">0.25</span>       </span><span class="token comment">// 随机数的值为0.25</span></span>
<span class="token keyword">int</span> <span class="token function">zslRandomLevel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化层为1</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>ZSKIPLIST_P <span class="token operator">*</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        level <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>level<span class="token operator">&lt;</span>ZSKIPLIST_MAXLEVEL<span class="token punctuation">)</span> <span class="token operator">?</span> level <span class="token operator">:</span> ZSKIPLIST_MAXLEVEL<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现 Redis 是 <strong>随机生成每一个节点的层数</strong>，具体来说：</p><ul><li>层数先初始化为 1；</li><li>然后 <strong>生成一个随机数，如果小于 ZSKIPLIST_P（节点增加一层的概率，值为 0.25），那么层数就 +1</strong>；</li><li>所以 <strong>节点的层数每增加一层的概率不超过 25%</strong>，从概率学的角度来说，这能保证上下相邻层的结点数之比约为 1:2。</li></ul><p>这样一来，当向跳表中插入一个节点时，就只需要修改前后结点的指针指向即可。</p><h3 id="_7-2-跳表的插入过程" tabindex="-1"><a class="header-anchor" href="#_7-2-跳表的插入过程" aria-hidden="true">#</a> 7.2 跳表的插入过程</h3><p>以下面这个简约版的跳表来演示插入一个分值为 9.5 的节点（注意后向指针未画出）：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/数据结构%2FRedis 底层数据结构.assets-2023_12_23-1703338290.png" alt="image-20231223213127642" loading="lazy"></p><p><strong>1、先找到待插入节点的后向节点，过程中记录头节点到后向节点的跨度</strong>。</p><blockquote><p>注意后向指指针的方向往后，不是后继节点，前向同理，不要和链表的前驱后继节点搞混了。</p></blockquote><ul><li>记录跨度是为了在插入新节点后，后向节点的跨度发生了改变，而且要计算新节点的跨度；</li><li>注意：<strong>后向节点和跨度是保存在一个数组中的</strong>，因为每层的后向节点和跨度都不同，数组下标就是层数；</li><li>至于如何查找的，后面在跳表的查询过程时讲解。</li></ul><p><strong>2、随机生成新节点的层数</strong>。</p><ul><li>上面已讲解如何随机生成节点层数。</li></ul><p><strong>3、插入新节点</strong>。</p><ul><li><p>假设上面生成的随机层数为 2，那么分值为 9.5 的元素插入后，跳表应该如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/数据结构%2FRedis 底层数据结构.assets-2023_12_23-1703342782.png" alt="image-20231223224619612" loading="lazy"></p></li><li><p>要实现这个效果，需要两步：</p><ol><li>找到新节点在 <strong>每一层的后向节点</strong>（第一步已经找到了），即对于 lv0 应该找到节点 9，对于 lv1 应该找到节点 8；</li><li>将新节点插入到 <strong>每一层</strong> 的后向节点之后，然后新节点的前向指针指向其后向节点原来的前向节点（跟普通链表的插入一样）。</li></ol></li><li><p>注意每一层都需要操作，新节点在每层的后向节点在第一步中都已经存储在一个数组中了。</p></li></ul><p><strong>4、计算每一层的跨度 span</strong>。</p><ul><li><p>插入一个新节点后，<strong>该新节点的跨度和其在每一层的后向节点的跨度都需要计算</strong>；</p></li><li><p>首先来看最底层，<strong>最底层的跨度其实都是 1</strong>，因为最底层压根就没有跳，所以不用计算；</p></li><li><p>对于 lv1 层，要想办法确定节点 8 到节点 9.5 和节点 9.5 到 节点 12 之间的距离。实际上这两个只确定一个就可以，因为 <strong>这两个距离之和就是原来 lv1 层节点 8 的 span 再 +1</strong>（插入了新节点）。</p></li><li><p>来看看节点 8 到节点 9.5 之间的距离怎么算，其实可以转换为 lv1 层节点 8 到 lv0 层节点 9 之间的距离 + 1（因为对于 lv0 层来说跨度都为 1），即下面这段：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/数据结构%2FRedis 底层数据结构.assets-2023_12_24-1703396989.png" alt="image-20231224134947993" loading="lazy"></p></li><li><p>那这段又怎么算呢？可以把它转换为下面两段距离的差，这两段的值在第一步统计后向节点的跨度时都记录下来了；</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/数据结构%2FRedis 底层数据结构.assets-2023_12_23-1703345008.png" alt="image-20231223232327377" loading="lazy"></p></li><li><p>注意：对于每一层的跨度都需要更新，每层的原始跨度在第一步时已经统计出来了，存放在一个数组中。</p></li></ul><p><strong>5、设置后向指针，更新跳表总节点数和最高层数</strong>。</p><ul><li>针对每一层都调整完成后，要将新节点的后向指针指向它的后向节点，新节点的前向节点的 <strong>后向指针</strong> 再指向新节点，<strong>后向指针不在 level 数组中，不用每层都设置</strong>；</li><li>最后要更新最外层的跳表结构，即 <strong>总结点数 (length) 和层数 (level)</strong>（如果最高层数发生了变化）。</li></ul><h3 id="_7-3-跳表的查询过程" tabindex="-1"><a class="header-anchor" href="#_7-3-跳表的查询过程" aria-hidden="true">#</a> 7.3 跳表的查询过程</h3><p>在查询一个跳表时，会从最高层开始，逐层往下查询，查询过程中的 <strong>判断依据是节点中 SDS 类型的元素大小及它的权重</strong>：</p><ul><li><p><strong>当前节点权重小于待查寻节点的权重时</strong>，访问 <strong>该层的下一个节点</strong>；</p></li><li><p><strong>当前节点权重等于待查寻节点的权重</strong>，并且 <strong>当前节点的 SDS 类型小于待查寻数据时</strong>，访问 <strong>该层的下一个节点</strong>；</p><blockquote><p>因为权重相同的节点，会按照 SDS 类型的大小进行排序。</p></blockquote></li><li><p>若 <strong>上述条件都不满足</strong>，或 <strong>下一个节点为 NULL</strong> 时，<strong>访问下一层</strong>，沿着下一层继续查找。</p></li></ul><p>例如，从下面的 3 层跳表中，查找「元素 abcd，权重为 4」的节点：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/数据结构%2FRedis 底层数据结构.assets-2023_12_24-1703347349.png" alt="image-20231224000227857" loading="lazy"></p><p>过程如下：</p><ol><li>从最高层的头节点开始，L2 指向了「元素：abc，权重：3」节点，该节点权重小于待查寻节点，所以访问该层的下一个节点，但下一个节点为 NULL，因此访问下一层 L1；</li><li>「元素：abc，权重：3」节点的 L1 层下一个节点指向了「元素：abcde，权重：4」节点，权重比较相同，但当前节点 SDS 类型（abcde）大于待查寻节点 SDS 类型（abcd），因此还要继续访问下一层 L0；</li><li>「元素：abc，权重：3」节点的 L0 层下一个节点指向了「元素：abcd，权重：4」节点，查询结束。</li></ol><h2 id="_8-quicklist" tabindex="-1"><a class="header-anchor" href="#_8-quicklist" aria-hidden="true">#</a> 8. quicklist</h2><p>前面说过，List 数据结构的底层实现之前是双向链表或压缩列表，但是由于 <strong>压缩列表存在连锁更新的问题</strong>，所以 Redis 3.2 时，改用了 <strong>quicklist</strong> 作为 List 的底层实现。</p><p>quicklist 其实就是 <strong>双向链表 + 压缩列表</strong> 的组合，它就是一个链表，<strong>链表中的节点元素又是一个压缩列表</strong>。它通过 <strong>控制压缩列表的大小或数量</strong> 来规避连锁更新的问题，因为在元素较少时，连锁更新带来的影响也不大。</p><p>quicklist 的结构如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">quicklist</span> <span class="token punctuation">{</span>
    quicklistNode <span class="token operator">*</span>head<span class="token punctuation">;</span>      <span class="token comment">//quicklist的链表头</span>
    quicklistNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>     <span class="token comment">//quicklist的链表尾</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> count<span class="token punctuation">;</span>    <span class="token comment">//所有压缩列表中的总元素个数</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>       <span class="token comment">//quicklistNodes的个数</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span> quicklist<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>quicklistNode 结构：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">quicklistNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">quicklistNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>     <span class="token comment">//前一个quicklistNode</span>
    <span class="token keyword">struct</span> <span class="token class-name">quicklistNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>     <span class="token comment">//后一个quicklistNode</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">;</span>          <span class="token comment">//quicklistNode指向的压缩列表</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sz<span class="token punctuation">;</span>        <span class="token comment">//压缩列表的的字节大小            </span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count <span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">//ziplist中的元素个数 </span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span> quicklistNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，quicklistNode 中有 prev 和 next 指针，其实就是一个双向链表，而 <code>*zl</code> 指针指向一个压缩列表，规定了其中的元素个数为 16 个。</p><p>quicklist 结构示意图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/数据结构%2FRedis 底层数据结构.assets-2023_12_24-1703392316.png" alt="image-20231224123153671" loading="lazy"></p><p>在插入新元素时，会先往压缩列表中插入，压缩列表满后，才会新建一个 quicklistNode，然后往新的压缩列表中插入。</p><p>通过控制压缩列表的数量，规避了连锁更新带来的性能问题，但是 <strong>并没有完全解决该问题</strong>，因为连锁更新问题的根源在于压缩列表的 prevlen 属性的设计。不过在 Redis 5.0 中新设计的 listpack 彻底避免了连锁更新的问题。</p><h2 id="_9-listpack" tabindex="-1"><a class="header-anchor" href="#_9-listpack" aria-hidden="true">#</a> 9. listpack</h2><p>Redis 5.0 新引入的 <strong>listpack 去掉了 prevlen 属性</strong>，就是为了代替压缩列表，<strong>彻底避免连锁更新的问题</strong>。</p><p>listpack 借鉴了压缩列表的优势，只不过 <strong>把 prevlen 属性改成了当前节点的长度</strong>：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/https%2Fcdn.xiaolincoding.com%2Fmysql%2Fother-2023_12_24-1703393188.png" alt="img" loading="lazy"></p><p>其中：</p><ul><li><p>encoding 还是元素的编码类型，根据不同大小的整数和字符串进行不同的编码，以节省内存；</p></li><li><p>data 存放实际的节点数据；</p></li><li><p>len 就是当前节点 encoding + data 的长度。</p></li></ul><div class="hint-container info"><p class="hint-container-title">去掉 prevlen 属性，那还能从后往前遍历吗？</p><p>也是可以的，listpack 有一个 <code>lpPrev</code> 函数，就是返回前一个元素的起始地址：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* If &#39;p&#39; points to an element of the listpack, calling lpPrev() will return
 * the pointer to the preivous element (the one on the left), or NULL if &#39;p&#39;
 * already pointed to the first element of the listpack. */</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">lpPrev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>lp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span>lp <span class="token operator">==</span> LP_HDR_SIZE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">/* Seek the first backlen byte of the last element. */</span>
    <span class="token class-name">uint64_t</span> prevlen <span class="token operator">=</span> <span class="token function">lpDecodeBacklen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    prevlen <span class="token operator">+=</span> <span class="token function">lpEncodeBacklen</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span>prevlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token operator">-</span>prevlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* Seek the first byte of the previous entry. */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>lpDecodeBacklen</code> 函数是具体的算法，就是从当前节点往后查找前一个元素的长度，具体算法如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Decode the backlen and returns it. If the encoding looks invalid (more than
 * 5 bytes are used), UINT64_MAX is returned to report the problem. */</span>
<span class="token class-name">uint64_t</span> <span class="token function">lpDecodeBacklen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint64_t</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 用于存储解码后的长度值</span>
    <span class="token class-name">uint64_t</span> shift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 用于跟踪解码过程中的位移量</span>

    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        val <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">;</span>  <span class="token comment">// 将字节中的低 7 位存储到 val 中，位移量由 shift 控制</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 如果字节的最高位不为 1，则表示该字节是最后一个字节，结束解码过程</span>
        shift <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span>  <span class="token comment">// 更新位移量，准备解码下一个字节</span>
        p<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">// 后退一个字节，继续解码后一个字节</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shift <span class="token operator">&gt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token keyword">return</span> UINT64_MAX<span class="token punctuation">;</span>  <span class="token comment">// 如果位移量超过了28位，表示解码的长度超过了 ListPack 所支持的范围，返回 UINT64_MAX 表示出现问题</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 一直循环直到解码完成或出现问题</span>

    <span class="token keyword">return</span> val<span class="token punctuation">;</span>  <span class="token comment">// 返回解码后的长度值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>算法的底层逻辑就不过多研究了，So difficult！</p></div><h2 id="_10-总结" tabindex="-1"><a class="header-anchor" href="#_10-总结" aria-hidden="true">#</a> 10. 总结</h2><p>最后再来回顾下 Redis 中各种数据类型对应的底层结构：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302232032985.png" alt="img" loading="lazy"></p><h2 id="_11-参考文章" tabindex="-1"><a class="header-anchor" href="#_11-参考文章" aria-hidden="true">#</a> 11. 参考文章</h2>`,80),_={href:"https://xiaolincoding.com",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"《Redis 设计与实现》",-1),w={href:"https://blog.csdn.net/u013536232/article/details/105476382",target:"_blank",rel:"noopener noreferrer"};function f(S,x){const e=o("router-link"),p=o("ExternalLinkIcon");return i(),r("div",null,[n("details",u,[k,n("nav",g,[n("ul",null,[n("li",null,[a(e,{to:"#前置知识-redisobject"},{default:t(()=>[s("> 前置知识：redisObject")]),_:1})]),n("li",null,[a(e,{to:"#_1-redis-数据结构有哪些"},{default:t(()=>[s("1. Redis 数据结构有哪些")]),_:1})]),n("li",null,[a(e,{to:"#_2-简单动态字符串-sds"},{default:t(()=>[s("2. 简单动态字符串 SDS")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_2-1-sds-结构"},{default:t(()=>[s("2.1 SDS 结构")]),_:1})]),n("li",null,[a(e,{to:"#_2-2-内存对齐优化"},{default:t(()=>[s("2.2 内存对齐优化")]),_:1})])])]),n("li",null,[a(e,{to:"#_3-双向链表"},{default:t(()=>[s("3. 双向链表")]),_:1})]),n("li",null,[a(e,{to:"#_4-压缩列表"},{default:t(()=>[s("4. 压缩列表")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_4-1-压缩列表结构"},{default:t(()=>[s("4.1 压缩列表结构")]),_:1})]),n("li",null,[a(e,{to:"#_4-2-压缩列表缺陷"},{default:t(()=>[s("4.2 压缩列表缺陷")]),_:1})])])]),n("li",null,[a(e,{to:"#_5-哈希表"},{default:t(()=>[s("5. 哈希表")]),_:1})]),n("li",null,[a(e,{to:"#_6-整数集合"},{default:t(()=>[s("6. 整数集合")]),_:1})]),n("li",null,[a(e,{to:"#_7-跳表"},{default:t(()=>[s("7. 跳表")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_7-1-如何维持上下相邻层的结点数之比为-1-2"},{default:t(()=>[s("7.1 如何维持上下相邻层的结点数之比为 1:2")]),_:1})]),n("li",null,[a(e,{to:"#_7-2-跳表的插入过程"},{default:t(()=>[s("7.2 跳表的插入过程")]),_:1})]),n("li",null,[a(e,{to:"#_7-3-跳表的查询过程"},{default:t(()=>[s("7.3 跳表的查询过程")]),_:1})])])]),n("li",null,[a(e,{to:"#_8-quicklist"},{default:t(()=>[s("8. quicklist")]),_:1})]),n("li",null,[a(e,{to:"#_9-listpack"},{default:t(()=>[s("9. listpack")]),_:1})]),n("li",null,[a(e,{to:"#_10-总结"},{default:t(()=>[s("10. 总结")]),_:1})]),n("li",null,[a(e,{to:"#_11-参考文章"},{default:t(()=>[s("11. 参考文章")]),_:1})])])])]),m,n("p",null,[s("哈希表数据类型的 rehash 与全局哈希表的是一样的，都是使用 "),v,s("，具体内容可以看 "),n("a",b,[s("kv 数据库如何实现"),a(p)]),s("。Redis 在实际使用哈希表时，会定义一个 dict 结构，里面包含了两个哈希表：")]),h,n("ul",null,[n("li",null,[n("a",_,[s("小林 coding"),a(p)])]),y,n("li",null,[n("a",w,[s("Redis 跳跃表图解&插入详述"),a(p)])])])])}const N=c(d,[["render",f],["__file","redis底层数据结构.html.vue"]]);export{N as default};
