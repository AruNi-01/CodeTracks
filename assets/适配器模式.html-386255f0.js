import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as l,b as n,e as a,w as p,a as i,d as t}from"./app-4001411e.js";const u={},k={class:"hint-container details"},d=n("summary",null,"本文内容",-1),r={class:"table-of-contents"},v=i(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>适配器模式也是一种常用的结构型模式，它主要有两种实现方式，<strong>类适配器和对象适配器</strong>。下面就来介绍下适配器模式的原理和它的应用场景，以及它和前面的装饰器、代理模式又有何区别？</p></div><h2 id="_1-什么是适配器模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是适配器模式" aria-hidden="true">#</a> 1. 什么是适配器模式</h2><h3 id="_1-1-定义" tabindex="-1"><a class="header-anchor" href="#_1-1-定义" aria-hidden="true">#</a> 1.1 定义</h3><p><strong>适配器模式</strong>，顾名思义，就是用来做适配的，<strong>它能将不兼容的接口转化为可兼容的接口</strong>，让原本因接口不兼容而不能一起工作的类可以一起工作。</p><p>这个模式有一个非常形象的解释例子，就是 USB 转接头充当适配器，它将两种不兼容的接口，通过转接变得可以一起工作。</p><h3 id="_1-2-实现" tabindex="-1"><a class="header-anchor" href="#_1-2-实现" aria-hidden="true">#</a> 1.2 实现</h3><p>适配器模式有两种实现方式：</p><ul><li><strong>类适配器</strong>：使用 <strong>继承</strong> 实现；</li><li><strong>对象适配器</strong>：使用 <strong>组合</strong> 实现。</li></ul><p>具体实现代码如下所示，其中，ITarget 接口类中是一组要转化成的方法；Adaptee 类中的方法不兼容 ITarget 中方法，所以 Adaptee 为被适配者；Adaptor 充当适配器的角色，将 Adaptee 中的方法转化成一组符合 ITarget 中方法定义的方法。</p><blockquote><p>ps：上面的方法，其实就是接口，写成方法只是为了防止和 interface 接口混淆。</p></blockquote><p>类适配器，基于继承：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITarget</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token comment">//... </span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//... </span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//... </span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptor</span> <span class="token keyword">extends</span> <span class="token class-name">Adaptee</span> <span class="token keyword">implements</span> <span class="token class-name">ITarget</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//... 重新实现 f2() ...</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 这里 fc() 不需要实现，直接继承自 Adaptee，这是跟对象适配器最大的不同点</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象适配器，基于组合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITarget</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token comment">//... </span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//... </span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token comment">//... </span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptor</span> <span class="token keyword">implements</span> <span class="token class-name">ITarget</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token class-name">Adaptor</span><span class="token punctuation">(</span><span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    adaptee<span class="token punctuation">.</span><span class="token function">fa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 委托给 Adaptee</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//... 重新实现 f2() ...</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    adaptee<span class="token punctuation">.</span><span class="token function">fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这两种实现方式，我们可以根据两个标准来判断 — Adaptee 接口的个数，Adaptee 和 ITarget 的契合程度：</p><ul><li>如果 Adaptee 接口并不多，那么两种实现方式都可以；</li><li>如果 <strong>Adaptee 接口很多</strong>，而且 <strong>Adaptee 和 ITarget 接口定义大部分都相同</strong>，那推荐使用 <strong>类适配器</strong>。因为这样 Adaptor 可以复用父类 Adaptee 的大部分接口；</li><li>如果 <strong>Adaptee 接口很多</strong>，而且 <strong>Adaptee 和 ITarget 接口定义大部分都不相同</strong>，那么推荐使用 <strong>对象适配器</strong>，因为组合结构相比于继承更加灵活。</li></ul><h2 id="_2-应用场景" tabindex="-1"><a class="header-anchor" href="#_2-应用场景" aria-hidden="true">#</a> 2. 应用场景</h2><p>其实，<strong>适配器模式是一种 “补偿模式”，用于补救设计上的缺陷</strong>。这种模式可以说是一种 “无奈之举”。<strong>如果在设计初期，我们就能协调规避接口不兼容的问题，那么就不会有使用适配器模式的机会了</strong>。</p><p>根据适配器模式的定义可知，它主要是应用在 “<strong>接口不兼容</strong>” 的类之间。所以我们只要搞清楚 <strong>什么情况会出现接口不兼容</strong>，也就知道了它的应用场景了。</p><p>下面就来看看有哪些情况会出现接口不兼容的情况。</p><h3 id="_2-1-封装有缺陷的接口设计" tabindex="-1"><a class="header-anchor" href="#_2-1-封装有缺陷的接口设计" aria-hidden="true">#</a> 2.1 封装有缺陷的接口设计</h3><p>假设 <strong>我们依赖的外部系统在接口设计方面的缺陷</strong>，比如包含大量静态方法、不规范的命名、参数过多等等。引入后会影响代码的可读性和可测试性，这时就可以 <strong>使用适配器模式，将外部系统的接口进行二次封装，抽象出更好用的接口设计</strong>，从而隔离原本有缺陷的设计。</p><p>具体示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CD</span> <span class="token punctuation">{</span> <span class="token comment">// 这个类来自外部 sdk，我们无权修改它的代码</span>
  <span class="token comment">//...</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticFunction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">uglyNamingFunction2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tooManyParamsFunction3</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramA<span class="token punctuation">,</span> <span class="token keyword">int</span> paramB<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lowPerformanceFunction4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用适配器模式进行重构</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITarget</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">fucntion3</span><span class="token punctuation">(</span><span class="token class-name">ParamsWrapperDefinition</span> paramsWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">function4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 适配器，将上面 CD 中的接口转化为我们定义的 ITarget 中的接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CDAdaptor</span> <span class="token keyword">extends</span> <span class="token class-name">CD</span> <span class="token keyword">implements</span> <span class="token class-name">ITarget</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">staticFunction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">uglyNamingFucntion2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function3</span><span class="token punctuation">(</span><span class="token class-name">ParamsWrapperDefinition</span> paramsWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">tooManyParamsFunction3</span><span class="token punctuation">(</span>paramsWrapper<span class="token punctuation">.</span><span class="token function">getParamA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...reimplement it...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-统一多个类的接口设计" tabindex="-1"><a class="header-anchor" href="#_2-2-统一多个类的接口设计" aria-hidden="true">#</a> 2.2 统一多个类的接口设计</h3><p>假设 <strong>某个功能的实现依赖多个外部系统（或者说类）。通过适配器模式，将它们的接口适配为统一的接口定义，然后就可以使用多态的特性来复用代码逻辑</strong>。</p><p>例如，我们的系统需要对用户输入的文本进行敏感词过滤，为了提高过滤效果（使过滤更全面），我们引入了多款第三方敏感词过滤系统，依次对文本进行过滤。这些第三方的系统分别如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ASensitiveWordsFilter</span> <span class="token punctuation">{</span> <span class="token comment">// A敏感词过滤系统提供的接口</span>
  <span class="token comment">// text是原始文本，函数输出用***替换敏感词之后的文本</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filterSexyWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filterPoliticalWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BSensitiveWordsFilter</span>  <span class="token punctuation">{</span> <span class="token comment">// B敏感词过滤系统提供的接口</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CSensitiveWordsFilter</span> <span class="token punctuation">{</span> <span class="token comment">// C敏感词过滤系统提供的接口</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，<strong>这些第三方系统提供的过滤接口都是不同的，所以我们没办法使用一套逻辑来调用各接口，需要依次调用它们</strong>。使用方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 未使用适配器模式之前的代码：代码的可测试性、扩展性不好</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RiskManagement</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">ASensitiveWordsFilter</span> aFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ASensitiveWordsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">BSensitiveWordsFilter</span> bFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BSensitiveWordsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">CSensitiveWordsFilter</span> cFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CSensitiveWordsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 在进行过滤时，需要依次调用第三方系统的过滤接口</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filterSensitiveWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> maskedText <span class="token operator">=</span> aFilter<span class="token punctuation">.</span><span class="token function">filterSexyWords</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    maskedText <span class="token operator">=</span> aFilter<span class="token punctuation">.</span><span class="token function">filterPoliticalWords</span><span class="token punctuation">(</span>maskedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    maskedText <span class="token operator">=</span> bFilter<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>maskedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    maskedText <span class="token operator">=</span> cFilter<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>maskedText<span class="token punctuation">,</span> <span class="token string">&quot;***&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> maskedText<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决上面的痛点，就可以 <strong>使用适配器模式，将所有第三方系统的接口适配为统一的接口定义</strong>，就像下面这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用适配器模式进行改造</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISensitiveWordsFilter</span> <span class="token punctuation">{</span> <span class="token comment">// 统一接口定义</span>
  <span class="token class-name">String</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ASensitiveWordsFilterAdaptor</span> <span class="token keyword">implements</span> <span class="token class-name">ISensitiveWordsFilter</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">ASensitiveWordsFilter</span> aFilter<span class="token punctuation">;</span>
    
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> maskedText <span class="token operator">=</span> aFilter<span class="token punctuation">.</span><span class="token function">filterSexyWords</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    maskedText <span class="token operator">=</span> aFilter<span class="token punctuation">.</span><span class="token function">filterPoliticalWords</span><span class="token punctuation">(</span>maskedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> maskedText<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//...省略BSensitiveWordsFilterAdaptor、CSensitiveWordsFilterAdaptor...</span>

<span class="token comment">// 扩展性更好，更加符合开闭原则，如果添加一个新的敏感词过滤系统，</span>
<span class="token comment">// 这个类完全不需要改动；而且基于接口而非实现编程，代码的可测试性更好。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RiskManagement</span> <span class="token punctuation">{</span> 
  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ISensitiveWordsFilter</span><span class="token punctuation">&gt;</span></span> filters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addSensitiveWordsFilter</span><span class="token punctuation">(</span><span class="token class-name">ISensitiveWordsFilter</span> filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    filters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filterSensitiveWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> maskedText <span class="token operator">=</span> text<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ISensitiveWordsFilter</span> filter <span class="token operator">:</span> filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      maskedText <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>maskedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> maskedText<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样再使用这些第三方系统的过滤接口时，便可以需要接口什么就添加进来，然后把依次过滤流程交给这个 List 来处理。</p><h3 id="_2-3-替换依赖的外部系统" tabindex="-1"><a class="header-anchor" href="#_2-3-替换依赖的外部系统" aria-hidden="true">#</a> 2.3 替换依赖的外部系统</h3><p><strong>当我们需要把项目中依赖的一个外部系统，替换为另一个外部系统时，利用适配器模式，可以减少对代码的改动</strong>。</p><p>具体示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 外部系统A</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IA</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">void</span> <span class="token function">fa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span>
<span class="token punctuation">}</span>
    
<span class="token comment">// 在我们的项目中，外部系统A的使用示例</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">IA</span> a<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token class-name">IA</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
<span class="token class-name">Demo</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用适配器模式，将外部系统A替换成外部系统B</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BAdaptor</span> implemnts <span class="token constant">IA</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">BAdaptor</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    b<span class="token punctuation">.</span><span class="token function">fb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
    
<span class="token comment">// 借助BAdaptor，Demo的代码中，调用IA接口的地方都无需改动，</span>
<span class="token comment">// 只需要将BAdaptor如下注入到Demo即可。</span>
<span class="token class-name">Demo</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BAdaptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-java-中的适配器模式" tabindex="-1"><a class="header-anchor" href="#_3-java-中的适配器模式" aria-hidden="true">#</a> 3. Java 中的适配器模式</h2><p>在 Java 中也有一些使用适配器模式的具体例子，下面列举两个常用的，分别是 Java IO 和 Java 日志框架。</p><h3 id="_3-1-java-io-中的适配器模式" tabindex="-1"><a class="header-anchor" href="#_3-1-java-io-中的适配器模式" aria-hidden="true">#</a> 3.1 Java IO 中的适配器模式</h3><p>上一章中讲了 Java IO 中的装饰器模式，其实 Java IO 中还使用到了适配器模式。我们知道，Java IO 大体上分为四类，如下所示：</p><table><thead><tr><th>类型</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><p>这四大类又派生除了很多针对不同场景的子类，它们的关系图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304142136891.png" alt="" loading="lazy"></p><p>我们可以发现一个规律，字节流的类都带有 XxxInputStream/XxxOutputStream，字符流的类都带有 XxxReader/XxxWriter。而在上图中，我们可以在 Reader 和 Writer 中找到叫 <strong>InputStreamReader 和 OutputStreamWriter 的类</strong>，这是个什么类呢？结合了字节流和字符流？我们就拿 InputStreamReader 来举例说明。</p><p>通过查看源码可知，<strong>其实 InputStreamReader 是用于将字节流转换成字符流的一个桥梁，它内部使用 StreamDecoder 将读取到的字节数据使用指定的字符集将它们解码为字符数据</strong>。</p><p>具体的源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStreamReader</span> <span class="token keyword">extends</span> <span class="token class-name">Reader</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StreamDecoder</span> sd<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sd <span class="token operator">=</span> <span class="token class-name">StreamDecoder</span><span class="token punctuation">.</span><span class="token function">forInputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
                <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ## check lock object</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ... 其他构造方法</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">CharBuffer</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sd<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sd<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sd<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sd<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        sd<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>OutputSteamWriter 与之类似，使用 StreamEncoder 将读取到的字节数据使用指定的字符集将它们编码为字符数据</strong>。</p><p>所以 <strong>InputStreamReader 和 OutputStreamWriter 其实就是两个适配器（Adapter），它们提供了一个桥梁（StreamDecoder 和 StreamEncoder），让字节流可以转化为字符流，而 InputStream 和 OutputStream 的子类就是被适配者</strong>。</p><p>所以我们在使用时，可以利用适配器模式，将字节流的读写适配成字符流的读写；同时，字符也使用了装饰器模式，可以对功能进行增强，就像下面这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 适配器模式：将字节流转为字符流读取，InputStreamReader 为适配器，InputStream 的子类（FileInputStream）为被适配者</span>
<span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;/text.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 装饰器模式：添加缓存，增强 InputStreamReader 的功能</span>
<span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-java-日志中的适配器模式" tabindex="-1"><a class="header-anchor" href="#_3-2-java-日志中的适配器模式" aria-hidden="true">#</a> 3.2 Java 日志中的适配器模式</h3><p>在 Java 中有很多日志框架，比如 log4j、logback、JDK 提供的 JUL（java.util.logging）等，这些日志都提供了相似的功能，比如按照不同级别（debug、info、warn、error 等）打印日志信息，不过 <strong>它们并没有实现统一的接口</strong>。</p><p>所以如果我们在开发时，<strong>使用了多套日志框架</strong>，例如项目中使用的组件是使用 log4j，而我们项目本身使用的是 logback。这样我们的项目就 <strong>需要编写两套日志框架的配置文件</strong>（日志存储的文件地址、打印日志的格式等）。如果引入多个组件，每个组件使用的日志框架都不同，那么日志本身的管理工作就会变得非常复杂。所以我们需要 <strong>统一日志打印框架</strong>。</p><p>Java 中的 <strong>Slf4j 日志框架就提供了一套打印日志的统一接口</strong>。不过它只定义了接口，并没有具体实现，所以需要配合其他日志框架来使用。</p><p>而 Slf4j 的出现又晚于 log4j、JUL 等，所以为了兼容它们，<strong>Slf4j 还针对不同的日志框架提供了对应的适配器，对不同日志框架的接口进行了二次封装，适配成统一的 Slf4j 接口定义</strong>。</p><p>具体代码示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// slf4j 统一的接口定义</span>
<span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg1<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg1<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg2<span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argArray<span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//...省略info、warn、error等一堆接口</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
    log4j 日志框架的适配器：
    Log4jLoggerAdapter 实现了 LocationAwareLogger接口，
    其中 LocationAwareLogger 继承自 Logger 接口，
    也就相当于 Log4jLoggerAdapter 实现了 Logger 接口。
*/</span>
<span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Log4jLoggerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MarkerIgnoringBase</span> <span class="token keyword">implements</span> <span class="token class-name">LocationAwareLogger</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    
  <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>Logger</span> logger<span class="token punctuation">;</span> <span class="token comment">// log4j</span>
 
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">FQCN</span><span class="token punctuation">,</span> <span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">FormattingTuple</span> ft <span class="token operator">=</span> <span class="token class-name">MessageFormatter</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">FQCN</span><span class="token punctuation">,</span> <span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">,</span> ft<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ft<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 
  <span class="token comment">//...省略一堆接口的实现...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们在项目中就可以 <strong>统一使用 Slf4j 提供的接口来编写打印日志的代码，具体使用哪种日志框架实现（log4j、logback……），是可以动态地指定的</strong>（使用 Java 的 SPI 技术），只需要将相应的 SDK 导入到项目中即可。</p><h2 id="_4-代理、装饰器、适配器模式的区别" tabindex="-1"><a class="header-anchor" href="#_4-代理、装饰器、适配器模式的区别" aria-hidden="true">#</a> 4. 代理、装饰器、适配器模式的区别</h2><p>代理、装饰器和适配器模式，都是常用的结构型设计模式，它们的代码结构非常相似。笼统来说，**它们都可以成为 Wrapper 模式，即通过 Wrapper 类二次封装原始类。</p><p>但是，<strong>它们封装的目的、要解决的问题、应用场景完全不同</strong>，这也就是它们的区别。</p><p><strong>代理模式：在不改变原始类的条件下，为原始类定义一个代理类，主要目的提供前后扩展点，增加一些非业务性的功能，例如统计、限流、日志等</strong>。</p><p><strong>装饰器模式：在不改变原始类的情况下，对原始类功能进行增强，并且支持多个装饰器的嵌套使用</strong>。例如 BufferdInputStream 对 InputStream 的子类（比如 FileInputStream）添加了缓存的增强，再嵌套一个 DataInputStream 又添加了对基本数据类型读取的增强。</p><p><strong>适配器模式：它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作，属于是一种 “补偿模式”</strong>。例如 Java IO 中字节流与字符流是不兼容的，而它提供了 InputStreamReader 装饰器，内部通过 StreamDecoder 来将字节流转成字符流，从而让字符流 Reader 的子类能与字节流 InputStream 的子类能一起工作。</p><p><strong>适配器模式提供的是跟原始类不同的接口，而代理模式和装饰器模式提供的都是跟原始类相同的接口</strong>。</p><p>适配器模式有两种实现方式：</p><ul><li><strong>类适配器</strong>：使用 <strong>继承</strong> 实现；</li><li><strong>对象适配器</strong>：使用 <strong>组合</strong> 实现。</li></ul><p>其实，<strong>代理模式也可以有两种实现方式</strong>：</p><ul><li>一般情况下，我们会让代理类和原始类实现相同的接口，然后在代理类中通过组合的方式，将原始类注入进来；</li><li>但是如果原始类没有定义接口，并且原始类是第三方开发的，这是就可以让代理类继承原始类，在代理类方法中通过 <code>super.xx()</code> 方法来调用原始类的方法了。</li></ul><p><strong>而装饰器模式只能通过组合关系实现</strong>，因为它本身就是使用组合来替代继承，用于解决继承关系过于复杂的问题。</p>`,72);function m(b,g){const s=c("router-link");return o(),l("div",null,[n("details",k,[d,n("nav",r,[n("ul",null,[n("li",null,[a(s,{to:"#_1-什么是适配器模式"},{default:p(()=>[t("1. 什么是适配器模式")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_1-1-定义"},{default:p(()=>[t("1.1 定义")]),_:1})]),n("li",null,[a(s,{to:"#_1-2-实现"},{default:p(()=>[t("1.2 实现")]),_:1})])])]),n("li",null,[a(s,{to:"#_2-应用场景"},{default:p(()=>[t("2. 应用场景")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_2-1-封装有缺陷的接口设计"},{default:p(()=>[t("2.1 封装有缺陷的接口设计")]),_:1})]),n("li",null,[a(s,{to:"#_2-2-统一多个类的接口设计"},{default:p(()=>[t("2.2 统一多个类的接口设计")]),_:1})]),n("li",null,[a(s,{to:"#_2-3-替换依赖的外部系统"},{default:p(()=>[t("2.3 替换依赖的外部系统")]),_:1})])])]),n("li",null,[a(s,{to:"#_3-java-中的适配器模式"},{default:p(()=>[t("3. Java 中的适配器模式")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_3-1-java-io-中的适配器模式"},{default:p(()=>[t("3.1 Java IO 中的适配器模式")]),_:1})]),n("li",null,[a(s,{to:"#_3-2-java-日志中的适配器模式"},{default:p(()=>[t("3.2 Java 日志中的适配器模式")]),_:1})])])]),n("li",null,[a(s,{to:"#_4-代理、装饰器、适配器模式的区别"},{default:p(()=>[t("4. 代理、装饰器、适配器模式的区别")]),_:1})])])])]),v])}const f=e(u,[["render",m],["__file","适配器模式.html.vue"]]);export{f as default};
