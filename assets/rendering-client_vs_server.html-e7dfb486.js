import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as a,c as i,b as r,d as e,e as t,a as g}from"./app-f67e1033.js";const p={},d=g('<h2 id="what-is-rendering" tabindex="-1"><a class="header-anchor" href="#what-is-rendering" aria-hidden="true">#</a> What is Rendering?</h2><p>渲染指将 React 代码转换成 HTML 表示形式的用户界面。渲染可以在服务端或客户端上进行，发生在构建阶段之前或者在运行阶段的请求时。</p><p>在 Next.js 中有三种渲染方式：</p><ul><li><strong>服务端渲染</strong>；</li><li><strong>客户端渲染</strong>；</li><li><strong>静态网站生成</strong>。</li></ul><h2 id="pre-rendering" tabindex="-1"><a class="header-anchor" href="#pre-rendering" aria-hidden="true">#</a> Pre-Rendering</h2><p><strong>服务端渲染和静态网站生成也被称为预渲染</strong>，因为 <strong>外部数据的获取和将 React 组件转换成 HTML 都发生在结果发送到客户端之前</strong>。</p><h2 id="client-side-rendering-vs-pre-rendering" tabindex="-1"><a class="header-anchor" href="#client-side-rendering-vs-pre-rendering" aria-hidden="true">#</a> Client-Side Rendering vs Pre-Rendering</h2><p>在标准的 React 应用中，<strong>浏览器接收到的是附带着 JavaScript 指令（用于控制 UI）的空 HTML shell</strong>。因为 <strong>初始的渲染工作发送在用户的设备</strong>，所以被称为 <strong>Client-Side Rendering (客户端渲染)</strong>。</p><p>相反，Next.js 的默认会预渲染每一个页面，<strong>Pre-Rendering (预渲染)</strong> 意味着 <strong>HTML 是提前在服务端生成的，而不是通过 JavaScript 在用户设备上完成所有操作</strong>。</p><p>如果应用 <strong>完全是由客户端进行渲染</strong>，那么 <strong>在渲染过程中用户将会看到一个空白的页面</strong>，如下图所示，初始时只是一个空的 HTML shell，只有在渲染完成后，才会出现 UI（渲染后）：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202311131428739.png" alt="image-20231113142742550" loading="lazy"></p><p>相较于 <strong>预渲染</strong> 的应用，用户 <strong>无论何时总是能看到构建的 HTML</strong>。如下图所示，初始时 HTML 就已经渲染完成了：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202311131435729.png" alt="image-20231113143503921" loading="lazy"></p><p>下面来看看两种类型的 Pre-Rendering。</p><h2 id="server-side-rendering" tabindex="-1"><a class="header-anchor" href="#server-side-rendering" aria-hidden="true">#</a> Server-Side Rendering</h2><p>使用 <strong>服务端渲染</strong> 时，<strong>HTML 页面是在服务器上针对每个请求生成的，生成用于页面交互的 HTML、JSON 数据，以及 JavaScript 指令，再发送给客户端</strong>。</p><p>在客户端，<strong>HTML 被用来快速展示非交互的页面，而 React 使用 JSON 数据和 JavaScript 指令来让组件进行交互</strong>（例如触发一个按钮事件）。Next.js 把这个过程被称为 <strong>Hydration</strong>。</p>',17),c={href:"https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props",target:"_blank",rel:"noopener noreferrer"},l={href:"https://nextjs.org/docs/app/building-your-application/rendering/server-components#dynamic-rendering%E3%80%82",target:"_blank",rel:"noopener noreferrer"},h={href:"https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html",target:"_blank",rel:"noopener noreferrer"},u=r("h2",{id:"static-site-generation",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#static-site-generation","aria-hidden":"true"},"#"),e(" Static Site Generation")],-1),_=r("p",null,[e("使用 "),r("strong",null,"静态网站生成"),e(" 时，HTML 也是在服务端生成，但是不像服务端渲染那样，其 "),r("strong",null,"在运行时没有服务端"),e("。相反，"),r("strong",null,"网站内容只在构建阶段生成一次，当应用部署后，HTML 一般存储在 CDN 并且对每个请求都可以重复使用"),e("。")],-1),f={href:"https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props",target:"_blank",rel:"noopener noreferrer"},b={href:"https://nextjs.org/docs/app/building-your-application/rendering/server-components",target:"_blank",rel:"noopener noreferrer"},m=r("strong",null,"可以按 page 层面给应用选择最合适的渲染方法",-1),v={href:"https://nextjs.org/docs/pages/building-your-application/data-fetching",target:"_blank",rel:"noopener noreferrer"},x={href:"https://nextjs.org/docs/app/building-your-application/data-fetching",target:"_blank",rel:"noopener noreferrer"};function j(R,S){const n=s("ExternalLinkIcon");return a(),i("div",null,[d,r("p",null,[e("在 Next.js 中，可以通过使用 "),r("a",c,[e("getServerSideProps"),t(n)]),e(" 选择服务端渲染，在 App Router 中有改动，详细查看 "),r("a",l,[e("https://nextjs.org/docs/app/building-your-application/rendering/server-components#dynamic-rendering。"),t(n)])]),r("blockquote",null,[r("p",null,[e("注意：React 18 和 Next.js 12 引入了 React 服务器组件的 alpha 版本。服务器组件完全在服务器上进行渲染，不需要客户端 JavaScript 来进行渲染。此外，服务器组件允许开发人员在服务器上保留一些逻辑，并仅将该逻辑的结果发送给客户端。这减少了发送给客户端的 dundle 大小，并提高了客户端渲染性能。 "),r("a",h,[e("Learn more about React server components here"),t(n)]),e(".")])]),u,_,r("p",null,[e("在 Next.js 中，可以通过使用 "),r("a",f,[e("getStaticProps"),t(n)]),e(" 选择静态地生成页面。在 App Router 中有改动，详细查看 "),r("a",b,[e("https://nextjs.org/docs/app/building-your-application/rendering/server-components"),t(n)])]),r("p",null,[e("Next.js 的优点就在于，无论是静态站点生成、服务端渲染还是客户端渲染，都 "),m,e("，详细阅读 "),r("a",v,[e("Data Fetch"),t(n)]),e("。对于 App Router，阅读 "),r("a",x,[e("Data Fetch"),t(n)]),e("。")])])}const N=o(p,[["render",j],["__file","rendering-client_vs_server.html.vue"]]);export{N as default};
