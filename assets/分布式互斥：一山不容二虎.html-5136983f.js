import{_ as l,Z as i,$ as e,a3 as t,a1 as s,a4 as o,a0 as a,E as p,a2 as r}from"./framework-63f054a3.js";const g={},c={class:"hint-container details"},u=t("summary",null,"本文内容",-1),_={class:"table-of-contents"},d=a('<div class="hint-container info"><p class="hint-container-title">前言</p><p>前面了解了分布式的基础知识，接下来就要逐一去攻破它们。首先要讲的是 <strong>让程序间拥有 “团队精神” 的 “分布式协调与同步”</strong>，也就是 <strong>如何让程序通过协作共同去完成一个业务目标</strong>。</p><p>本章主要讲 <strong>分布式互斥</strong>，即让分布式中的程序 <strong>互斥地访问共享资源</strong>。</p></div><h2 id="_1-什么是分布式互斥" tabindex="-1"><a class="header-anchor" href="#_1-什么是分布式互斥" aria-hidden="true">#</a> 1. 什么是分布式互斥？</h2><p>如果你已经学过并发编程，相信你对互斥这个词一点儿都不陌生。<strong>在并发编程中，互斥指的是：多个线程并发执行时，对共享的资源（变量、文件等）需要进行互斥的访问，即保证一个时刻只能由一个线程操作该共享资源，从而防止多个线程同时修改而造成的数据不一致或其他意想不到的情况</strong>。</p><p>类比到 <strong>分布式</strong>，互斥就是 <strong>在多个节点（机器）或程序去访问共享资源（数据库、文件等）时，保证同一时刻只能由一个程序去访问该资源</strong>。</p><p>可<strong>见互斥是一种排他性的资源访问方式，这种被互斥访问的共享资源，叫作临界资源</strong>。</p><p>那么如何才能做到互斥访问这些临界资源呢？</p><ul><li><strong>在并发编程中</strong>：一般是通过 <strong>锁、信号量、原子操作或者 CAS 无锁算法</strong> 来保证；</li><li><strong>而在分布式互斥中</strong>：有一些实现互斥的算法，它们分别是 <strong>集中式算法、分布式算法、令牌环算法等</strong>。</li></ul><h2 id="_2-霸道总裁-集中式算法" tabindex="-1"><a class="header-anchor" href="#_2-霸道总裁-集中式算法" aria-hidden="true">#</a> 2. 霸道总裁：集中式算法</h2><p>一个最简单直观的想法就是，<strong>找一个 “霸道总裁” 来控制每个程序访问临界资源的权限，它能保证每一时刻只能有一个程序能访问临界资源</strong>，这个 “霸道总裁” 的真名，就叫 <strong>协调者</strong>。</p><p>引入了协调者后，<strong>每个程序在访问临界资源时，都需要先给协调者发送一个请求，协调者根据当前临界资源的访问情况来判断是否允许该程序进行访问</strong>：</p><ul><li>若当前无程序使用该资源，则授权程序访问；</li><li>若当前有程序使用该资源，则将该程序放入请求队列；</li><li>若有程序使用完了该资源，则要通知协调者，接着协调者再去队列中给最前面的程序授权。</li></ul><p>这个互斥算法，就叫 <strong>集中式算法</strong>，因为协调者代表着一个集中程序或中央服务器。</p><p>下面给出一个简单的示例图：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202306100010771.png" alt="image-20230610001000023" loading="lazy"></p><p>从上述流程可以看出，<strong>一个程序完成一次临界资源的访问，需要进行三次消息交互</strong>：</p><ul><li>向协调者发送授权请求；</li><li>协调者向程序授予权限；</li><li>程序使用完资源后，向协调者发送释放权限。</li></ul><p>所以集中式算法虽然简单直观、易于实现，而且程序之间无需通信，只需要跟协调者通信即可。</p><p>但是，羊毛出在羊身上，这个算法的 <strong>问题</strong> 就在于协调者自身：</p><ul><li><strong>协调者成为了系统的性能瓶颈</strong>，如果有很多程序需要访问临界资源，那么协调者要处理的消息数量也会很多（程序数量的 3 倍）；</li><li><strong>容易引发单点故障</strong>，即协调者宕机，所有程序均无法正常访问临界资源，从而导致系统不可用。</li></ul><p>因此，如果选用集中式算法，一定要选择性能最好、可靠性最高的机器给协调者。</p><h2 id="_3-民主协商-分布式算法" tabindex="-1"><a class="header-anchor" href="#_3-民主协商-分布式算法" aria-hidden="true">#</a> 3. 民主协商：分布式算法</h2><p>既然引入协调者会带来它自身的问题，那么我们就不要它，让程序之间自己去进行协调。</p><p><strong>当一个程序要访问临界资源时，可以先向系统中的其他程序发送一条请求消息，在收到所有程序的同意消息后，才可以访问临界资源</strong>。这个请求消息需要包括请求的资源 ID、请求者 ID 和请求时间。</p><p>若一个程序收到了多了请求，也需要使用一个队列将其保存起来：</p><ul><li>若该程序自身没有使用该临界资源，则按时间先后依次发出同意的消息；</li><li>若该程序自身使用了该临界资源，则使用完成后再依次发出同意的消息。</li></ul><p>这样就保证了先请求的程序先得到临界资源的使用权限。</p><p><strong>这种内部自协调的方式，就是一种民主协商的过程，在分布式领域中称为分布式算法</strong>。</p><p>我们来看看分布式算法完成一次请求需要多少次消息交互：</p><ul><li>向其他 n - 1 个程序发出访问请求，需要 n - 1 次消息交互；</li><li>收到其他 n - 1 个程序的同意回复后，才能访问资源，也需要 n - 1 次消息的交互。</li></ul><p>所以完成一次请求需要进行 2*(n-1) 次消息交互，<strong>如果在大型分布式系统中，消息的交互次数便会随着程序的增加而呈指数级增长，将会导致高昂的通信成本</strong>。</p><p>而且虽然分布式算法也很简单、易于实现，但其实算法的 <strong>可用性很低</strong>，因为：</p><ul><li><strong>当系统需要访问临界资源的程序增多时，会产生 “信令风暴”</strong>，即 <strong>程序收到的请求还远远超过了自己的处理能力</strong>，导致自己的业务都无法正常完成；</li><li><strong>一旦某个程序发生故障，其他程序都需要等待它的回复，导致整个系统处于卡死状态</strong>。</li></ul><p>因此，<strong>分布式算法适用于节点数量少且变动不频繁的系统</strong>。因为每个程序均需要进行交互，因此很适合 P2P 结构的系统。比如一些文件共享系统。</p><blockquote><p>P2P（Peer-to-Peer）结构的系统是指<strong>不依赖中心化服务器，所有的节点（也称为对等节点）都可以直接相互通信和协作的分布式系统</strong>。</p></blockquote><p>举个例子，处于同一个局域网内的计算机 1、2、3 中都有同一份文件的备份信息，且它们可以相互通信。这个共享文件，就是临界资源。当计算机 1 想要修改共享的文件时，需要进行如下图的操作：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202306100049639.png" alt="image-20230610004902470" loading="lazy"></p><div class="hint-container tip"><p class="hint-container-title">分布式算法的优化方案：</p><ul><li>可以让同意回复的数量只要满足程序数量的一半时，就允许访问；</li><li>如果检测到节点出现故障，则跳过此节点即可。</li></ul></div><h2 id="_4-轮值-ceo-令牌环算法" tabindex="-1"><a class="header-anchor" href="#_4-轮值-ceo-令牌环算法" aria-hidden="true">#</a> 4. 轮值 CEO：令牌环算法</h2><p>还有一种既不使用协调者，也能大大减少程序间相互通信的算法，就是 <strong>令牌环算法</strong>，非常像华为的轮值 CEO。</p><blockquote><p>华为轮值 CEO 机制，即 CEO 的职位是由多名高管轮流出任。这个临界资源就是 CEO，多名高管就是程序。</p></blockquote><p>这个算法的核心是 <strong>把所有程序构成一个环状结构，然后在环中有一个特殊的令牌在程序之间循环传递。只有收到令牌的程序才能访问临界资源，访问完成后即可传递给下一个程序</strong>。</p><p>这个算法的示意图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202306100056780.png" alt="image-20230610005630896" loading="lazy"></p><p>可以看出，令牌环算法的 <strong>通信效率非常高，而且也很公平</strong>。但 <strong>如果环中需要访问资源的程序很少，那么会带来很多无效通信</strong>，即无效的令牌传递。</p><p>如果出现环中某个程序出现故障的情况（<strong>单点故障问题</strong>），则需要直接将令牌传递给下下个程序，这就需要每个程序都记住环中参与者的信息了。</p><p>所以，令牌环算法非常适合系统中 <strong>每个程序使用临界资源的频率高</strong> 的场景。</p><div class="hint-container tip"><p class="hint-container-title">令牌环算法优化方案：</p><ul><li>可以为每个程序根据使用评率添加轮值权重，每次使用一个加权轮询算法选出下一个参与者，节省不必要的通信（令牌传递）。</li></ul></div><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p>一张图总结三大分布式互斥算法：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202306100109159.png" alt="img" loading="lazy"></p>',50);function h(m,f){const n=p("router-link");return i(),e("div",null,[t("details",c,[u,t("nav",_,[t("ul",null,[t("li",null,[s(n,{to:"#_1-什么是分布式互斥"},{default:o(()=>[r("1. 什么是分布式互斥？")]),_:1})]),t("li",null,[s(n,{to:"#_2-霸道总裁-集中式算法"},{default:o(()=>[r("2. 霸道总裁：集中式算法")]),_:1})]),t("li",null,[s(n,{to:"#_3-民主协商-分布式算法"},{default:o(()=>[r("3. 民主协商：分布式算法")]),_:1})]),t("li",null,[s(n,{to:"#_4-轮值-ceo-令牌环算法"},{default:o(()=>[r("4. 轮值 CEO：令牌环算法")]),_:1})]),t("li",null,[s(n,{to:"#_5-总结"},{default:o(()=>[r("5. 总结")]),_:1})])])])]),d])}const v=l(g,[["render",h],["__file","分布式互斥：一山不容二虎.html.vue"]]);export{v as default};
