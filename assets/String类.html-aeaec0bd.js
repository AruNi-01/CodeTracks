import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,d as s,w as p,b as a,e as u}from"./app-80dc18e4.js";const r={},k={class:"hint-container details"},d=n("summary",null,"本文内容",-1),m={class:"table-of-contents"},v=u(`<h2 id="_1-string-基础" tabindex="-1"><a class="header-anchor" href="#_1-string-基础" aria-hidden="true">#</a> 1. String 基础</h2><p>String 类表示字符串。Java 程序中的所有字符串字面值，例如 &quot;abc&quot;，都被实现为该类的实例，因此字符串属于对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span><span class="token punctuation">,</span>
               <span class="token class-name">Constable</span><span class="token punctuation">,</span> <span class="token class-name">ConstantDesc</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看见，String 实现了如下类：</p><ul><li><code>java.io.Serializable</code>：可以被序列化；</li><li><code>Comparable&lt;String&gt;</code>：支持作比较；</li><li><code>CharSequence</code>：描述字符串结构的接口，String、StringBuilder、StringBuffer 都实现了这个类；</li></ul><h3 id="_1-1-创建字符串的两种方式" tabindex="-1"><a class="header-anchor" href="#_1-1-创建字符串的两种方式" aria-hidden="true">#</a> 1.1 创建字符串的两种方式</h3><p>有两种方式可以创建字符串，分别是直接通过 <code>&quot;xxx&quot;</code> 和 通过 <code>new String()</code>，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方式是有区别的，因为字符串在 <strong>方法区中</strong>（JDK 1.6）有一个属于自己的 <strong>字符串常量池</strong>，是 JVM 为 String 开辟的一块内存缓冲区，好处如下：</p><ul><li><strong>提高性能 (直接从常量池取字符串)</strong>；</li><li><strong>减少内存开销 (避免重复创建字符串)</strong>。</li></ul><blockquote><p><strong>以下内容都基于 JDK 1.6 的方法区来讲，后面会详细讲解 JDK 1.8 后的情况</strong>。</p></blockquote><p>当创建 String 对象时，<strong>JVM 会先检查字符串常量池</strong>：</p><ul><li>若这个字符串的常量值已经存在在池中，就直接返回池中对象的引用；</li><li>若不在池中，就会实例化一个字符串并放入池中。</li></ul><p>如果使用 <code>String s = &quot;hello&quot;</code>，那么 <strong>只会在字符串常量池中创建一个 &quot;hello&quot; 对象</strong>；</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190122353.png" alt="image-20221219012225042" loading="lazy"></p><p>如果使用 <code>String s = new String(&quot;hello&quot;)</code>，那么 <strong>除了会先在字符串常量池中创建一个 &quot;hello&quot; 对象外，还会为 <code>new String()</code> 在堆中创建一个 String 对象的实例</strong>。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190132952.png" alt="image-20221219013221404" loading="lazy"></p><p>所以，<code>String s = new String(&quot;hello&quot;)</code> 这句话会 <strong>创建一个或者两个对象</strong>，取决于字符串常量池中是否含有 &quot;hello&quot;。</p><h3 id="_1-2-string-常用方法" tabindex="-1"><a class="header-anchor" href="#_1-2-string-常用方法" aria-hidden="true">#</a> 1.2 String 常用方法</h3><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212181944579.png" alt="image-20221218152907259" loading="lazy"></p><h2 id="_2-string-的不可变性" tabindex="-1"><a class="header-anchor" href="#_2-string-的不可变性" aria-hidden="true">#</a> 2. String 的不可变性</h2><h3 id="_2-1-什么是不可变" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是不可变" aria-hidden="true">#</a> 2.1 什么是不可变？</h3><p>String 不可变很简单，给定一个字符串 <code>String s = new String(&quot;hi&quot;)</code>，在将这个字符串 s 替换为 &quot;hello&quot;，这个操作 <strong>不是在原内存地址上替换数据，而是将替换后的字符串重新指向一个新对象、新地址</strong>。</p><p>如下图（未画字符串常量池）：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190121739.png" alt="image-20221219012154649" loading="lazy"></p><p>示例：</p><p><code>System.identityHashCode(Object o)</code> 方法返回对象的哈希码，<strong>不管是否重写了 <code>hashCode()</code> 方法</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 295530567</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 2003749087</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，<code>s.replace(&quot;hi&quot;, &quot;hello&quot;)</code> 后，s 的哈希码改变了，说明 s 指向的地址改变了。</p><p>其实，任何会改变 String 的方法都会新创建一个 String 变量，将改变后的 String 赋值给这个变量返回，而 <strong>不会在原地修改</strong>。</p><p>下面再使用可变类型的 <code>StringBuilder</code> 来测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 1324119927</span>
        sb <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 1324119927</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，sb 对象拼接上一个字符串后，还是指向它原来的地址。</p><h3 id="_2-2-探索-string-不可变的真正原因" tabindex="-1"><a class="header-anchor" href="#_2-2-探索-string-不可变的真正原因" aria-hidden="true">#</a> 2.2 探索 String 不可变的真正原因</h3><p>首先来看看 <code>final</code> 的作用：</p><ul><li>被 <code>final</code> 关键字修饰的 <strong>类不能被继承</strong>，修饰的 <strong>方法不能被重写</strong>；</li><li>修饰 <strong>变量</strong> 分两种情况（重要）： <ul><li>基本类型：值不能改变；</li><li>引用类型：不能再指向其他对象；</li></ul></li></ul><p>接下来直接翻开 JDK 源码，<code>java.lang.String</code> 类起手前三行是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span><span class="token punctuation">,</span>
               <span class="token class-name">Constable</span><span class="token punctuation">,</span> <span class="token class-name">ConstantDesc</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Stable</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>
    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码中可以得知一下信息：</p><ul><li>String 类用 <code>final</code> 修饰，说明 String 类 <strong>不可继承</strong>；</li><li>String 类的主力成员字段 <code>value</code> 是一个 <code>byte[]</code> 数组（JDK 9 之前是 <code>char[]</code>），也是用 <code>final</code> 修饰，被 final 修饰的字段创建后就 <strong>不可改变</strong>。注意 <strong>数组是引用类型</strong>，说明 <code>value</code> <strong>只是不能再指向其他对象</strong>； <ul><li>注意：是这个 <code>byte[]</code> 类型的 <strong>变量 <code>value</code> 不可改变</strong>，并不是这个数组不可变。也就是说只是 <code>value</code> <strong>变量引用的地址不可改变</strong>，而 <strong>数组本身是可变的</strong>；</li></ul></li><li><strong><code>value</code> 变量</strong> 只是 <strong>stack 上的一个引用</strong>，<strong>数组的本体结构在 heap 中</strong>。String 类里的 <code>value</code> 用 <code>final</code> 修饰，只是说 stack 里的这个叫 <code>value</code> 所引用的地址不可变，没有说 heap 中数组本身中的数据不可变；</li></ul><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212181944715.png" alt="image-20221218183323883" loading="lazy"></p><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> another <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
value <span class="token operator">=</span> another<span class="token punctuation">;</span>  	<span class="token comment">// 编译报错：不能给 final 变量value 赋值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为把 value 重新指向了 another 指向的地址，而 value 用 final 修饰，所以自然是不允许的。</p><p>但是如果直接对数组本身进行修改，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
value<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>	<span class="token comment">// 允许直接对数组本身进行修改</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// [1, 2, 10]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，并不是因为 <code>final</code> 修饰了 String 和 value 就是不可变的了，主要是编写这个类的程序员 <strong>把 String 封装得很好</strong>，具体体现如下：</p><ul><li>String 被 <code>final</code> 修饰，不能被继承，这 <strong>避免了其他人继承后破坏</strong>；</li><li><code>byte[] value</code> 被 <code>private</code>修饰，<strong>只能在本类中对 value 进行操作</strong>；</li><li>String 类中 <strong>没有提供任何能修改 <code>byte[]</code> 数组数据的方法</strong>；</li></ul><p>所以 <strong>String 不可变的关键都在底层的实现，而不是单单一个final</strong>。</p><h3 id="_2-3-string-为什么要设计成不可变" tabindex="-1"><a class="header-anchor" href="#_2-3-string-为什么要设计成不可变" aria-hidden="true">#</a> 2.3 String 为什么要设计成不可变？</h3><p>最简单地原因，就是为了 <strong>安全</strong>。</p><p>例如，我们要在某个函数中对字符串进行修改，然后返回新的字符串，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> origin <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 不可变的 String 做参数</span>
        <span class="token class-name">String</span> updatedStr <span class="token operator">=</span> <span class="token function">updateStr</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;origin String: aaa -&gt;&quot;</span> <span class="token operator">+</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">StringBuilder</span> originSb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 可变的 StringBuilder 做参数</span>
        <span class="token class-name">StringBuilder</span> updatedSb <span class="token operator">=</span> <span class="token function">updateSb</span><span class="token punctuation">(</span>originSb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;origin StringBuilder: aaa -&gt;&quot;</span> <span class="token operator">+</span> originSb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 不可变的 String</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">updateStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> newStr <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">;</span>     <span class="token comment">// +: 底层使用 StringBuilder 拼接，返回一个新对象</span>
        <span class="token keyword">return</span> newStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 可变的 StringBuilder</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> <span class="token function">updateSb</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> newSb <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newSb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 
输出：
origin String: aaa -&gt;aaa
origin StringBuilder: aaa -&gt;aaabbb
/*
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现：若使用可变的 StringBuilder 做参数，因为 <strong>Java 是值传递，引用类型传递的是地址</strong>，所以把我们原来的 <code>originSb</code> 的地址传过去，然后进行改变了，但是我们 <strong>本意是不想改变它的</strong>，只是想把它作为参数进行修改，然后返回一个新的修改后的字符串给我们。</p><p>而不可变的 String 做参数的时候，就不会修改掉我们原来的 <code>origin</code> 字符串。</p><p>再看下面这个 HashSet 用 StringBuilder 做元素的场景，问题就更严重了，而且更隐蔽。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;aaabbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [aaabbb, aaa]</span>

        <span class="token class-name">StringBuilder</span> sb3 <span class="token operator">=</span> sb1<span class="token punctuation">;</span>	<span class="token comment">// 把 sb3 也指向 sb1 的地址</span>
        sb3<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 修改 sb3，其实也修改了 sb1，因为它们指向相同的地址</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [aaabbb, aaabbb]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>StringBuilder 型变量 sb1 和 sb2 分别指向了堆内的字面量 &quot;aaa&quot; 和 &quot;aaabbb&quot;。把他们都插入一个HashSet，到这一步没问题。但如果后面不小心 <strong>把变量 sb3 也指向 sb1 的地址</strong>，再改变 sb3 的值，因为StringBuilder 没有不可变性的保护，<strong>sb3 直接在原先 &quot;aaa&quot; 的地址上改，导致 sb1 的值也变了</strong>。这时候，<strong>HashSet 上就出现了两个相等的键值 &quot;aaabbb”</strong>。破坏了 HashSet 键值的唯一性。所以千万不要用可变类型做 HashMap 和 HashSet 键值。</p><p>还有一个原因是 <strong>String 会保存在字符串常量池中</strong>，这样在大量使用字符串的情况下，可以 <strong>节省内存空间和提高效率</strong>。但之所以能实现这个特性，String 的不可变性是最基本的一个必要条件。要是 <strong>内存里字符串内容能改来改去，这么做就完全没有意义了</strong>。</p><p>此外，String 类中还有一个 <code>hash</code> 变量，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token comment">// ......</span>

    <span class="token doc-comment comment">/** Cache the hash code for the string */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">// Default to 0</span>
    
    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码种的注释就能知道，该变量是 <strong>给 String 类型变量的 hashcode 值做缓存</strong>，这样下次需要获取该 String 变量的 hashcode 值时，就不用再通过哈希运算了。</p><p>顺便提一下，像基本数据类型的包装类也是使用 <code>final</code> 修饰的，而且保存值的变量 value 也是使用 <code>final</code> 修饰，所以也是不可变类。因为 Java 也为包装类型提供了缓存，例如 Integer 的缓存范围在 -128 至 127 之间，因为这个范围的数字是经常使用的。</p><blockquote><p>不过需要注意的是，该缓存只适用于自动装箱时使用，当用构造函数时，不会使用缓存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true（i2 直接指向缓存的数据）</span>

<span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// false（超过了缓存范围）</span>

<span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// false（只有自动装箱时才会用到缓存）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="_3-string-常见问题" tabindex="-1"><a class="header-anchor" href="#_3-string-常见问题" aria-hidden="true">#</a> 3. String 常见问题</h2><h3 id="_3-1-string、stringbuffer、stringbuilder-的区别" tabindex="-1"><a class="header-anchor" href="#_3-1-string、stringbuffer、stringbuilder-的区别" aria-hidden="true">#</a> 3.1 String、StringBuffer、StringBuilder 的区别</h3><p>从可变性来说：</p><ul><li><p><code>String</code> 是不可变的，它被 <code>final</code> 和 <code>private</code> 修饰；</p></li><li><p><code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用 byte 数组保存字符串，不过没有使用 <code>final</code> 和 <code>private</code> 关键字修饰，最关键的是这个 <strong><code>AbstractStringBuilder</code> 类还提供了很多修改字符串的方法</strong> 比如 <code>append</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> value<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> len<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  	<span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>从线程安全性来说：</p><ul><li><code>String</code> 中的对象是不可变的，也就可以理解为常量，线程安全。</li><li><code>AbstractStringBuilder</code> 是 <code>StringBuilder</code> 与 <code>StringBuffer</code> 的公共父类，定义了一些字符串的基本操作，如 <code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code> 等公共方法。 <ul><li><code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。</li><li><code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</li></ul></li></ul><p>从使用性能来说：</p><ul><li>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。在修改较多的场景性能不太好。</li><li><code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是生成新的对象并改变对象引用。</li><li>相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</li></ul><p>对于三者的使用总结：</p><ol><li>操作少量的数据适用 <code>String</code>；</li><li>单线程操作字符串缓冲区下操作大量数据适用 <code>StringBuilder</code>；</li><li>多线程操作字符串缓冲区下操作大量数据适用 <code>StringBuffer</code>；</li></ol><h3 id="_3-2-字符串拼接用-还是-stringbuilder" tabindex="-1"><a class="header-anchor" href="#_3-2-字符串拼接用-还是-stringbuilder" aria-hidden="true">#</a> 3.2 字符串拼接用 &quot;+&quot; 还是 StringBuilder？</h3><p>Java 语言本身并不支持运算符重载，“+” 和 “+=” 是专门为 String 类重载过的运算符，也是 Java 中仅有的两个重载过的运算符。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;he&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;llo&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> str3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码对应的字节码如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202210192318334.png" alt="img" loading="lazy"></p><p>可以看出，字符串变量通过 “+” 的字符串拼接方式，实际上是 <strong>通过 <code>StringBuilder</code> 调用 <code>append()</code> 方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个新的 <code>String</code> 对象</strong>。</p><p><strong>注意</strong>：在循环内使用 “+” 进行字符串的拼接的话，存在比较明显的缺陷：<strong>编译器不会创建单个 <code>StringBuilder</code> 以复用，会导致创建过多的 <code>StringBuilder</code> 对象</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;he&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;llo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>StringBuilder</code> 对象是在循环内部被创建的，这意味着 <strong>每循环一次就会创建一个 <code>StringBuilder</code> 对象</strong>，所以效率是很低的。</p><p>如果直接使用 <code>StringBuilder</code> 对象进行字符串拼接的话，就不会存在这个问题了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;he&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;llo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202210192319453.png" alt="img" loading="lazy"></p><h3 id="_3-3-string-类型的变量和常量做-运算时发生了什么" tabindex="-1"><a class="header-anchor" href="#_3-3-string-类型的变量和常量做-运算时发生了什么" aria-hidden="true">#</a> 3.3 String 类型的变量和常量做 &quot;+&quot; 运算时发生了什么？</h3><p>先来看字符串不加 <code>final</code> 关键字拼接的情况（JDK1.8）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span>	<span class="token comment">// 常量做 +</span>
<span class="token class-name">String</span> str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>		<span class="token comment">// 变量做 +</span>
<span class="token class-name">String</span> str5 <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//false</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <strong>编译期可以确定值的字符串</strong>，也就是 <strong>常量字符串</strong> ，JVM 会将其 <strong>存入字符串常量池</strong>。并且，字符串常量 <strong>拼接得到的字符串常量在编译阶段就已经被存放字符串常量池</strong>，这个得益于编译器的优化。</p><p>对于 <code>String str3 = &quot;str&quot; + &quot;ing&quot;;</code> 编译器会优化成 <code>String str3 = &quot;string&quot;;</code> 。</p><p>而字符串类型的变量通过 “+” 的字符串拼接方式，实际上是 <strong>通过 <code>StringBuilder</code> 调用 <code>append()</code> 方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个新的 <code>String</code> 对象</strong>。</p><p>不过，<strong>字符串使用 <code>final</code> 关键字声明之后，可以让编译器当做常量来处理</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 下面两个表达式其实是等价的</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;ing&quot;</span><span class="token punctuation">;</span>	<span class="token comment">// 常量池中的对象</span>
<span class="token class-name">String</span> d <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span> 	<span class="token comment">// 常量池中的对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被 <code>final</code> 关键字修改之后的 <code>String</code> 会被编译器当做常量来处理，编译器在程序编译期就可以确定它的值，其效果就相当于访问常量。</p><h3 id="_3-4-jdk-9-为什么要把-char-改为-byte" tabindex="-1"><a class="header-anchor" href="#_3-4-jdk-9-为什么要把-char-改为-byte" aria-hidden="true">#</a> 3.4 JDK 9 为什么要把 char[] 改为 byte[]？</h3><p>在 Java 9 之后，String 、StringBuilder 与 StringBuffer 的实现改用 byte 数组存储字符串。</p><p>新版的 String 其实支持两个编码方案： Latin-1 和 UTF-16。</p><p>如果字符串中包含的字符没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。</p><p><strong>Latin-1 编码方案下，byte 占 1 个字节，char 占用 2 个字节，byte 相较 char 节省一半的内存空间</strong>。</p><p>如果字符串中包含的字符超过 Latin-1 可表示范围内的字符，byte 和 char 所占用的空间是一样的。</p><h2 id="_4-jdk-8-方法区的更变" tabindex="-1"><a class="header-anchor" href="#_4-jdk-8-方法区的更变" aria-hidden="true">#</a> 4. JDK 8 方法区的更变</h2><h3 id="_4-1-永久代与元空间" tabindex="-1"><a class="header-anchor" href="#_4-1-永久代与元空间" aria-hidden="true">#</a> 4.1 永久代与元空间</h3><p>在 JDK 1.6 的 HotSpot 中，把方法区称为 <strong>永久代</strong>，本质上两者并不等价，仅仅是因为 HotSpot 虚拟机的设计团队选择把 GC 分代收集至方法区，或者说用永久代来实现方法区而已。这样 HotSpot 的垃圾收集器可以像管理 Java 堆一样管理这部分内存，能省去专门为方法区编写内存管理代码的工作。</p><p>JDK 8 开始，使用 <strong>元空间</strong> 取代了永久代。元空间本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：<strong>元空间并不在虚拟机中，而是使用本地内存</strong>。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212182336457.png" alt="image-20221218233629283" loading="lazy"></p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212182337795.png" alt="image-20221218233701610" loading="lazy"></p><h3 id="_4-2-字符串延迟加载" tabindex="-1"><a class="header-anchor" href="#_4-2-字符串延迟加载" aria-hidden="true">#</a> 4.2 字符串延迟加载</h3><p>字符串对象的创建都是 <strong>懒惰的</strong>，<strong>执行到的时候才会加载</strong>，不是一次性加载完。</p><p>只有当运行到那一行字符串且在串池中不存在的时候时，该字符串才会被创建并放入串池中。</p><p>利用 IDEA 中的 Memory（查看运行时类对象个数）验证：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// java.lang.String     2093</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// java.lang.String     2094</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// java.lang.String     2103</span>

    <span class="token comment">// 以下的字符串与上面重复，直接从字符串池中获取，String对象的数量不会增加</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// java.lang.String     2103</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// java.lang.String     2103</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-intern-方法" tabindex="-1"><a class="header-anchor" href="#_4-3-intern-方法" aria-hidden="true">#</a> 4.3 intern() 方法</h3><p>字符串常量池主要用于存储在 <strong>编译期</strong> 生成的字符串对象，而如果 <strong>想要在运行期将字符串对象加入到串池中，则可以使用 <code>intern()</code> 方法</strong>。</p><p>调用字符串对象的 <code>intern()</code> 方法，<strong>主动</strong> 将字符串对象放入到串池中：</p><ul><li>JDK1.8：将这个字符串对象尝试放入串池，<strong>如果有则并不会放入</strong>，如果没有则将该字符串放入串池， <strong>最后把串池中的对象的引用返回</strong>；</li><li>JDK1.6：将这个字符串对象尝试放入串池，<strong>如果有则并不会放入</strong>，如果没有会把 <strong>此对象复制一份</strong>， <strong>将复制的新对象放入串池</strong>， 原来的对象还是在堆中，<strong>最后把串池中的对象返回</strong>；</li></ul><p>可以发现在 JDK 1.8 和 JDK 1.6 中，无论字符串放入串池是否成功，<strong>最后都会返回串池中的对象</strong>。</p><p>下面分别在 JDK 1.8 和 JDK 1.6 环境中来举例子，彻底搞懂 <code>intern()</code> 方法。</p><h4 id="jdk-1-8-环境" tabindex="-1"><a class="header-anchor" href="#jdk-1-8-环境" aria-hidden="true">#</a> <strong>JDK 1.8 环境</strong></h4><p>在 JDK 1.8 环境下：</p><ul><li>如果调用 <code>intern()</code> 方法成功，<strong>堆内存与串池中的字符串对象是同一个对象</strong>，毕竟串池也在堆内存中；</li><li>如果失败，则 <strong>不是同一个对象</strong>。</li></ul><p>示例 1：</p><p><strong>注意</strong>：<code>&quot;a&quot; + &quot;b&quot;</code> 会在编译时优化 ，而 <code>new String(&quot;a&quot;) + new String(&quot;b&quot;);</code> 不会，它相等于使用 StringBuilder 的 <code>append()</code> 方法拼接，然后再返回一个新字符串对象 &quot;ab&quot;。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// &quot;a&quot;和&quot;b&quot; 被放入串池中，str 则存在于堆内存之中</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 此时串池中没有 &quot;ab&quot; ，则会将该字符串对象放入到串池中，此时堆内存与串池中的 &quot;ab&quot; 是同一个对象</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 给 str3 赋值，因为此时串池中已有 &quot;ab&quot; ，则直接将串池中的内容返回</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 堆内存与串池中的 &quot;ab&quot; 是同一个对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>intern()</code> 前：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190134774.png" alt="image-20221219004913144" loading="lazy"></p><p>调用 <code>intern()</code> 后：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190135933.png" alt="image-20221219004824083" loading="lazy"></p><p>示例 2，将 str3 放在前面：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处创建字符串对象 &quot;ab&quot; ，因为串池中还没有 &quot;ab&quot; ，所以将其放入串池中</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
        
        <span class="token comment">// &quot;a&quot; 和 &quot;b&quot; 被放入串池中，str 则存在于堆内存之中</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 此时&quot;ab&quot; 已存在与串池中，所以放入失败，str 还是堆中的&quot;ab&quot;，但是会返回串池中的 &quot;ab&quot; </span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// false，堆中的str没有放入串池中，而str2是从串池的返回的</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>	 <span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>intern()</code> 前：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190135103.png" alt="image-20221219005445197" loading="lazy"></p><p>调用 <code>intern()</code> 后：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190135312.png" alt="image-20221219005635419" loading="lazy"></p><h4 id="jdk-1-6-环境" tabindex="-1"><a class="header-anchor" href="#jdk-1-6-环境" aria-hidden="true">#</a> <strong>JDK 1.6 环境</strong></h4><p>在 JDK 1.6 环境下，此时无论调用 <code>intern()</code> 方法成功与否，串池中的字符串对象和堆内存中的字符串对象 <strong>都不是同一个对象</strong>，因为串池在方法区，不在堆区内。</p><p>示例 1，和 JDK1.8 情况 <strong>不同</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// &quot;a&quot;和&quot;b&quot; 被放入串池中，str 则存在于堆内存之中</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 此时串池中没有 &quot;ab&quot; ，JDK1.6 则会将该字符串复制一份，将复制的新对象放入到串池中，</span>
        <span class="token comment">// str 本身还只是在堆中，最后也会返回串池中的 &quot;ab&quot; 对象，所以 str2 在串池中</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 给 str3 赋值，因为此时串池中已有 &quot;ab&quot; ，则直接将串池中的内容返回</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
        
        <span class="token comment">// str 不在串池中</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> st2<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// flase</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>intern()</code> 前：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190135990.png" alt="image-20221219005744474" loading="lazy"></p><p>调用 <code>intern()</code> 后：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190135257.png" alt="image-20221219005935429" loading="lazy"></p><p>示例 2，将 str3 放在前面，和 JDK1.8 情况相同：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处创建字符串对象 &quot;ab&quot; ，因为串池中还没有 &quot;ab&quot; ，所以将其放入串池中</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
        
        <span class="token comment">// &quot;a&quot; 和 &quot;b&quot; 被放入串池中，str 则存在于堆内存之中</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 此时 &quot;ab&quot; 已存在与串池中，所以放入失败，str 还是堆中的&quot;ab&quot;，但是会返回串池中的 &quot;ab&quot; </span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// false，堆中的 str 没有放入串池中，而 str2 是从串池的返回的</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>	 <span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>intern()</code> 前：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190135503.png" alt="image-20221219010038781" loading="lazy"></p><p>调用 <code>intern()</code> 后：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202212190135770.png" alt="image-20221219010152676" loading="lazy"></p><h4 id="intern-使用场景" tabindex="-1"><a class="header-anchor" href="#intern-使用场景" aria-hidden="true">#</a> <strong>intern() 使用场景</strong></h4><p>我们就使用 JDK 1.8 来讲解了，<code>intern()</code> 有两个作用：</p><ul><li>将字符串对象放入串池（若没有）；</li><li>返回对象在串池中的引用。</li></ul><p>我们知道，在编译期就能确定的字符串，则会添加进串池中，但是如果需要在运行期添加，则需要使用 <code>intern()</code>。所以就意味着不能乱使用该方法。</p><p>例如，像 <code>String s = new String(&quot;hello&quot;).intern();</code> 这样使用该方法时，其实 <code>intern()</code> 是多余的，因为在编译期字符串 <code>hello</code> 就已经确定好了，因此会被加入到串池中，无需 <code>intern()</code> 方法将其放入。</p><p>再比如，像 <code>String s = &quot;hello&quot; + &quot;world&quot;;</code>，由于编译期的优化，会将此优化为字符串 <code>helloworld</code>，所以串池中只会存在 <code>helloworld</code>，而不存在 <code>hello</code> 和 <code>world</code>。</p><p>再比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时就不存在优化了，<code>hello</code> 和 <code>world</code> 存在串池中，而 <code>helloworld</code> 不存在。所以在有需要时得使用 <code>intern()</code> 方法将其放入串池。</li></ul><p>通过上面的例子，可以得出 <code>intern()</code> 的使用场景主要是 <strong>得到的字符串在编译期间无法确定，而是在运行期间才能确定的，则需要使用 <code>intern()</code> 方法将其放入串池中</strong>。</p><p>比如下面的例子，我们需要创建 MAX 个字符串，存入 arr 数组中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token constant">MAX</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">DB_DATA</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">DB_DATA</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">DB_DATA</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//arr[i] = new String(String.valueOf(DB_DATA[i % DB_DATA.length]));</span>
         arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token constant">DB_DATA</span><span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token constant">DB_DATA</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用一个长度为 10 的数组 DB_DATA 来为字符串数组 arr 填充数据，所以其实不同的字符串就 10 个，但是字符串数组长度有 10000000：</p><ul><li>不使用 <code>intern()</code> 时，由于这些字符串都是 <strong>在运行时才能确定的</strong>，所以会生成 1000w 个字符串；</li><li>使用 <code>intern()</code> 后，前 10 此循环就会把这十个字符串都放入串池，后续的字符串都是直接引用串池中的即可，因此就生成了 10 个字符串。</li></ul><p>因此，<strong>使用 <code>intern()</code> 节约了非常大的空间</strong>，不过消耗的时间也会稍微长一点，因为每次都是用了 <code>new String</code> 后，然后又进行 <code>intern()</code> 操作的消耗时间。但是相比于节约出来的大量空间，这点耗时也是不亏的。</p><h2 id="_5-参考文章" tabindex="-1"><a class="header-anchor" href="#_5-参考文章" aria-hidden="true">#</a> 5. 参考文章</h2>`,164),g={href:"https://javaguide.cn/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html",target:"_blank",rel:"noopener noreferrer"};function S(h,q){const t=o("router-link"),e=o("ExternalLinkIcon");return l(),i("div",null,[n("details",k,[d,n("nav",m,[n("ul",null,[n("li",null,[s(t,{to:"#_1-string-基础"},{default:p(()=>[a("1. String 基础")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1-1-创建字符串的两种方式"},{default:p(()=>[a("1.1 创建字符串的两种方式")]),_:1})]),n("li",null,[s(t,{to:"#_1-2-string-常用方法"},{default:p(()=>[a("1.2 String 常用方法")]),_:1})])])]),n("li",null,[s(t,{to:"#_2-string-的不可变性"},{default:p(()=>[a("2. String 的不可变性")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_2-1-什么是不可变"},{default:p(()=>[a("2.1 什么是不可变？")]),_:1})]),n("li",null,[s(t,{to:"#_2-2-探索-string-不可变的真正原因"},{default:p(()=>[a("2.2 探索 String 不可变的真正原因")]),_:1})]),n("li",null,[s(t,{to:"#_2-3-string-为什么要设计成不可变"},{default:p(()=>[a("2.3 String 为什么要设计成不可变？")]),_:1})])])]),n("li",null,[s(t,{to:"#_3-string-常见问题"},{default:p(()=>[a("3. String 常见问题")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_3-1-string、stringbuffer、stringbuilder-的区别"},{default:p(()=>[a("3.1 String、StringBuffer、StringBuilder 的区别")]),_:1})]),n("li",null,[s(t,{to:"#_3-2-字符串拼接用-还是-stringbuilder"},{default:p(()=>[a('3.2 字符串拼接用 "+" 还是 StringBuilder？')]),_:1})]),n("li",null,[s(t,{to:"#_3-3-string-类型的变量和常量做-运算时发生了什么"},{default:p(()=>[a('3.3 String 类型的变量和常量做 "+" 运算时发生了什么？')]),_:1})]),n("li",null,[s(t,{to:"#_3-4-jdk-9-为什么要把-char-改为-byte"},{default:p(()=>[a("3.4 JDK 9 为什么要把 char[] 改为 byte[]？")]),_:1})])])]),n("li",null,[s(t,{to:"#_4-jdk-8-方法区的更变"},{default:p(()=>[a("4. JDK 8 方法区的更变")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_4-1-永久代与元空间"},{default:p(()=>[a("4.1 永久代与元空间")]),_:1})]),n("li",null,[s(t,{to:"#_4-2-字符串延迟加载"},{default:p(()=>[a("4.2 字符串延迟加载")]),_:1})]),n("li",null,[s(t,{to:"#_4-3-intern-方法"},{default:p(()=>[a("4.3 intern() 方法")]),_:1})])])]),n("li",null,[s(t,{to:"#_5-参考文章"},{default:p(()=>[a("5. 参考文章")]),_:1})])])])]),v,n("ul",null,[n("li",null,[n("a",g,[a("Java Guide"),s(e)])]),n("li",null,[n("a",b,[a("深入解析String#intern"),s(e)])])])])}const w=c(r,[["render",S],["__file","String类.html.vue"]]);export{w as default};
