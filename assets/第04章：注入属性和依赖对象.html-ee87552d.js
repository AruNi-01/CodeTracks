import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as n,e as a,w as e,a as l,d as t}from"./app-722072e3.js";const u={},r={class:"hint-container details"},d=n("summary",null,"本文内容",-1),k={class:"table-of-contents"},v=l(`<h2 id="_1-设计" tabindex="-1"><a class="header-anchor" href="#_1-设计" aria-hidden="true">#</a> 1. 设计</h2><p>在上一章的设计中，按照是否带有参数的构造函数实现了不同的类实例化策略。但是并 <strong>没有考虑类中是否有属性</strong>，如果类包含属性，那么 <strong>在实例化时就需要填充属性信息</strong>，这样创建的对象才是完整的。</p><p>举个例子，如果在 UserService 类中使用到了 userDao（<code>private UserDao userDao</code>)，那么 <strong>在实例化 UserService 时，也需要将 UserDao 实例化，得到 userDao 对象（依赖对象），将其注入进 UserService 类，填充为 UserService 类的属性</strong>。</p><p>创建对象过程所需填充的属性不只有 int、long、double 等基本数据类型，还包括可能 <strong>没有被实例化的对象属性</strong>，这些都需要 <strong>在创建 Bean 对象的时候填充</strong>。</p><blockquote><p>这里暂时不考虑循环依赖问题，后续会有专门的章节解决循环依赖。</p></blockquote><p>由于 <strong>属性填充</strong> 是在使用 <code>newInstance()</code> 或者 Cglib <strong>创建 Bean 对象后开始执行的</strong>，所以可以在 AbstractAutowireCapableBeanFactory 类的 <strong><code>createBean()</code> 方法中添加属性填充的操作 applyPropertyValues()</strong>，如下图所示：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303132208972.png" alt="img" loading="lazy"></p><ul><li>需要在 bean 定义 BeanDefinition 类中，添加 PropertyValues 信息，方便将属性注入到 BeanDefinition；</li><li>填充的属性信息还包括了 Bean 的 <strong>对象类型</strong>，也就是需要再定义一个 BeanReference 引用对象（只用于存储对象类型的 Bean 依赖），<strong>在具体实例化时如果遇到对象类型则进行递归创建和填充</strong>。</li></ul><h2 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h2><p>实现属性注入还需要新增加3个类：<code>BeanReference</code>(类引用)、<code>PropertyValue</code>(属性值)、<code>PropertyValues</code>(属性集合)，分别用于对象类型和基本类型的属性填充。</p><p>另外，需要改动的类主要是 <code>AbstractAutowireCapableBeanFactory</code>，在 <code>createBean()</code> 方法中添加属性填充部分，这里主要是新增一个属性填充方法 <code>applyPropertyValues()</code>。</p><p>目录结构更新如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303140836069.png" alt="image-20230314083645015" loading="lazy"></p><p>类图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303140923552.png" alt="" loading="lazy"></p><ul><li>新增 PropertyValue 类，保存属性的名称和值；</li><li>新增 PropertyValues 类，保存 PropertyValue 集合；</li><li>新增 BeanReference 类，如果是对象类型，则需要使用该类包装后再存入 PropertyValue；</li><li>在 bean 定义 BeanDefinition 类中，添加 propertyValues 属性集合，方便将属性注入到 BeanDefinition；</li><li>在 AbstractAutowireCapableBeanFactory 类中，<strong>新增 <code>applyPeopertyValues()</code> 方法，在实例化 Bean 后，给 Bean 填充其依赖的属性</strong>。即从 BeanDefinition 中获取 propertyValues，然后遍历每个 propertyValue，如果是基本数据类型则直接填充，如果是对象类型（BeanReference 类型）则先调用 <code>getBean()</code> 实例化该对象后再进行填充（遇到传递依赖则会递归实例化对象后再填充）</li></ul><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><p>新增一个 UserDao 类，模拟查询数据库：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 模拟数据库中的数据</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10002&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;猪八戒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10003&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沙悟净&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UserService 类，依赖了 UserDao 类，需要先注入 userDao 对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> uId<span class="token punctuation">;</span>

    <span class="token comment">// 依赖 UserDao</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户信息：&quot;</span> <span class="token operator">+</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserName</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// setter/getter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 初始化 BeanFactory</span>
    <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. UserDao 注入 bean 容器</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;userDao&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 为 UserService 设置依赖的属性 [uId, userDao]，其中 userDao 又是一个 bean 对象</span>
    <span class="token class-name">PropertyValues</span> propertyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyValues<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;uId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyValues<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;userDao&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanReference</span><span class="token punctuation">(</span><span class="token string">&quot;userDao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. UserService 注入 bean 容器，将它依赖的属性进行填充</span>
    <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> propertyValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. UserService 获取 bean</span>
    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>查询用户信息：孙悟空

Process finished with exit code 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从测试结果来看，属性填充已经起作用了，因为只有属性填充后，才能调用到 UserDao 的方法 <code>userDao.queryUserName(uId)</code>。</p><h2 id="_4-流程" tabindex="-1"><a class="header-anchor" href="#_4-流程" aria-hidden="true">#</a> 4. 流程</h2><p>调用流程如下所示：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303140937415.png" alt="" loading="lazy"></p>`,29);function m(b,g){const s=o("router-link");return c(),i("div",null,[n("details",r,[d,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#_1-设计"},{default:e(()=>[t("1. 设计")]),_:1})]),n("li",null,[a(s,{to:"#_2-实现"},{default:e(()=>[t("2. 实现")]),_:1})]),n("li",null,[a(s,{to:"#_3-测试"},{default:e(()=>[t("3. 测试")]),_:1})]),n("li",null,[a(s,{to:"#_4-流程"},{default:e(()=>[t("4. 流程")]),_:1})])])])]),v])}const _=p(u,[["render",m],["__file","第04章：注入属性和依赖对象.html.vue"]]);export{_ as default};
