import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,a as n,d as s,w as e,e as p,b as t}from"./app-6424c5c1.js";const r={},u={class:"hint-container details"},d=n("summary",null,"本文内容",-1),k={class:"table-of-contents"},m=p(`<h2 id="_1-设计" tabindex="-1"><a class="header-anchor" href="#_1-设计" aria-hidden="true">#</a> 1. 设计</h2><p>在第02章的设计中，虽然扩充了 Bean 容器的功能，将类的实例化交给了容器来处理，但是并 <strong>没有考虑到带有有参构造器的类的实例化</strong>，因此这章我们来进行改造，使其具备获取有参 Bean 的能力。</p><p>具体的，在 BeanFactory 中添加 <code>Object getBean(String name, Object... args)</code> 接口，即可在获取 Bean 的时候把构造函数的入参信息传递进去，从而能实例化有参数的 Bean 对象。</p><p>另外，我们使用两种方式来创建含有构造函数的 Bean 对象，分别是基于 JDK 的方法 <code>DeclaredConstructor()</code> 和基于 Cglib 的 <code>enhancer.create()</code> 方法。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303121546348.png" alt="" loading="lazy"></p><h2 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h2><p>得利于之前的设计，现在我们只需要添加一个 <strong>实例化策略模块</strong>，供实例化对象的时候使用即可。</p><p>目录结构更新如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303140829320.png" alt="image-20230314082905201" loading="lazy"></p><p>类图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303121607263.png" alt="step-04" loading="lazy"></p><ul><li>InstantiationStrategy：实例化策略接口，提供一个实例化方法 <code>instantiate()</code>，入参包括 BeanDefinition、beanName、Class 的构造器、参数；</li><li>提供两个 InstantiationStrategy 的实现类 <code>SimpleInstantiationStrategy</code> 和 <code>CglibSubclassingInstantiationStrategy</code>，分别是基于 JDK 和基于 Cglib 的方式来实例化对象；</li><li>在 AbstractBeanFactory 类中，使用 <strong>重载</strong> 机制，<strong>新增一个带有入参的 <code>getBean()</code> 方法</strong>。由于重载的方法有 2 个，都需要进行获取 Bean，所以抽取一个 <code>doGetBean()</code> 方法做具体的流程，供它们调用；</li><li>在 AbstractAutowireCapableBeanFactory 类中，新增 <code>createBeanInstance()</code> 方法，用于 <strong>具体创建 Bean 实例</strong>： <ol><li>先通过 <code>Class.getDeclaredConstructors()</code> 获取 <strong>该 Class 的所有构造器</strong>；</li><li>遍历所有构造器，将构造器的参数个数和类型与入参的参数做对比，<strong>选出需要的构造器</strong>；</li><li>将 <strong>选出的构造器作为参数传递给实例化策略中的方法</strong>，进行具体的实例化。</li></ol></li></ul><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><p>先给测试 bean 的 UserService 添加一个遍历 <code>String name</code>，提供有参无参构造方法。</p><p>测试方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 初始化 BeanFactory</span>
    <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//beanFactory.setInstantiationStrategy(new SimpleInstantiationStrategy());</span>

    <span class="token comment">// 2. 注册 bean</span>
    <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 带有参数的获取 bean</span>
    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AruNi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 输出：查询用户信息：AruNi</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-流程" tabindex="-1"><a class="header-anchor" href="#_4-流程" aria-hidden="true">#</a> 4. 流程</h2><p>整体流程如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303121614494.png" alt="" loading="lazy"></p>`,19);function g(_,v){const a=c("router-link");return i(),l("div",null,[n("details",u,[d,n("nav",k,[n("ul",null,[n("li",null,[s(a,{to:"#_1-设计"},{default:e(()=>[t("1. 设计")]),_:1})]),n("li",null,[s(a,{to:"#_2-实现"},{default:e(()=>[t("2. 实现")]),_:1})]),n("li",null,[s(a,{to:"#_3-测试"},{default:e(()=>[t("3. 测试")]),_:1})]),n("li",null,[s(a,{to:"#_4-流程"},{default:e(()=>[t("4. 流程")]),_:1})])])])]),m])}const y=o(r,[["render",g],["__file","第03章：实现含构造函数的类实例化策略.html.vue"]]);export{y as default};
