const e=JSON.parse('{"key":"v-35870eb4","path":"/backend/java/concurrency/%E6%89%8B%E6%92%95%E7%AE%80%E6%98%93%E7%BA%BF%E7%A8%8B%E6%B1%A0.html","title":"手撕简易线程池","lang":"zh-CN","frontmatter":{"title":"手撕简易线程池","date":"2023-07-01T00:00:00.000Z","order":7,"category":["Java"],"tag":["并发编程"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 前言 在 上一篇文章 中，理解了线程池的使用方法和核心原理后，接下来我们就手撸一个简易版的线程。 我会从一个最简单的版本开始，一步步找出问题，然后提出解决思路，最后编码实现，最后完成一个基本功能完备的线程池。 项目地址：https://github.com/AruNi-01/JavaConcurrency/tree/master/src/main/java/com/run/threadpool","head":[["meta",{"property":"og:url","content":"https://code.0x3f4.run/backend/java/concurrency/%E6%89%8B%E6%92%95%E7%AE%80%E6%98%93%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"手撕简易线程池"}],["meta",{"property":"og:description","content":"本文内容 前言 在 上一篇文章 中，理解了线程池的使用方法和核心原理后，接下来我们就手撸一个简易版的线程。 我会从一个最简单的版本开始，一步步找出问题，然后提出解决思路，最后编码实现，最后完成一个基本功能完备的线程池。 项目地址：https://github.com/AruNi-01/JavaConcurrency/tree/master/src/main/java/com/run/threadpool"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T16:55:13.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"并发编程"}],["meta",{"property":"article:published_time","content":"2023-07-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T16:55:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手撕简易线程池\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-25T16:55:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 定义线程池接口","slug":"_1-定义线程池接口","link":"#_1-定义线程池接口","children":[]},{"level":2,"title":"2. 线程池的简单实现","slug":"_2-线程池的简单实现","link":"#_2-线程池的简单实现","children":[{"level":3,"title":"2.1 定义工作线程","slug":"_2-1-定义工作线程","link":"#_2-1-定义工作线程","children":[]},{"level":3,"title":"2.2 简易线程池","slug":"_2-2-简易线程池","link":"#_2-2-简易线程池","children":[]},{"level":3,"title":"2.3 测试","slug":"_2-3-测试","link":"#_2-3-测试","children":[]}]},{"level":2,"title":"3. 优化：自定义线程池的基本参数","slug":"_3-优化-自定义线程池的基本参数","link":"#_3-优化-自定义线程池的基本参数","children":[]},{"level":2,"title":"4. 优化：饱和拒绝策略","slug":"_4-优化-饱和拒绝策略","link":"#_4-优化-饱和拒绝策略","children":[{"level":3,"title":"4.1 定义拒绝策略接口","slug":"_4-1-定义拒绝策略接口","link":"#_4-1-定义拒绝策略接口","children":[]},{"level":3,"title":"4.2 AbortPolicy","slug":"_4-2-abortpolicy","link":"#_4-2-abortpolicy","children":[]},{"level":3,"title":"4.3 DiscardPolicy","slug":"_4-3-discardpolicy","link":"#_4-3-discardpolicy","children":[]},{"level":3,"title":"4.4 SimpleThreadPool 中添加拒绝策略","slug":"_4-4-simplethreadpool-中添加拒绝策略","link":"#_4-4-simplethreadpool-中添加拒绝策略","children":[]}]},{"level":2,"title":"5. 优化：自调节工作线程数","slug":"_5-优化-自调节工作线程数","link":"#_5-优化-自调节工作线程数","children":[{"level":3,"title":"5.1 SimpleThreadPool 中添加空闲线程存活时间","slug":"_5-1-simplethreadpool-中添加空闲线程存活时间","link":"#_5-1-simplethreadpool-中添加空闲线程存活时间","children":[]},{"level":3,"title":"5.2 改造 WorkerThread","slug":"_5-2-改造-workerthread","link":"#_5-2-改造-workerthread","children":[]}]},{"level":2,"title":"6. SimpleThreadPool 最终版","slug":"_6-simplethreadpool-最终版","link":"#_6-simplethreadpool-最终版","children":[]}],"git":{"createdTime":1700931313000,"updatedTime":1700931313000,"contributors":[{"name":"MECHREVO_GGPRO\\\\AarynLu","email":"hello@0x3f4.run","commits":1}]},"readingTime":{"minutes":17.42,"words":5227},"filePathRelative":"backend/java/concurrency/手撕简易线程池.md","localizedDate":"2023年7月1日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">前言</p>\\n<p>在 <a href=\\"http://code.0x3f4.run/backend/java/concurrency/%E4%B8%BA%E4%BD%95%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">上一篇文章</a> 中，理解了线程池的使用方法和核心原理后，接下来我们就手撸一个简易版的线程。</p>\\n<p>我会从一个最简单的版本开始，一步步找出问题，然后提出解决思路，最后编码实现，最后完成一个基本功能完备的线程池。</p>\\n<p>项目地址：<a href=\\"https://github.com/AruNi-01/JavaConcurrency/tree/master/src/main/java/com/run/threadpool\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/AruNi-01/JavaConcurrency/tree/master/src/main/java/com/run/threadpool</a></p>\\n</div>","autoDesc":true}');export{e as data};
