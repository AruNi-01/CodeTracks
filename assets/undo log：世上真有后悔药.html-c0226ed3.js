import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as a,c as u,b as o,e as t,w as s,d as n,a as e}from"./app-a130392a.js";const i={},_={class:"hint-container details"},c=o("summary",null,"本文内容",-1),p={class:"table-of-contents"},h=e('<h2 id="_1-为什么需要-undo-log" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要-undo-log" aria-hidden="true">#</a> 1. 为什么需要 undo log？</h2><p>InnoDB 存储引擎是支持事务的，而事务有一个非常重要的特征是 <strong>原子性</strong>，即事务中的所有操作，要么全部完成，要么全部失败。</p><p>但是，在实际运行过程中，就会有出现某个 <strong>事务执行到一半</strong> 的情况，例如：</p><ul><li><p>事务执行过程中 <strong>出现错误</strong>，如实例崩溃、突然断电宕机等；</p></li><li><p>开发人员在事务执行过程中手动执行 <strong>ROLLBACK</strong> 语句结束当前事务。</p></li><li><p>还有 <strong>两阶段提交时，在某时刻崩溃后，如果 binlog 还未刷盘，则要回滚这个事务</strong>。</p></li></ul><p>这些情况都会导致 <strong>事务执行到一半时结束</strong>，但是在执行过程中可能已经修改很多记录了，那为了 <strong>保证原子性</strong>，需要 <strong>将数据变回原来的样子</strong>，就像这个事务没有执行过一样，这个过程就称为 <strong>回滚</strong>（rollback）。</p><p>那怎么才能将数据变回原来的样子呢？根据什么进行回滚呢？这就是 <strong>undo log</strong> 需要做的事了。</p><h2 id="_2-什么是-undo-log" tabindex="-1"><a class="header-anchor" href="#_2-什么是-undo-log" aria-hidden="true">#</a> 2. 什么是 undo log？</h2><p>由于要将数据变回原来的样子，所以我们肯定得 <strong>先把原来的数据记录下来</strong>。</p><p>当然，并不是执行所有 SQL 语句时都要记录原来的数据，<strong>只用记录对数据有修改的就行了</strong>，也就是 INSERT、UPDATE、DELETE，比如：</p><ul><li><strong>插入</strong> 一条记录时，至少把这条记录的 <strong>主键值</strong> 记录下来，这样回滚时只需要把这条记录删掉即可；</li><li><strong>删除</strong> 一条记录时，要把这条 <strong>记录的所有内容</strong> 都记录下来，这样回滚时再把这条记录插入即可；</li><li><strong>更新</strong> 一条记录时，至少要把 <strong>被更新的列的旧值</strong> 记录下来，这样在回滚时只需要把这些列更新回旧值即可。</li></ul><p>这些提前需要记录的内容放在哪儿呢？想必你也已经想到了，就是 <strong>undo log</strong>。</p><blockquote><p>其实不同的操作（增删改）对应的 undo log 格式是不一样的，这里就不细说了。</p></blockquote><p>事务的 <strong>原子性就是依靠 undo log 保证的</strong>，<strong>在事务没提交前，会先记录更新前的数据到 undo log 中</strong>，当需要进行回滚时，就可以利用该日志进行回滚了。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303161642321.png" alt="image-20230316164235101" loading="lazy"></p><h2 id="_3-undo-log-何时刷盘" tabindex="-1"><a class="header-anchor" href="#_3-undo-log-何时刷盘" aria-hidden="true">#</a> 3. undo log 何时刷盘？</h2><p>我们知道，MySQL 的数据页有很多种类型，undo log 也有自己的数据页，叫做 <strong>undo 页</strong>。</p>',16),f={href:"https://code.0x3f4.run/backend/database/mysql/buffer_pool/%E4%BA%86%E8%A7%A3BufferPool.html#_3-buffer-pool-%E7%BC%93%E5%AD%98%E4%BB%80%E4%B9%88",target:"_blank",rel:"noopener noreferrer"},m=o("strong",null,"undo 页也是存储在 Buffer Pool 中的",-1),b=o("strong",null,"在 Buffer Pool 中写",-1),B=o("strong",null,"在刷脏页时就会进行持久化",-1),E=e('<p>在 Buffer Pool 的文章中也说过，<strong>脏页的持久化是由 redo log 保证的</strong>，所以 <strong>undo 页的修改也会记录到 redo log 中</strong>，我们并不用担心崩溃后还未刷盘的 undo log 会丢失。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>由于在某些情况下，事务可能会在执行过程中结束，例如事务在执行过程中 <strong>出现错误</strong>、执行 <strong>ROLLBACK</strong>、或者 <strong>在崩溃恢复时需要回滚</strong>。</p><p>但是在事务结束之前可能已经修改过很多数据了，这时候就需要 <strong>将数据变回原来的样子</strong>，所以就需要 <strong>记录修改之前的记录内容</strong>，这就是 <strong>redo log</strong> 做的事。</p><p><strong>undo log 保证了事务的原子性</strong>，让事务中的操作要么全部完成，要么全部失败。</p><p>此外，undo log 对应的数据页类型是 undo 页，也会存储在 Buffer Pool 中，<strong>对 undo 也的修改也会记录在 redo log 中</strong>，从而保证了 <strong>持久性</strong>。</p><p>顺便说一下，undo log 除了保证事务原子性之外，还有一个重要的作用是 <strong>实现 MVCC 的重要条件之一</strong>，在事务讲解中会详细介绍。</p><h2 id="_5-参考文章" tabindex="-1"><a class="header-anchor" href="#_5-参考文章" aria-hidden="true">#</a> 5. 参考文章</h2><ul><li>《MySQL 是怎样运行的》</li></ul>',9);function x(k,L){const r=l("router-link"),g=l("ExternalLinkIcon");return a(),u("div",null,[o("details",_,[c,o("nav",p,[o("ul",null,[o("li",null,[t(r,{to:"#_1-为什么需要-undo-log"},{default:s(()=>[n("1. 为什么需要 undo log？")]),_:1})]),o("li",null,[t(r,{to:"#_2-什么是-undo-log"},{default:s(()=>[n("2. 什么是 undo log？")]),_:1})]),o("li",null,[t(r,{to:"#_3-undo-log-何时刷盘"},{default:s(()=>[n("3. undo log 何时刷盘？")]),_:1})]),o("li",null,[t(r,{to:"#_4-总结"},{default:s(()=>[n("4. 总结")]),_:1})]),o("li",null,[t(r,{to:"#_5-参考文章"},{default:s(()=>[n("5. 参考文章")]),_:1})])])])]),h,o("p",null,[n("在 "),o("a",f,[n("了解 Buffer Pool"),t(g)]),n(" 中说过，"),m,n("，所以在 undo log 写入 undo 页时，其实也是 "),b,n("，所以 undo 页和其他数据页一样，"),B,n("。")]),E])}const P=d(i,[["render",x],["__file","undo log：世上真有后悔药.html.vue"]]);export{P as default};
