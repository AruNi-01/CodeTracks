import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,d as a,w as e,e as l,b as t}from"./app-ee064730.js";const u={},r={class:"hint-container details"},k=n("summary",null,"本文内容",-1),d={class:"table-of-contents"},v=l(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>前面我们学习完了创建型和结构型的设计模式，从这篇文章开始，将学习最后一个类型的设计模式—<strong>行为型</strong>。</p><p><strong>创建型主要解决的是 “对象的创建” 问题，结构型主要解决的是 “类或对象的组合组装” 问题，而行为型主要解决的是 “类或对象之间的交互” 问题</strong>。</p><p>行为型设计模式比较多，有：观察者模式、模版模式、策略模式、责任链模式、状态模式、迭代器模式、访问者模式、备忘录模式、命令模式、解释器模式、中介模式。</p><p>观察者模式在实际开发中也比较常用，<strong>根据应用场景的不同有着不同的实现方式</strong>，常见的有如下几种：</p><ul><li><strong>同步阻塞的实现</strong>；</li><li><strong>异步非阻塞的实现</strong>；</li><li><strong>进程内的实现</strong>；</li><li><strong>跨进程的实现</strong>。</li></ul><p>这篇文章首先介绍观察者模式的原理、应用场景，以及它的几种不同实现方式。下一篇文章将基于观察者模式实现一个异步非阻塞的 EventBus，将观察者模式运用到实际场景中。</p></div><h2 id="_1-观察者模式原理" tabindex="-1"><a class="header-anchor" href="#_1-观察者模式原理" aria-hidden="true">#</a> 1. 观察者模式原理</h2><p><strong>观察者模式</strong>（Observer Design Pattern）也叫 <strong>发布订阅模式</strong>（Publish-Subscribe Design Pattern），官方定义如下：</p><blockquote><p>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p></blockquote><p>即：<strong>在对象之间定义一个一对多的依赖，当一个对象的状态改变时，所有依赖的对象都会自动收到通知</strong>（进而执行某种操作）。</p><p>一般被依赖的对象叫作 <strong>被观察者</strong>（Observable），依赖的对象叫作 <strong>观察者</strong>（Observer）。不过在实际开发时有很多种不同的叫法，比如：Subject-Observer、Publisher-Subscriber、Producer-Consumer、EventEmitter-EventListener、Dispatcher-Listener 等。</p><p>观察者模式有多种实现方式，一种典型的实现方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 观察者</span>
<span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 观察者—更新 Message 操作</span>
    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 被观察者</span>
<span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注册/移除观察者</span>
    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通知所有的观察者</span>
    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体的被观察者</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 通知所有的观察者 update message</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体的观察者 01</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteObserver01</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO: 获取消息通知，执行 ConcreteObserver01 自己的逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreteObserver01 is notified.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体的观察者 02</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteObserver02</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO: 获取消息通知，执行 ConcreteObserver02 自己的逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreteObserver02 is notified.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassicObserver</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConcreteSubject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteObserver01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteObserver02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TODO: 发生某种事情，通知所有的观察者</span>
        subject<span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><ul><li><p>Subject 是被观察者，定义一组注册/移除/通知观察者的方法，由具体的被观察者 ConcreteSubject 去实现。</p></li><li><p>Observer 是观察者，定义一组动作，所有具体的观察者（ConcreteObserver01 和 ConcreteObserver02）都继承自 Observer，实现这组动作。</p></li><li><p>在 Observer 收到 Subject 状态变化的通知时（<code>notifyObservers()</code> 被调用），调用 Observer 具体实现类的这组动作，因为 Observer 的实现类各不相同，所有会做出各自不同的动作。</p></li></ul><p>这是观察者模式的 “模板代码”，只能反映出大致的设计思路。在实际应用时，都是比较灵活的，不必一五一十地照着实现。</p><h2 id="_2-应用场景" tabindex="-1"><a class="header-anchor" href="#_2-应用场景" aria-hidden="true">#</a> 2. 应用场景</h2><p>观察者模式原理非常简单，重点来看看具体的应用场景，在什么情况下需要使用观察者模式，观察者模式能解决什么问题？</p><p>假设一个投资理财系统在用户注册后会发放投资体验金，那么这个系统的 UserController 大致实行如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span> <span class="token comment">// 依赖注入</span>
  <span class="token keyword">private</span> <span class="token class-name">PromotionService</span> promotionService<span class="token punctuation">;</span> <span class="token comment">// 依赖注入</span>

  <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> telephone<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略输入参数的校验代码</span>
    <span class="token comment">// 省略 userService.register() 异常的 try-catch 代码</span>
    <span class="token keyword">long</span> userId <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>telephone<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    promotionService<span class="token punctuation">.</span><span class="token function">issueNewUserExperienceCash</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 发放体验金</span>
    <span class="token keyword">return</span> userId<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里虽然 <strong>注册接口做了两件事</strong>—注册和发放体验金，<strong>违反了单一职责原则</strong>，但是如果 <strong>后续没有扩展和修改的需求，这样的实现是可以接受的</strong>。如果 <strong>非要使用观察者模式</strong>，就意味着要引入更多的类和代码，反而是一种 <strong>过度设计</strong>。</p><p>相反，如果 <strong>需求频繁变动</strong>，比如用户注册后，又要改为发放优惠卷、还要给用户发送一封 “欢迎注册” 的站内信。此时如果还用上面的设计，就需要 <strong>频繁改动 <code>register()</code> 中的代码，违反了开闭原则</strong>。而且将多个功能写在同一个接口下会 <strong>增加该接口的复杂度</strong>，影响代码的可读性和可维护性。</p><p>此时，观察者模式就派上用场了。我们利用观察者模式进行重构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 监听器（观察者）</span>
<span class="token keyword">interface</span> <span class="token class-name">RegisterListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">handleRegisterSuccess</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RegisterPromotionListener</span> <span class="token keyword">implements</span> <span class="token class-name">RegisterListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">PromotionService</span> promotionService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegisterSuccess</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        promotionService<span class="token punctuation">.</span><span class="token function">issueNewUserExperienceCash</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RegisterNotificationListener</span> <span class="token keyword">implements</span> <span class="token class-name">RegisterListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">NotificationService</span> notificationService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegisterSuccess</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        notificationService<span class="token punctuation">.</span><span class="token function">sendInboxMessage</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token string">&quot;Welcome...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 触发器（被监听者）</span>
<span class="token keyword">class</span> <span class="token class-name">RegisterDispatcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegisterListener</span><span class="token punctuation">&gt;</span></span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">RegisterListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">RegisterListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RegisterListener</span> listener <span class="token operator">:</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            listener<span class="token punctuation">.</span><span class="token function">handleRegisterSuccess</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">RegisterDispatcher</span> registerDispatcher<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> telephone<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//省略输入参数的校验代码</span>
        <span class="token comment">// 省略 userService.register() 异常的 try-catch 代码</span>
        <span class="token keyword">long</span> userId <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>telephone<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 添加需要的监听器</span>
        <span class="token function">addListenerOfRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知所有监听器</span>
        registerDispatcher<span class="token punctuation">.</span><span class="token function">notifyListeners</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 添加 Register 相关的 Listener，实际场景可以把 List 作为参数，由外部调用者决定要注入什么 Listener</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addListenerOfRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registerDispatcher<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegisterPromotionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registerDispatcher<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegisterNotificationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要添加监听器时，现在就只需要添加一个实现了 RegisterListener 的类，然后在 <code>addListenerOfRegister()</code> 方法中添加该类即可。</p><div class="hint-container tip"><p class="hint-container-title">其实设计模式主要作用就是解耦：</p><ul><li><strong>创建型将对象的创建和使用解耦</strong>；</li><li><strong>结构型将不同行为（功能代码）解耦</strong>；</li><li><strong>观察者模式将观察者和被观察者的代码解耦</strong>。</li></ul></div><h2 id="_3-观察者模式的不同实现方式" tabindex="-1"><a class="header-anchor" href="#_3-观察者模式的不同实现方式" aria-hidden="true">#</a> 3. 观察者模式的不同实现方式</h2><p>观察者模式的应用非常广泛，比如我们常用的订阅系统，如邮件订阅、RSS Feeds 等，本质都是观察者模式。</p><p>不同的应用场景下，观察者模式有着不同的实现，在文章开头也说过，主要有以下几种实现方式：</p><ul><li><strong>同步阻塞的实现</strong>；</li><li><strong>异步非阻塞的实现</strong>；</li><li><strong>进程内的实现</strong>；</li><li><strong>跨进程的实现</strong>。</li></ul><p><strong>同步阻塞</strong> 的实现方式，<strong>观察者和被观察者代码在同一个线程内执行，被观察者要一直阻塞，直到所有观察者的方法都执行完</strong>。</p><blockquote><p>上面投资理财的例子，就是一种 <strong>同步阻塞</strong> 的实现方式，<code>register()</code> 中需要等每个观察者的 <code>handleRegSuccess()</code> 函数都执行完成之后，才会返回结果给客户端。</p></blockquote><p>了解了同步阻塞后，<strong>异步非阻塞</strong> 的实现方式就很简单了，只需要 <strong>启动一个新的线程来执行观察者的方法</strong> 即可。</p><p>上面的两种实现方式，其实都属于进程内的实现，那如何实现一个 <strong>跨进程的观察者模式</strong> 呢？在微服务架构中，常见的做法是使用 <strong>RPC 接口</strong> 来进行处理，不过一般我们会使用更优雅的实现方式—<strong>MQ</strong>。基于 MQ，<strong>被观察者和观察者解耦将更加彻底，被观察者和观察者两两都是无感知的</strong>。被观察者只管发送消息到 MQ，观察者只管从 MQ 中消费消息（执行对应的逻辑）。</p><div class="hint-container tip"><p class="hint-container-title">观察者模式和生产者-消费者模型的联系和区别：</p><p><strong>联系</strong>：</p><ul><li><strong>生产者-消费者模型可以算观察者模式的一种异步非阻塞的应用</strong>。</li></ul><p><strong>区别</strong>：</p><ul><li><strong>在观察者模式中，被观察者知道观察者的存在，要主动调用方法通知它；而在生产者-消费者模型中，由于加入了中间层队列，所以生产者和消费者完全对对方无感知，实现了完全解耦</strong>；</li><li><strong>在观察者模式中，被观察者发送了通知，其他观察者都会对此通知进行处理；而在生产者-消费者模型中，一条消息一般只会有一个消费者消费</strong>。</li></ul></div>`,30);function m(b,g){const s=o("router-link");return c(),i("div",null,[n("details",r,[k,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#_1-观察者模式原理"},{default:e(()=>[t("1. 观察者模式原理")]),_:1})]),n("li",null,[a(s,{to:"#_2-应用场景"},{default:e(()=>[t("2. 应用场景")]),_:1})]),n("li",null,[a(s,{to:"#_3-观察者模式的不同实现方式"},{default:e(()=>[t("3. 观察者模式的不同实现方式")]),_:1})])])])]),v])}const f=p(u,[["render",m],["__file","观察者模式（上）：理解观察者模式.html.vue"]]);export{f as default};
