import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as l,c,b as n,e as a,w as t,a as i,d as o}from"./app-ae5b746a.js";const r={},u={class:"hint-container details"},d=n("summary",null,"本文内容",-1),k={class:"table-of-contents"},g=i(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>Seata 有四种事务模式，分别是 AT、TCC、Saga 和 XA，每种模式各有优缺点，适用的数据库也不同。本文将介绍 Seata 默认、常用的 AT 模式。</p><p>在学习分布式事务原理前，确保你已经对本地事务 ACID 原则，事务隔离级别、日志和锁等知识有一定的了解。</p></div><h2 id="_1-什么是-at-模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是-at-模式" aria-hidden="true">#</a> 1. 什么是 AT 模式？</h2><p>我们在 Seata 入门时候的案例，使用的就是 AT 模式，在配置部署好 Seata-Server、数据库等后，在业务代码中直接使用一个 <code>@GlobalTransactional</code> 即可使用 Seata 分布式事务功能。</p><p>可见 AT 模式是一种 <strong>非侵入式</strong> 的解决方案，简单来说就是 <strong>Seata 对数据库做了代理操作（AOP 思想），在 SQL 真正执行的前后做了一些额外的操作</strong>（比如插入/删除 undo_log、获取/释放全局锁），从而达到控制 <strong>多个本地事务的共同提交或回滚</strong>。</p><p>要使用 AT 模式，使用的数据库需要 <strong>支持本地 ACID 原则</strong>，比如我们常用的 MySQL，而且 Java 应用需要 <strong>通过 JDBC 访问数据库</strong>。</p><p>在分布式事务中，各本地事务称为分支事务，整个分布式事务称为全局事务，由多个分支事务组成。</p><h2 id="_2-at-模式的机制" tabindex="-1"><a class="header-anchor" href="#_2-at-模式的机制" aria-hidden="true">#</a> 2. AT 模式的机制</h2><p>简单来说，AT 模式主要是基于两阶段提交协议演变而来：</p><ul><li>一阶段：<strong>业务数据和 undo_log 在同一个本地事务中提交 (提交前需要获取全局锁)</strong>，然后就 <strong>释放本地锁和连接资源</strong>；</li><li>二阶段（分为全局提交或回滚）： <ul><li><strong>全局提交</strong>：若 <strong>各分支事务都可提交</strong>，则全局事务也为提交状态，此过程是 <strong>异步</strong> 的（快速完成）；</li><li><strong>全局回滚</strong>：若 <strong>各分支事务有一个不可提交</strong>，则全局事务为回滚状态，主要通过一阶段生成的 <strong>undo_log</strong> 进行反向补偿。</li></ul></li></ul><p>在两阶段提交中，会涉及到 <strong>本地锁/全局锁、本地事务/全局事务的提交/回滚</strong> 等等，下面分别从 <strong>写隔离</strong> 和 <strong>读隔离</strong> 来说明。</p><h3 id="_2-1-写隔离" tabindex="-1"><a class="header-anchor" href="#_2-1-写隔离" aria-hidden="true">#</a> 2.1 写隔离</h3><p>在本地事务的基础上，Seata AT 模式的分布式写隔离主要靠以下两点来保证：</p><ul><li>一阶段 <strong>本地事务提交前</strong>，需要 <strong>先拿到全局锁</strong>；若拿不到则会进行重试，<strong>超时后</strong> 将会放弃事务的执行，并 <strong>回滚本地事务</strong> 和 <strong>释放本地锁</strong>；</li><li><strong>全局事务提交/回滚后，才释放全局锁</strong>；</li></ul><p>由于 <strong>全局锁是在整个全局事务过程中持有的</strong>，所以 <strong>不会发生脏写</strong> 问题。</p><p>下面用官方的一个例子来加以说明：两个全局事务 tx1 和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000。</p><ol><li>tx1 开启本地事务，拿到本地锁后执行更新操作；</li><li>tx1 本地事务更新完成，<strong>先拿到该记录的全局锁，才能提交</strong> 然后释放本地锁；</li><li>tx2 开启本地事务，拿到本地锁后执行更新操作；</li><li>tx2 本地事务更新完成，先拿到该记录的全局锁，但此时全局锁被 tx1 持有，所以暂时不能提交本地事务，tx2 只能重试等待；</li><li>tx1 提交全局事务，然后释放全局锁；</li><li>tx2 重试拿到全局锁，才能提交本地事务，然后释放本地锁。</li></ol><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/https%2Fseata.io%2Fzh-cn%2Fassets%2Fimages-2023_12_04-1701697181.png" alt="Write-Isolation: Commit" loading="lazy"></p><p>如果 tx1 需要全局回滚（某个其他/自己分支执行失败需要回滚），则 tx1 需要重新获取本地锁，然后才能进行反向补偿，实现分支的回滚。</p><blockquote><p>注意：这里的反向补偿其实是本地事务执行更新操作（更新成原来的数据），然后提交本地事务。</p></blockquote><p>若此时该数据的本地锁被 tx2 持有，而 tx2 又需要获取全局锁来提交本地事务，从而释放本地锁。即 tx1 持有全局锁，要获取本地锁，tx2 持有本地锁，要获取全局锁，此时会不会发生死锁呢？显然不会，因为前面说过 tx2 获取不到全局锁会进行重试，<strong>超时后会放弃全局事务</strong>，所以自然会 <strong>回滚本地事务并释放本地锁</strong>，tx1 此时就可以获取到本地锁，从而完成反向补偿，回滚了全局事务。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/https%2Fseata.io%2Fzh-cn%2Fassets%2Fimages-2023_12_04-1701698191.png" alt="Write-Isolation: Rollback" loading="lazy"></p><h3 id="_2-2-读隔离" tabindex="-1"><a class="header-anchor" href="#_2-2-读隔离" aria-hidden="true">#</a> 2.2 读隔离</h3><p>当 <strong>本地事务</strong> 的隔离级别是 <strong>读已提交（Read Committed）或以上</strong> 时，Seata AT 模式的 <strong>默认全局隔离级别</strong> 是 <strong>读未提交</strong>（Read Uncommitted）。</p><blockquote><p>因为 tx1 本地事务提交后，全局事务未提交前，tx2 也能读取到 tx1 本地事务提交后的数据。</p></blockquote><p>若应用需要 <strong>全局的读已提交</strong> 的隔离级别，则可通过对 <strong>SELECT FOR UPDATE</strong> 语句的代理来实现。</p><blockquote><p>普通 SELECT 语句并没有进行代理，因为这样会消耗一定的性能。</p></blockquote><p>在 Seata AT 模式中，<strong>SELECT FOR UPDATE 语句执行前需要先获取到全局锁</strong>，如果获取不到则会释放本地锁（SELECT FOR UPDATE 执行前会获取本地锁），并进行重试。<strong>这个过程的查询是被阻塞的，直到拿到全局锁，才能返回数据</strong>。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/https%2Fseata.io%2Fzh-cn%2Fassets%2Fimages-2023_12_04-1701699111.png" alt="Read Isolation: SELECT FOR UPDATE" loading="lazy"></p><h2 id="_3-at-模式的代理操作有哪些" tabindex="-1"><a class="header-anchor" href="#_3-at-模式的代理操作有哪些" aria-hidden="true">#</a> 3. AT 模式的代理操作有哪些？</h2><p>开头说到，AT 模式是一种 <strong>非侵入式</strong> 的解决方案，即 <strong>Seata 对数据库做了代理操作</strong>，那么这些代理操作具体做了什么呢？</p><p>下面以一个 product 表为例，将两阶段提交分开讲解。SQL 为 <code>update product set name = &#39;GTS&#39; where name = &#39;TXC&#39;</code>。</p><table><thead><tr><th>Field</th><th>Type</th><th>Key</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>PRIMARY</td></tr><tr><td>name</td><td>varchar(100)</td><td></td></tr><tr><td>since</td><td>varchar(100)</td><td></td></tr></tbody></table><p>在讲解之前，先来复习下 Seata 分布式事务的执行过程：</p><ol><li><p><strong>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID</strong>；</p><blockquote><p><strong>XID 通过 RPC 在微服务调用链路的 context 中传播</strong>。</p></blockquote></li><li><p><strong>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖</strong>；</p></li><li><p><strong>TM 向 TC 发起针对 XID 的全局提交或回滚决议</strong>；</p></li><li><p><strong>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求</strong>。</p></li></ol><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/https%2Fseata.io%2Fzh-cn%2Fassets%2Fimages-2023_12_04-1701703067.png" alt="img" loading="lazy"></p><p>还需要知道每个业务数据库新增的 undo_log 表字段：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>undo_log<span class="token punctuation">\`</span></span>
<span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">\`</span>branch_id<span class="token punctuation">\`</span></span>     <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;branch transaction id&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>xid<span class="token punctuation">\`</span></span>           <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;global transaction id&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>context<span class="token punctuation">\`</span></span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;undo_log context,such as serialization&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>rollback_info<span class="token punctuation">\`</span></span> <span class="token keyword">LONGBLOB</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;rollback info&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>log_status<span class="token punctuation">\`</span></span>    <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;0:normal status,1:defense status&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>log_created<span class="token punctuation">\`</span></span>   <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;create datetime&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>log_modified<span class="token punctuation">\`</span></span>  <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;modify datetime&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>ux_undo_log<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>xid<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>branch_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">&#39;AT transaction mode undo table&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>undo_log<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">\`</span>ix_log_created<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>log_created<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-一阶段提交" tabindex="-1"><a class="header-anchor" href="#_3-1-一阶段提交" aria-hidden="true">#</a> 3.1 一阶段提交</h3><p>我们知道，在一阶段中 <strong>业务数据和 undo_log 在同一个本地事务中提交 (提交前需要获取全局锁)</strong>，然后就 <strong>释放本地锁和连接资源</strong>。在这个过程中涉及到以下几个代理操作：</p><ul><li><strong>SQL 执行前</strong>：查询记录的前镜像；</li><li><strong>SQL 执行后</strong>： <ul><li>查询记录的后镜像；</li><li>插入回滚日志到 undo_log 表中。</li></ul></li><li><strong>本地事务提交前</strong>：向 TC 注册分支（申请该记录的全局锁）；</li><li><strong>本地事务提交时</strong>：业务数据的更新和生成的 undo_log 一并提交；</li><li><strong>本地事务提交后</strong>：将本地事务的提交结果（提交/回滚）上报给 TC。</li></ul><p>结合示例（SQL 为 <code>update product set name = &#39;GTS&#39; where name = &#39;TXC&#39;</code>），整个过程步骤如下：</p><p><strong>1、查询记录的前镜像</strong>：根据 SQL 解析后的条件，生成查询语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> since <span class="token keyword">from</span> product <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;TXC&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到前镜像：</p><table><thead><tr><th>id</th><th>name</th><th>since</th></tr></thead><tbody><tr><td>1</td><td>TXC</td><td>2014</td></tr></tbody></table><p><strong>2、执行 SQL</strong>：更新该记录的 name 为 &#39;GTS&#39;。</p><p><strong>3、查询记录的后镜像</strong>：根据前镜像结果，通过 <strong>主键</strong> 查询数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> since <span class="token keyword">from</span> product <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到后镜像：</p><table><thead><tr><th>id</th><th>name</th><th>since</th></tr></thead><tbody><tr><td>1</td><td>GTS</td><td>2014</td></tr></tbody></table><p><strong>4、插入 undo_log</strong>：把前后镜像数据和业务 SQL 的信息组合成一条 undo_log，插入到 undo_log 表中，undo 信息为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;branchId&quot;</span><span class="token operator">:</span> <span class="token number">641789253</span><span class="token punctuation">,</span>
    <span class="token property">&quot;undoItems&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token property">&quot;afterImage&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;rows&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GTS&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;since&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2014&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;tableName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;product&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;beforeImage&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;rows&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;TXC&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;since&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2014&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;tableName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;product&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;sqlType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UPDATE&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;xid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xid:xxx&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5、提交前向 TC 注册分支</strong>：申请 product 表中主键记录为 1 记录的 <strong>全局锁</strong>。</p><p><strong>6、提交本地事务</strong>：业务数据的更新和生成的 undo_log 一并提交。</p><p><strong>7、提交后将本地事务的提交结果（提交/回滚）上报给 TC</strong>。</p><h3 id="_3-2-二阶段提交-—-提交" tabindex="-1"><a class="header-anchor" href="#_3-2-二阶段提交-—-提交" aria-hidden="true">#</a> 3.2 二阶段提交 — 提交</h3><p>若全局事务可以进行提交（分支事务都可提交时，TM 会向 TC 发起全局提交，RM 也会收到 TC 的提交请求），TM/RM 则会把请求放入一个 <strong>异步队列</strong> 中，然后马上返回提交成功的结果给 TC，后续将会 <strong>异步地批量删除相应的 undo_log 记录</strong>。</p><p>TC 会把最后全局事务的提交结果返回给 TM，TM 即启动 <code>@GlobalTransactional</code> 的业务，业务即完成了本次的全局事务。</p><h3 id="_3-3-二阶段提交-—-回滚" tabindex="-1"><a class="header-anchor" href="#_3-3-二阶段提交-—-回滚" aria-hidden="true">#</a> 3.3 二阶段提交 — 回滚</h3><p>若全局事务需要进行回滚（分支事务至少有一个需要回滚时，TM 会捕获到一个 TC 响应的异常，若该异常属于 <code>rollbackFor = xxx</code> 配置的异常，TM 会向 TC 发起全局回滚，RM 也会收到 TC 的分支回滚请求），执行如下操作：</p><ol><li><p>TM/RM 开启一个本地事务；</p></li><li><p>通过 XID 和 BranchID 查找出对应的 undo_log 记录；</p></li><li><p><strong>数据校验</strong>：用 undo_log 中的后镜像和当前数据做对比：</p><ul><li>若相同则说明数据没有被改动过，执行后续步骤；</li><li><strong>若不同则说明数据被全局事务之外的操作做了修改</strong>，此时需要根据配置策略做处理。</li></ul></li><li><p>根据 undo_log 中的前镜像和业务 SQL 的信息生成回滚 SQL，进行反向补偿：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> product <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;TXC&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>提交本地事务，把执行结果上报给 TC；</p></li><li><p>TC 会把最后全局事务的回滚结果返回给 TM，TM 即启动 <code>@GlobalTransactional</code> 的业务，业务即可捕获到对应的回滚异常。</p></li></ol>`,61);function m(v,b){const s=e("router-link");return l(),c("div",null,[n("details",u,[d,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#_1-什么是-at-模式"},{default:t(()=>[o("1. 什么是 AT 模式？")]),_:1})]),n("li",null,[a(s,{to:"#_2-at-模式的机制"},{default:t(()=>[o("2. AT 模式的机制")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_2-1-写隔离"},{default:t(()=>[o("2.1 写隔离")]),_:1})]),n("li",null,[a(s,{to:"#_2-2-读隔离"},{default:t(()=>[o("2.2 读隔离")]),_:1})])])]),n("li",null,[a(s,{to:"#_3-at-模式的代理操作有哪些"},{default:t(()=>[o("3. AT 模式的代理操作有哪些？")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_3-1-一阶段提交"},{default:t(()=>[o("3.1 一阶段提交")]),_:1})]),n("li",null,[a(s,{to:"#_3-2-二阶段提交-—-提交"},{default:t(()=>[o("3.2 二阶段提交 — 提交")]),_:1})]),n("li",null,[a(s,{to:"#_3-3-二阶段提交-—-回滚"},{default:t(()=>[o("3.3 二阶段提交 — 回滚")]),_:1})])])])])])]),g])}const T=p(r,[["render",m],["__file","Seata-AT模式.html.vue"]]);export{T as default};
