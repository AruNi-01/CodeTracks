import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as p,b as n,e as s,w as e,a as l,d as t}from"./app-5b8f6424.js";const u={},r={class:"hint-container details"},d=n("summary",null,"本文内容",-1),k={class:"table-of-contents"},m=l(`<h2 id="_1-设计" tabindex="-1"><a class="header-anchor" href="#_1-设计" aria-hidden="true">#</a> 1. 设计</h2><p>实现一个最简单的 Bean 容器，由于我们需要通过 Bean 的名字来获取该 Bean 对象，所以使用 Map 进行映射最好不过了。</p><p>我们把 Bean 对象单独放在一个 BeanDefinition 类中，再定义一个 Bean 工厂 BeanFacotry 来存取 Bean。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303091506104.png" alt="img" loading="lazy"></p><h2 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h2><p>各类的定义如下类图所示：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303091506111.png" alt="image-20230309111726175" loading="lazy"></p><ul><li>BeanDefinition 中定义 Bean，提供一个获取 Bean 的方法；</li><li>BeanFactory 工厂提供一个 Bean 容器 Map，以及提供往容器中注入 Bean，从容器中获取 Bean 的方法。</li></ul><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><p>测试方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 初始化 BeanFactory</span>
    <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建 BeanDefinition</span>
    <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 2. 注册 bean</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 获取 bean</span>
    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 输出：查询用户信息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-流程" tabindex="-1"><a class="header-anchor" href="#_4-流程" aria-hidden="true">#</a> 4. 流程</h2><p>流程如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303091506754.png" alt="image-20230309112028253" loading="lazy"></p>`,14);function v(_,h){const a=i("router-link");return c(),p("div",null,[n("details",r,[d,n("nav",k,[n("ul",null,[n("li",null,[s(a,{to:"#_1-设计"},{default:e(()=>[t("1. 设计")]),_:1})]),n("li",null,[s(a,{to:"#_2-实现"},{default:e(()=>[t("2. 实现")]),_:1})]),n("li",null,[s(a,{to:"#_3-测试"},{default:e(()=>[t("3. 测试")]),_:1})]),n("li",null,[s(a,{to:"#_4-流程"},{default:e(()=>[t("4. 流程")]),_:1})])])])]),m])}const B=o(u,[["render",v],["__file","第01章：简单的Bean容器.html.vue"]]);export{B as default};
