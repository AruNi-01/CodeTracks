import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as n,e as a,w as t,a as i,d as p}from"./app-a3917ae4.js";const u={},k={class:"hint-container details"},d=n("summary",null,"本文内容",-1),r={class:"table-of-contents"},v=i(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>当你头一次看到组合模式时，可能会联想到组合关系，但其实 <strong>组合模式跟面向对象设计中的 “组合关系” 完全是两码事</strong>。</p><p><strong>组合模式</strong> 在平时开发中不常使用，因为它的应用场景非常特殊，主要用来 <strong>处理树形结构数据</strong>。</p></div><h2 id="_1-什么是组合模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是组合模式" aria-hidden="true">#</a> 1. 什么是组合模式</h2><p><strong>组合模式</strong> 的定义是：<strong>将一组对象组织成树形结构，以表示一种 “部分 - 整体” 的层次结构，让使用者可以统一单个对象和组合对象的处理逻辑</strong>。</p><p>组合模式一个典型的应用就是处理文件系统，下面也通过这个例子来理解下上面的定义。</p><p>假设我们需要设计一个类来表示文件系统中的目录，能方便的提供下面的功能：</p><ul><li>动态地添加、删除某个目录下的子目录或文件；</li><li>统计指定目录下的文件个数；</li><li>统计指定目录下的文件总大小。</li></ul><p>为了提高文件目录系统的可扩展性、可读性，我们将文件和目录（文件夹）进行区分设计，分别定义为 File 类和 Directory 类。</p><blockquote><p>非要只用一个大类来表示文件目录也可以，添加一个 isFile 字段来表示文件即可。</p></blockquote><p>首先定义一个顶层的 <strong>文件系统节点抽象类 FileSystemNode</strong>，提供路径属性、以及计算文件数量和总大小的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FileSystemNode</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token class-name">String</span> path<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">FileSystemNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">countNumOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">long</span> <span class="token function">countSizeOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> path<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着定义 <strong>文件类 File</strong>，继承自 FileSystemNode，重写上述两个方法，具体实现逻辑就是：</p><ul><li>计算文件数量：因为是文件类，所以表示一个文件，返回 1 即可；</li><li>计算文件总大小：通过 Java 的 File 类，直接返回 file 对象的长度即可。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">FileSystemNode</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNumOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">countSizeOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着定义 <strong>目录（文件夹）类 Directory</strong>，继承自 FileSystemNode，再额外提供一个 List，用于保存所有的目录和文件。</p><p>也要重写上述两个方法，具体实现逻辑就是：</p><ul><li>计算文件数量：因为是目录，所以需要 <strong>递归遍历</strong> 所有文件目录节点，遇到文件自然会返回 1，遇到目录则继续递归下一个节点；</li><li>计算文件总大小：逻辑与计算文件数量类似，递归遍历统计即可。</li></ul><p>除此之外，由于还需要支持动态地添加、删除某个目录下的子目录或文件，所以在 Directory 类中还需要增加添加、删除目录文件的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Directory</span> <span class="token keyword">extends</span> <span class="token class-name">FileSystemNode</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileSystemNode</span><span class="token punctuation">&gt;</span></span> subNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNumOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> numOfFiles <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileSystemNode</span> fileOrDir <span class="token operator">:</span> subNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 递归遍历</span>
      numOfFiles <span class="token operator">+=</span> fileOrDir<span class="token punctuation">.</span><span class="token function">countNumOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> numOfFiles<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">countSizeOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> sizeofFiles <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileSystemNode</span> fileOrDir <span class="token operator">:</span> subNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 递归遍历</span>
      sizeofFiles <span class="token operator">+=</span> fileOrDir<span class="token punctuation">.</span><span class="token function">countSizeOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sizeofFiles<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addSubNode</span><span class="token punctuation">(</span><span class="token class-name">FileSystemNode</span> fileOrDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    subNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fileOrDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeSubNode</span><span class="token punctuation">(</span><span class="token class-name">FileSystemNode</span> fileOrDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> subNodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>subNodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>fileOrDir<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      subNodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时文件和目录就都设计好了，下面来看看如何用它们来表示一个文件系统中的目录树结构。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * /
     * /wz/
     * /wz/a.txt
     * /wz/b.txt
     * /wz/movies/
     * /wz/movies/c.avi
     * /xzg/
     * /xzg/docs/
     * /xzg/docs/d.txt
     */</span>
    <span class="token class-name">Directory</span> fileSystemTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Directory</span> node_wz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;/wz/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Directory</span> node_xzg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;/xzg/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fileSystemTree<span class="token punctuation">.</span><span class="token function">addSubNode</span><span class="token punctuation">(</span>node_wz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fileSystemTree<span class="token punctuation">.</span><span class="token function">addSubNode</span><span class="token punctuation">(</span>node_xzg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">File</span> node_wz_a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/wz/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">File</span> node_wz_b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/wz/b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Directory</span> node_wz_movies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;/wz/movies/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node_wz<span class="token punctuation">.</span><span class="token function">addSubNode</span><span class="token punctuation">(</span>node_wz_a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node_wz<span class="token punctuation">.</span><span class="token function">addSubNode</span><span class="token punctuation">(</span>node_wz_b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node_wz<span class="token punctuation">.</span><span class="token function">addSubNode</span><span class="token punctuation">(</span>node_wz_movies<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">File</span> node_wz_movies_c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/wz/movies/c.avi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node_wz_movies<span class="token punctuation">.</span><span class="token function">addSubNode</span><span class="token punctuation">(</span>node_wz_movies_c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Directory</span> node_xzg_docs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">&quot;/xzg/docs/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node_xzg<span class="token punctuation">.</span><span class="token function">addSubNode</span><span class="token punctuation">(</span>node_xzg_docs<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">File</span> node_xzg_docs_d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/xzg/docs/d.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node_xzg_docs<span class="token punctuation">.</span><span class="token function">addSubNode</span><span class="token punctuation">(</span>node_xzg_docs_d<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;/ files num:&quot;</span> <span class="token operator">+</span> fileSystemTree<span class="token punctuation">.</span><span class="token function">countNumOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;/wz/ files num:&quot;</span> <span class="token operator">+</span> node_wz<span class="token punctuation">.</span><span class="token function">countNumOfFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对者这个例子，再来看看组合模式的定义：<strong>将一组对象（文件和目录）组织成树形结构，以表示一种 “部分 - 整体” 的层次结构（目录与子目录的嵌套结构），让使用者可以统一单个对象（文件）和组合对象（目录）的处理逻辑 (递归遍历)</strong>。</p><h2 id="_2-应用场景" tabindex="-1"><a class="header-anchor" href="#_2-应用场景" aria-hidden="true">#</a> 2. 应用场景</h2><p>组合模式的应用场景其实就在其定义当中，即 <strong>一组对象能组织成树形结构，使用者可以统一单个对象和组合对象的处理逻辑</strong>。</p><p>除了上面的文件目录系统外，还有一些可以表示为树形结构的数据。</p><p>比如部门和员工系统，它们在数据库中可能用如下结构表示：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304162020361.png" alt="image-20230416202009212" loading="lazy"></p><p>当我们需要对某个部门（这个部门可能还有子部门）求出所有员工的工资和时，员工和部门可以组织成树形结构，部门与子部门嵌套构成 “部分 - 整体” 的层次结构。利用组合模式可以让使用者统一单个对象（员工）和组合对象（部门）的处理逻辑（递归遍历求工资和）。</p><p>由于这里的逻辑和上面的文件目录系统相似，所以就不给出代码实现了。</p><p>除此之外，还有比如需要对数据进行过滤，将满足一定条件的数据收集起来，而过滤的条件可以使用类似于树形结构（比如二叉树）的形式来组织，也可以使用组合模式。</p><p>比如下面这个例子，使用一颗规则树来对性别、年龄进行过滤，最底层的节点表示果实，即过滤后的满足条件的结果。用组合模式的定义来说，就是 <strong>将一组对象（果实和节点）组织成树形结构，以表示一种 “部分 - 整体” 的层次结构（节点与子节点的嵌套结构），让使用者可以统一单个对象（果实节点）和组合对象（节点）的处理逻辑 (遍历节点进行过滤)</strong>：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304161315579.png" alt="" loading="lazy"></p><p>其实前缀树也可以看作是组合模式，它的定义就是 <strong>将一组对象（叶子节点 [isEnd = true 的节点] 和普通节点）组织成树形结构，以表示一种 “整部 - 整体” 的层次结构（普通节点之间的嵌套结构），让使用者可以统一单个对象（叶子节点）和组合对象（普通节点）的处理逻辑 (遍历节点)</strong>。</p><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h2><p>关于组合模式的定义，在每个例子中都重新理解了一遍，这里就不再赘述了。</p><p>最后再强调一下，组合模式的应用场景很有限，<strong>需要你的业务场景必须能够表示成树形结构，业务需求可以通过在树上的递归遍历算法来实现</strong>。</p><p>因此组合模式在实际开发中不是很常用，但是也需要掌握，一旦有类似的需求，使用组合模式就可以很好的解决。</p>`,36);function m(b,w){const s=o("router-link");return c(),l("div",null,[n("details",k,[d,n("nav",r,[n("ul",null,[n("li",null,[a(s,{to:"#_1-什么是组合模式"},{default:t(()=>[p("1. 什么是组合模式")]),_:1})]),n("li",null,[a(s,{to:"#_2-应用场景"},{default:t(()=>[p("2. 应用场景")]),_:1})]),n("li",null,[a(s,{to:"#_3-总结"},{default:t(()=>[p("3. 总结")]),_:1})])])])]),v])}const f=e(u,[["render",m],["__file","组合模式.html.vue"]]);export{f as default};
