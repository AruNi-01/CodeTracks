const t=JSON.parse('{"key":"v-95070054","path":"/studynotes/middleware/mq/common_question/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E5%B9%82%E7%AD%89.html","title":"如何保证消息幂等","lang":"zh-CN","frontmatter":{"title":"如何保证消息幂等","date":"2023-06-16T00:00:00.000Z","order":2,"category":["中间件"],"tag":["消息队列"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 1. 对幂等的理解 幂等是业务的一个特性，在 MQ 中，对于不满足幂等性的业务，在消息重复消费时，会导致数据不一致、或数据错乱的现象。 例如一个支付业务，消费者需要消费扣款的消息，如果该消息出现了重复消费的情况，但最终的业务结果是只扣款了一次，那么就说这个扣款业务具有 幂等性。 再用我们常见的 HTTP 为例，GET、PUT、DELETE 方法都是幂等的，因为它们不管执行多少次，都和执行一次效果一样，对业务结果都是无影响的。而 POST 就不是幂等的，它会创建多个资源。","head":[["meta",{"property":"og:url","content":"https://code.0x3f4.run/studynotes/middleware/mq/common_question/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E5%B9%82%E7%AD%89.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"如何保证消息幂等"}],["meta",{"property":"og:description","content":"本文内容 1. 对幂等的理解 幂等是业务的一个特性，在 MQ 中，对于不满足幂等性的业务，在消息重复消费时，会导致数据不一致、或数据错乱的现象。 例如一个支付业务，消费者需要消费扣款的消息，如果该消息出现了重复消费的情况，但最终的业务结果是只扣款了一次，那么就说这个扣款业务具有 幂等性。 再用我们常见的 HTTP 为例，GET、PUT、DELETE 方法都是幂等的，因为它们不管执行多少次，都和执行一次效果一样，对业务结果都是无影响的。而 POST 就不是幂等的，它会创建多个资源。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-16T10:04:08.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"消息队列"}],["meta",{"property":"article:published_time","content":"2023-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-16T10:04:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何保证消息幂等\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-16T10:04:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 对幂等的理解","slug":"_1-对幂等的理解","link":"#_1-对幂等的理解","children":[]},{"level":2,"title":"2. 为何会出现消息不幂等的情况？","slug":"_2-为何会出现消息不幂等的情况","link":"#_2-为何会出现消息不幂等的情况","children":[]},{"level":2,"title":"3. 如何解决消息不幂等？","slug":"_3-如何解决消息不幂等","link":"#_3-如何解决消息不幂等","children":[{"level":3,"title":"3.1 利用数据库","slug":"_3-1-利用数据库","link":"#_3-1-利用数据库","children":[]},{"level":3,"title":"3.2 设置全局唯一标识 ID","slug":"_3-2-设置全局唯一标识-id","link":"#_3-2-设置全局唯一标识-id","children":[]}]}],"git":{"createdTime":1686928012000,"updatedTime":1694858648000,"contributors":[{"name":"aarynlu","email":"aarynlu@tencent.com","commits":3}]},"readingTime":{"minutes":3.53,"words":1058},"filePathRelative":"studynotes/middleware/mq/common_question/如何保证消息幂等.md","localizedDate":"2023年6月16日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<h2> 1. 对幂等的理解</h2>\\n<p>幂等是业务的一个特性，在 MQ 中，<strong>对于不满足幂等性的业务，在消息重复消费时，会导致数据不一致、或数据错乱的现象</strong>。</p>\\n<p>例如一个支付业务，消费者需要消费扣款的消息，如果该消息出现了重复消费的情况，<strong>但最终的业务结果是只扣款了一次</strong>，那么就说这个扣款业务具有 <strong>幂等性</strong>。</p>\\n<p>再用我们常见的 HTTP 为例，GET、PUT、DELETE 方法都是幂等的，因为它们不管执行多少次，都和执行一次效果一样，对业务结果都是无影响的。而 POST 就不是幂等的，它会创建多个资源。</p>","autoDesc":true}');export{t as data};
