const t=JSON.parse('{"key":"v-56f35934","path":"/studynotes/design_pattern/pattern/behaviour_type/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E7%90%86%E8%A7%A3%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"观察者模式（上）：理解观察者模式","lang":"zh-CN","frontmatter":{"title":"观察者模式（上）：理解观察者模式","shortTitle":"观察者模式（上）","date":"2023-06-14T00:00:00.000Z","order":1,"category":["设计模式"],"tag":["设计模式与范式"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 前言 前面我们学习完了创建型和结构型的设计模式，从这篇文章开始，将学习最后一个类型的设计模式—行为型。 创建型主要解决的是 “对象的创建” 问题，结构型主要解决的是 “类或对象的组合组装” 问题，而行为型主要解决的是 “类或对象之间的交互” 问题。 行为型设计模式比较多，有：观察者模式、模版模式、策略模式、责任链模式、状态模式、迭代器模式、访问者模式、备忘录模式、命令模式、解释器模式、中介模式。 观察者模式在实际开发中也比较常用，根据应用场景的不同有着不同的实现方式，常见的有如下几种： 同步阻塞的实现； 异步非阻塞的实现； 进程内的实现； 跨进程的实现。 这篇文章首先介绍观察者模式的原理、应用场景，以及它的几种不同实现方式。下一篇文章将基于观察者模式实现一个异步非阻塞的 EventBus，将观察者模式运用到实际场景中。","head":[["meta",{"property":"og:url","content":"https://code.0x3f4.run/studynotes/design_pattern/pattern/behaviour_type/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E7%90%86%E8%A7%A3%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"观察者模式（上）：理解观察者模式"}],["meta",{"property":"og:description","content":"本文内容 前言 前面我们学习完了创建型和结构型的设计模式，从这篇文章开始，将学习最后一个类型的设计模式—行为型。 创建型主要解决的是 “对象的创建” 问题，结构型主要解决的是 “类或对象的组合组装” 问题，而行为型主要解决的是 “类或对象之间的交互” 问题。 行为型设计模式比较多，有：观察者模式、模版模式、策略模式、责任链模式、状态模式、迭代器模式、访问者模式、备忘录模式、命令模式、解释器模式、中介模式。 观察者模式在实际开发中也比较常用，根据应用场景的不同有着不同的实现方式，常见的有如下几种： 同步阻塞的实现； 异步非阻塞的实现； 进程内的实现； 跨进程的实现。 这篇文章首先介绍观察者模式的原理、应用场景，以及它的几种不同实现方式。下一篇文章将基于观察者模式实现一个异步非阻塞的 EventBus，将观察者模式运用到实际场景中。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-16T10:04:08.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"设计模式与范式"}],["meta",{"property":"article:published_time","content":"2023-06-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-16T10:04:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"观察者模式（上）：理解观察者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-16T10:04:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 观察者模式原理","slug":"_1-观察者模式原理","link":"#_1-观察者模式原理","children":[]},{"level":2,"title":"2. 应用场景","slug":"_2-应用场景","link":"#_2-应用场景","children":[]},{"level":2,"title":"3. 观察者模式的不同实现方式","slug":"_3-观察者模式的不同实现方式","link":"#_3-观察者模式的不同实现方式","children":[]}],"git":{"createdTime":1686806342000,"updatedTime":1694858648000,"contributors":[{"name":"aarynlu","email":"aarynlu@tencent.com","commits":3}]},"readingTime":{"minutes":7.67,"words":2302},"filePathRelative":"studynotes/design_pattern/pattern/behaviour_type/观察者模式（上）：理解观察者模式.md","localizedDate":"2023年6月14日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">前言</p>\\n<p>前面我们学习完了创建型和结构型的设计模式，从这篇文章开始，将学习最后一个类型的设计模式—<strong>行为型</strong>。</p>\\n<p><strong>创建型主要解决的是 “对象的创建” 问题，结构型主要解决的是 “类或对象的组合组装” 问题，而行为型主要解决的是 “类或对象之间的交互” 问题</strong>。</p>\\n<p>行为型设计模式比较多，有：观察者模式、模版模式、策略模式、责任链模式、状态模式、迭代器模式、访问者模式、备忘录模式、命令模式、解释器模式、中介模式。</p>\\n<p>观察者模式在实际开发中也比较常用，<strong>根据应用场景的不同有着不同的实现方式</strong>，常见的有如下几种：</p>\\n<ul>\\n<li><strong>同步阻塞的实现</strong>；</li>\\n<li><strong>异步非阻塞的实现</strong>；</li>\\n<li><strong>进程内的实现</strong>；</li>\\n<li><strong>跨进程的实现</strong>。</li>\\n</ul>\\n<p>这篇文章首先介绍观察者模式的原理、应用场景，以及它的几种不同实现方式。下一篇文章将基于观察者模式实现一个异步非阻塞的 EventBus，将观察者模式运用到实际场景中。</p>\\n</div>","autoDesc":true}');export{t as data};
