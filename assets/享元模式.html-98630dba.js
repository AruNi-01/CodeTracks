import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as u,b as n,e as a,w as t,d as s,a as o}from"./app-956a415e.js";const r={},k={class:"hint-container details"},d=n("summary",null,"本文内容",-1),v={class:"table-of-contents"},m=o(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>上一篇文章讲的组合模式，主要应用在数据能表示成树形结构，所以不太常用。</p><p>而本篇文章要讲的 <strong>享元模式</strong>，也不太常用，因为它的使用场景也比较特殊。不过在 Java 中，你经常使用的 <strong>String、Integer 都使用到了享元模式</strong>。</p></div><h2 id="_1-什么是享元模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是享元模式" aria-hidden="true">#</a> 1. 什么是享元模式</h2><p><strong>享元</strong>，顾名思义就是 <strong>被共享的单元</strong>，它的意图是 <strong>复用对象，节省内存</strong>。对象要复用，前提肯定是 <strong>不可变对象</strong>。</p><blockquote><p>“<strong>不可变对象</strong>” 指的是 <strong>对象一旦通过构造函数初始化后，它的状态（对象的成员变量或属性）就不会再被修改了</strong>。</p></blockquote><p>具体来说，当系统中存在 <strong>大量重复</strong> 且 <strong>不可变</strong> 的对象时，就可以使用 <strong>享元模式</strong> 将对象设计成享元，<strong>在内存中只保存一份实例，供多处代码引用</strong>。这样便可以减少内存中的对象数量，起到节省内存的目的。</p><p>对于 <strong>相似的对象</strong>，其实也可以 <strong>将对象中相同的部分（字段）提取出来，设计成享元</strong>，让大量相似的对象引用这些享元。</p><h2 id="_2-如何实现享元模式" tabindex="-1"><a class="header-anchor" href="#_2-如何实现享元模式" aria-hidden="true">#</a> 2. 如何实现享元模式</h2><p>下面用一个象棋游戏来看看享元模式的具体代码实现。</p><p>在象棋游戏中，一个游戏厅有成千上万个 “房间”，每个房间对应一个棋局。棋局中要保存每个棋子的数据，如：棋子类型（将、相、士等）、棋子颜色（红、黑）、棋子的位置（x, y）。</p><p>利用上面这些数据，就可以将一个完整的棋盘显示出来，具体代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPiece</span> <span class="token punctuation">{</span>	<span class="token comment">//棋子</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> positionX<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> positionY<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">BLACK</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ...省略其他属性和构造器、getter/setter 方法...</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessBoard</span> <span class="token punctuation">{</span>	<span class="token comment">//棋局</span>
  <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">&gt;</span></span> chessPieces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">ChessBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    chessPieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;車&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChessPiece<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chessPieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;馬&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChessPiece<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...省略摆放其他棋子的代码...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> chessPieceId<span class="token punctuation">,</span> <span class="token keyword">int</span> toPositionX<span class="token punctuation">,</span> <span class="token keyword">int</span> toPositionY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...省略...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了记录每个房间的棋局情况，<strong>需要给每个房间都创建一个 ChessBoard 棋局对象</strong>，所以当房间比较多的时候，就会 <strong>消耗大量的内存</strong>。</p><p>这时候就可以使用享元模式了，因为其实这些棋局对象是相似的，这些对象中很多属性都是相同的，比如 id、text、color，唯独 positionX、positionY 不同。所以可以把相同的属性拆分出来，设计成独立的类，作为享元供多个期盼复用。</p><p>具体代码实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 享元类，创建对象后便不能改变对象，所以不提供 setter 方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPieceUnit</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">BLACK</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ...省略其他属性和构造器、getter方法...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 提供一个ChessPieceUnit 工厂类，用来获取享元</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPieceUnitFactory</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ChessPieceUnit</span><span class="token punctuation">&gt;</span></span> pieces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token punctuation">{</span>
    pieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPieceUnit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;車&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChessPieceUnit<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPieceUnit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;馬&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChessPieceUnit<span class="token punctuation">.</span>Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...省略摆放其他棋子的代码...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ChessPieceUnit</span> <span class="token function">getChessPiece</span><span class="token punctuation">(</span><span class="token keyword">int</span> chessPieceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> pieces<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chessPieceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPiece</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">ChessPieceUnit</span> chessPieceUnit<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> positionX<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> positionY<span class="token punctuation">;</span>

  <span class="token comment">// 省略构造器、getter、setter方法</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessBoard</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">&gt;</span></span> chessPieces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">ChessBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过 ChessPieceUnitFactory 来获取享元</span>
    chessPieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span>
            <span class="token class-name">ChessPieceUnitFactory</span><span class="token punctuation">.</span><span class="token function">getChessPiece</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chessPieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPiece</span><span class="token punctuation">(</span>
            <span class="token class-name">ChessPieceUnitFactory</span><span class="token punctuation">.</span><span class="token function">getChessPiece</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...省略摆放其他棋子的代码...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> chessPieceId<span class="token punctuation">,</span> <span class="token keyword">int</span> toPositionX<span class="token punctuation">,</span> <span class="token keyword">int</span> toPositionY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...省略...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <strong>工厂类来缓存 ChessPieceUnit 信息（id、text、color），通过工厂类获取到的 ChessPieceUnit 就是享元</strong>。</p><p>因为在一个棋盘中，只有 30 个不同的棋子，所以所有的 ChessBoard 对象都可以共享这 30 个 ChessPieceUnit 对象。在使用享元模式之前，记录 1 万个棋局，需要创建 30 万（30×1 万）个棋子的 ChessPieceUnit 对象。<strong>利用享元模式，只需要创建 30 个享元对象供所有棋局共享使用，大大节省了内存</strong>。</p><p>所以，享元模式的代码实现主要是：<strong>通过工厂模式，在工厂类中通过一个 Map 来缓存已经创建过的享元，来达到复用的目的，从而节省了内存空间</strong>。</p><h2 id="_3-享元模式-vs-单例、缓存、池化技术" tabindex="-1"><a class="header-anchor" href="#_3-享元模式-vs-单例、缓存、池化技术" aria-hidden="true">#</a> 3. 享元模式 vs 单例、缓存、池化技术</h2><p>好像享元、单例、缓存、对象池，都有点对象复用或共享的意思，那么它们有啥区别呢？</p><div class="hint-container info"><p class="hint-container-title">享元模式和单例的区别</p><p><strong>单例模式中，一个类只能创建一个对象，而享元模式中，一个类可以创建多个对象，每个对象被多处代码引用共享</strong>。</p><p>可以发现，享元模式有点类似与单例的变体，多例。不过它们的 <strong>设计意图是完全不同的</strong>：</p><ul><li><strong>享元模式是为了对象复用，节省内存</strong>；</li><li><strong>多例模式是为了限制对象的个数</strong>。</li></ul></div><div class="hint-container info"><p class="hint-container-title">享元模式和缓存的区别</p><p>在 <strong>享元模式</strong> 中，我们一般通过<strong>工厂类来 “缓存” 已经创建好的对象</strong>，这里的 “缓存” 其实是 “<strong>存储</strong>” 的意思。</p><p>而我们 <strong>平时说的缓存</strong>，例如CPU 缓存、Redis 缓存等，主要是为了 <strong>提高访问速度，而非复用</strong>。</p></div><div class="hint-container info"><p class="hint-container-title">享元模式和池化技术的区别</p><p>池化技术常见的有连接池、线程池等，也是为了复用，那它们和享元模式有什么区别呢？</p><p>虽然都是复用，但是它们的 <strong>复用其实是不同的概念</strong>：</p><ul><li><strong>池化技术</strong> 的复用，指的是 <strong>重复使用</strong>，主要目的是 <strong>节省时间</strong>（比如线程池节省了线程创建和销毁的时间）。<strong>在任意时刻，每个连接（连接池）或线程（线程池）并不会被多处使用，而是被一个使用者独占，使用完后放回池中，再由其他使用者重复利用</strong>；</li><li><strong>享元模式</strong> 中的复用，指的是 <strong>共享使用</strong>，<strong>在享元的整个声明周期中，都是被所有使用者共享的，主要目的是节省空间</strong>。</li></ul></div><h2 id="_4-享元模式在-java-中的应用" tabindex="-1"><a class="header-anchor" href="#_4-享元模式在-java-中的应用" aria-hidden="true">#</a> 4. 享元模式在 Java 中的应用</h2><h3 id="_4-1-享元模式在-integer-中的应用" tabindex="-1"><a class="header-anchor" href="#_4-1-享元模式在-integer-中的应用" aria-hidden="true">#</a> 4.1 享元模式在 Integer 中的应用</h3><p>先给你抛一道面试题：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i4 <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，Java 中 == 号是比较对象的地址值是否相等，所以答案是 false、false 吗？显然没有这么简单。</p><p>这就涉及到 <strong>Integer 的缓存机制</strong> 了，其实 <strong>在创建 Integer 对象时，如果对象的值在 -128 到 127 之间，则会先从 IntegerCache 类中获取对象，否则才会新创建对象</strong>。</p><p>所以其实上面的答案是 true，false。</p><p>而这就是一种 <strong>享元模式</strong>，这里的 IntegerCache 就相当于前面讲的享元对象的工厂类，只是名字不叫 xxxFactory 而已。IntegerCache 是 Integer 的静态内部类，源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Cache to support the object identity semantics of autoboxing for values between
     * -128 and 127 (inclusive) as required by JLS.
     *
     * The cache is initialized on first usage.  The size of the cache
     * may be controlled by the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">AutoBoxCacheMax</span><span class="token operator">=</span><span class="token generics"><span class="token punctuation">&lt;</span>size<span class="token punctuation">&gt;</span></span></span></span><span class="token punctuation">}</span> option.
     * During VM initialization, java.lang.Integer.IntegerCache.high property
     * may be set and saved in the private system properties in the
     * jdk.internal.misc.VM class.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> archivedCache<span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token punctuation">{</span>
            <span class="token comment">// high value may be configured by property</span>
            <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span>
                <span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Integer.IntegerCache.high&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// Maximum array size is Integer.MAX_VALUE</span>
                    h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// If the property cannot be parsed into an int, ignore it.</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            high <span class="token operator">=</span> h<span class="token punctuation">;</span>

            <span class="token comment">// Load IntegerCache.archivedCache from archive, if possible</span>
            <span class="token constant">CDS</span><span class="token punctuation">.</span><span class="token function">initializeFromArchive</span><span class="token punctuation">(</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

            <span class="token comment">// Use the archived cache if it exists and is large enough</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>archivedCache <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> size <span class="token operator">&gt;</span> archivedCache<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                archivedCache <span class="token operator">=</span> c<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cache <span class="token operator">=</span> archivedCache<span class="token punctuation">;</span>
            <span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span>
            <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">&gt;=</span> <span class="token number">127</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过查看源码可知，<strong>当使用到 IntegerCache 时，就会在类加载时将缓存的享元对象一次性创建好</strong>。这也是为什么只提供 -128 到 127 之间的值，如果范围太大，那么就需要创建很多的享元对象，占用了太多的内存，也使得该类的加载时间过长。所以 JDK 只选择缓存了最常用的，也就是一个字节的大小（-128 到 127 之间的数据）。</p><blockquote><p>JDK 也提供了自定义调节缓存的最大值，通过 <code>-Djava.lang.Integer.IntegerCache.high=255</code> 或 <code>-XX:AutoBoxCacheMax=255</code> 参数调节，不过没有提供设置最小值的方法。</p></blockquote><p>当你掌握了 IntegerCache 后，面试官又抛给你一道题：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> n1 <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> n2 <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> n4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1 <span class="token operator">==</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n3 <span class="token operator">==</span> n4<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你觉得答案是 true，true 的话，那面试官可能就直接叫你回去等通知了。</p><p>我们回过头去看看 IntegerCache 类的注释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Cache to support the object identity semantics of autoboxing for values between
     * -128 and 127 (inclusive) as required by JLS.
     *
     * ......
     */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，<strong>这个缓存只对范围在 -128 到 127 之间，且通过自动装箱 autoboxing 的对象创建时，才会起作用</strong>。</p><p>关于 <strong>自动拆装箱</strong>，其实就是 Java 提供的一种语法糖：</p><ul><li>当直接将基本数据类型变量赋值给包装类型变量时，就会发生自动装箱，实际上就是调用 <code>Integer.valueOf()</code> 方法；</li><li>当直接将包装类型变量赋值给基本数据类型变量时，就会发生自动拆箱，实际上就是调用 <code>包装类型变量.intValue()</code> 方法。</li></ul><p>所以在上面的面试题中，n1 和 n2 都是自动装箱，所以 <strong>n1、n2 直接复用了 IntegerCache 中的对象</strong>（56 的对象值在类加载的时候就已经添加到缓存了）。而 n3 和 n4 直接通过 new 来创建对象，没有使用自动装箱，自然就使用不到 IntegerCache 了。</p><p>Integer 装箱的源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果值在范围内，则从 IntegerCache 中获取</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们在开发中使用 Integer 时，<strong>最好都使用自动装箱（或者自己显示调用 <code>Integer.valueOf()</code>）来创建对象，这样可以大大节省内存</strong>。</p><blockquote><p>在 JDK 9 中已经将包装类型的构造器设置为 Deprecated 了，彻底弃用了。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304182203579.png" alt="image-20230418220348470" loading="lazy"></p></blockquote><p>实际上，除了 Integer 之外，其他的包装类型比如 Long、Short、Byte 等，也都利用享元模式来缓存 -128 到 127 之间的数据，实现方式都和 Integer 类似。</p><h3 id="_4-2-享元模式在-string-中的应用" tabindex="-1"><a class="header-anchor" href="#_4-2-享元模式在-string-中的应用" aria-hidden="true">#</a> 4.2 享元模式在 String 中的应用</h3><p>同样，先给你抛一道面试题：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;AruNi&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;AruNi&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;AruNi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是 true，false。和 Integer 类的设计思路类似，<strong>String 利用享元模式来复用相同的字符串常量</strong>（代码中的 <code>&quot;AruNi&quot;</code>），JVM 会专门开辟一块存储区来存储字符串常量，也就是 <strong>常量池</strong>。</p><p>不过，String 类的享元模式和 Integer 类还是有点 <strong>区别</strong>：</p><ul><li><strong>Integer 中的享元，是在类加载的时候就一次性创建好</strong>；</li><li><strong>String 常量池中的享元，是在字符串常量第一次被使用时，才放到常量池中，之后就可以复用这个字符串常量了</strong>。</li></ul><p>原因也很好理解，因为对于字符串来说，没法事先知道要共享哪些字符串常量，所以只能在被使用时才添加了。</p>`,55),g={href:"https://code.0x3f4.run/backend/java/javase/String%E7%B1%BB.html",target:"_blank",rel:"noopener noreferrer"},b=o('<h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p>享元，顾名思义就是 <strong>被共享的单元</strong>，它的意图是 <strong>复用对象，节省内存</strong>。对象要复用，前提肯定是 <strong>不可变对象</strong>。</p><p>享元模式的代码实现主要是通过工厂模式，在工厂类中通过一个 Map（或 List，看具体场景）来缓存已经创建好的享元对象，以达到复用的目的。</p><p>其实很多设计模式的代码实现都大差不差，但 <strong>设计意图是截然不同的，主要是看要解决什么问题</strong>。</p><p>这里再简单的概括下 <strong>享元模式和单例、缓存、池化技术的区别</strong>：</p><ul><li>享元模式是为了对象复用，节省内存，而且享元对象是多个使用者共享的；</li><li>单例模式是为了保证对象的全局唯一，就算是多例，也是要限制对象的个数的；</li><li>缓存是为了提高访问速度，而非复用；</li><li>池化技术中的复用，是为了节省时间（不为对象创建和销毁花费太多的时间），而且池化技术中的线程/连接是被使用者独占的。</li></ul><p>最后讲到了享元模式在 Java Integer、String 中的应用：</p><ul><li><p><strong>Integer 的缓存机制</strong>，其实是 <strong>在创建 Integer 对象时，如果对象的值在 -128 到 127 之间，则会先从 IntegerCache 类中获取对象，否则才会新创建对象</strong>；</p><blockquote><p>需要注意的是，只有在使用自动装箱的时候，才会使用缓存。而且 IntegerCache 在使用到时，会在类加载的时候就初始化好缓存。</p></blockquote></li><li><p><strong>String 的缓存机制主要是通过字符串常量池来提供的</strong>，当使用到字符串时，会先尝试从字符串常量池中获取，获取不到才会创建对象，然后将对象放入字符串常量池中。</p></li></ul><p>其实，IntegerCache 也可以像字符串常量池那样，在使用到时才创建然后放入缓存中，一个简单的思路是使用 WeakHashMap。</p><blockquote><p>使用弱引用是为了让外部没有变量引用对象时，可以让这些对象被 GC 回收掉，而不至于浪费内存。</p></blockquote>',10);function h(y,w){const e=p("router-link"),c=p("ExternalLinkIcon");return i(),u("div",null,[n("details",k,[d,n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#_1-什么是享元模式"},{default:t(()=>[s("1. 什么是享元模式")]),_:1})]),n("li",null,[a(e,{to:"#_2-如何实现享元模式"},{default:t(()=>[s("2. 如何实现享元模式")]),_:1})]),n("li",null,[a(e,{to:"#_3-享元模式-vs-单例、缓存、池化技术"},{default:t(()=>[s("3. 享元模式 vs 单例、缓存、池化技术")]),_:1})]),n("li",null,[a(e,{to:"#_4-享元模式在-java-中的应用"},{default:t(()=>[s("4. 享元模式在 Java 中的应用")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_4-1-享元模式在-integer-中的应用"},{default:t(()=>[s("4.1 享元模式在 Integer 中的应用")]),_:1})]),n("li",null,[a(e,{to:"#_4-2-享元模式在-string-中的应用"},{default:t(()=>[s("4.2 享元模式在 String 中的应用")]),_:1})])])]),n("li",null,[a(e,{to:"#_5-总结"},{default:t(()=>[s("5. 总结")]),_:1})])])])]),m,n("p",null,[s("关于字符串常量池，其实还有很多内容，涉及到 JVM，这里就不过多讲解了，可以看我的另一篇文章："),n("a",g,[s("String 类"),a(c)]),s("。")]),b])}const I=l(r,[["render",h],["__file","享元模式.html.vue"]]);export{I as default};
