const e=JSON.parse('{"key":"v-5b4e78f4","path":"/studynotes/java/jvm/memory_manager/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.html","title":"运行时数据区域","lang":"zh-CN","frontmatter":{"title":"运行时数据区域","date":"2023-08-19T00:00:00.000Z","order":1,"icon":"write","category":["Java"],"tag":["JVM"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 前言 JVM 的 自动内存管理机制 帮助了我们很友好的使用内存，写 Java 代码时，不用为 new 出来的对象进行释放，JVM 会在合适的时机帮我们进行 垃圾回收。 但我们还是有必要去了解一下 Java 的内存区域是怎样的，JVM 是怎样使用内存的，这样在出现内存相关的问题时，比如内存泄漏、内存溢出，才有能力去排查。 本章先来了解 Java 的 运行时数据区域 是如何划分的，每个区域分别有什么作用，保存什么数据？","head":[["meta",{"property":"og:url","content":"https://aruni.me/studynotes/java/jvm/memory_manager/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"运行时数据区域"}],["meta",{"property":"og:description","content":"本文内容 前言 JVM 的 自动内存管理机制 帮助了我们很友好的使用内存，写 Java 代码时，不用为 new 出来的对象进行释放，JVM 会在合适的时机帮我们进行 垃圾回收。 但我们还是有必要去了解一下 Java 的内存区域是怎样的，JVM 是怎样使用内存的，这样在出现内存相关的问题时，比如内存泄漏、内存溢出，才有能力去排查。 本章先来了解 Java 的 运行时数据区域 是如何划分的，每个区域分别有什么作用，保存什么数据？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-19T15:22:16.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2023-08-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-19T15:22:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"运行时数据区域\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-19T15:22:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 运行时数据区域有哪些？","slug":"_1-运行时数据区域有哪些","link":"#_1-运行时数据区域有哪些","children":[]},{"level":2,"title":"2. 程序计数器","slug":"_2-程序计数器","link":"#_2-程序计数器","children":[]},{"level":2,"title":"3. Java 栈","slug":"_3-java-栈","link":"#_3-java-栈","children":[]},{"level":2,"title":"4. 本地方法栈","slug":"_4-本地方法栈","link":"#_4-本地方法栈","children":[]},{"level":2,"title":"5. 堆","slug":"_5-堆","link":"#_5-堆","children":[]},{"level":2,"title":"6. 方法区","slug":"_6-方法区","link":"#_6-方法区","children":[]},{"level":2,"title":"7. 总结","slug":"_7-总结","link":"#_7-总结","children":[]}],"git":{"createdTime":1692116705000,"updatedTime":1692458536000,"contributors":[{"name":"aarynlu","email":"aarynlu@tencent.com","commits":3}]},"readingTime":{"minutes":6.85,"words":2055},"filePathRelative":"studynotes/java/jvm/memory_manager/运行时数据区域.md","localizedDate":"2023年8月19日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">前言</p>\\n<p>JVM 的 <strong>自动内存管理机制</strong> 帮助了我们很友好的使用内存，写 Java 代码时，不用为 new 出来的对象进行释放，JVM 会在合适的时机帮我们进行 <strong>垃圾回收</strong>。</p>\\n<p>但我们还是有必要去了解一下 Java 的内存区域是怎样的，JVM 是怎样使用内存的，这样在出现内存相关的问题时，比如内存泄漏、内存溢出，才有能力去排查。</p>\\n<p>本章先来了解 Java 的 <strong>运行时数据区域</strong> 是如何划分的，每个区域分别有什么作用，保存什么数据？</p>\\n</div>","autoDesc":true}');export{e as data};
