const e=JSON.parse(`{"key":"v-36110c84","path":"/studynotes/framework/small-spring/ioc/%E7%AC%AC07%E7%AB%A0%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E9%94%80%E6%AF%81%E6%96%B9%E6%B3%95.html","title":"第07章：初始化和销毁方法","lang":"zh-CN","frontmatter":{"title":"第07章：初始化和销毁方法","date":"2023-03-24T00:00:00.000Z","order":7,"icon":"write","category":["框架"],"tag":["Spring"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 1. 设计 当我们把某个类创建的 Bean 对象交给 Spring 容器管理后，该类对象就可以被赋予更多的使用能力。例如在上一章中，我们就给类对象添加了 对 BeanDefinition 未实例化前的属性信息的修改能力，以及 初始化过程中的前置处理和后置处理，让 Bean 对象实例化前后可以进行修改或替换。 这些额外能力的实现，都可以让我们对现有工程中的类对象做相应的 扩展处理。","head":[["meta",{"property":"og:url","content":"https://aruni.me/studynotes/framework/small-spring/ioc/%E7%AC%AC07%E7%AB%A0%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E9%94%80%E6%AF%81%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"AruNi's domain"}],["meta",{"property":"og:title","content":"第07章：初始化和销毁方法"}],["meta",{"property":"og:description","content":"本文内容 1. 设计 当我们把某个类创建的 Bean 对象交给 Spring 容器管理后，该类对象就可以被赋予更多的使用能力。例如在上一章中，我们就给类对象添加了 对 BeanDefinition 未实例化前的属性信息的修改能力，以及 初始化过程中的前置处理和后置处理，让 Bean 对象实例化前后可以进行修改或替换。 这些额外能力的实现，都可以让我们对现有工程中的类对象做相应的 扩展处理。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-10T13:25:13.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2023-03-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-10T13:25:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第07章：初始化和销毁方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-10T13:25:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 设计","slug":"_1-设计","link":"#_1-设计","children":[]},{"level":2,"title":"2. 实现","slug":"_2-实现","link":"#_2-实现","children":[{"level":3,"title":"2.1 通过接口实现","slug":"_2-1-通过接口实现","link":"#_2-1-通过接口实现","children":[]},{"level":3,"title":"2.2 通过 XML 配置实现","slug":"_2-2-通过-xml-配置实现","link":"#_2-2-通过-xml-配置实现","children":[]},{"level":3,"title":"2.3 初始化方法的执行","slug":"_2-3-初始化方法的执行","link":"#_2-3-初始化方法的执行","children":[]},{"level":3,"title":"2.4 销毁方法的执行","slug":"_2-4-销毁方法的执行","link":"#_2-4-销毁方法的执行","children":[]},{"level":3,"title":"2.5 目录结构","slug":"_2-5-目录结构","link":"#_2-5-目录结构","children":[]},{"level":3,"title":"2.6 类结构图","slug":"_2-6-类结构图","link":"#_2-6-类结构图","children":[]}]},{"level":2,"title":"3. 测试","slug":"_3-测试","link":"#_3-测试","children":[]},{"level":2,"title":"4. 流程","slug":"_4-流程","link":"#_4-流程","children":[]}],"git":{"createdTime":1679667188000,"updatedTime":1686403513000,"contributors":[{"name":"AruNi-01","email":"1298911600@qq.com","commits":2},{"name":"aarynlu","email":"aarynlu@tencent.com","commits":1}]},"readingTime":{"minutes":6.87,"words":2060},"filePathRelative":"studynotes/framework/small-spring/ioc/第07章：初始化和销毁方法.md","localizedDate":"2023年3月24日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<h2> 1. 设计</h2>\\n<p>当我们把某个类创建的 Bean 对象交给 Spring 容器管理后，该类对象就可以被赋予更多的使用能力。例如在上一章中，我们就给类对象添加了 <strong>对 BeanDefinition 未实例化前的属性信息的修改能力</strong>，以及 <strong>初始化过程中的前置处理和后置处理</strong>，让 Bean 对象实例化前后可以进行修改或替换。</p>\\n<p>这些额外能力的实现，都可以让我们对现有工程中的类对象做相应的 <strong>扩展处理</strong>。</p>","autoDesc":true}`);export{e as data};
