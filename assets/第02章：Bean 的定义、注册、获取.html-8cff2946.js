import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as p,a as n,d as s,w as e,e as l,b as t}from"./app-88c2d15d.js";const r={},u={class:"hint-container details"},d=n("summary",null,"本文内容",-1),k={class:"table-of-contents"},m=l(`<h2 id="_1-设计" tabindex="-1"><a class="header-anchor" href="#_1-设计" aria-hidden="true">#</a> 1. 设计</h2><p>上面创建的 Bean 容器比较简单，接下来我们需要提供一个 <strong>单例 Bean 缓存</strong>（因为缓存中保存一个实例 Bean 即可，所以采用单例），在获取 Bean 的时候，如果缓冲中存在就直接返回，否则才需要创建 Bean。</p><p>另外，在上面的设计中，BeanDefinition 中的 bean 变量是 Object 类型，那么在初始化阶段就要实例化这个 Bean。所以我们考虑 <strong>将 bean 变量定义成 Class 类型</strong>，这样 <strong>在初始化阶段就可以只传一个类信息，转而把 Bean 的实例化也交给容器来做</strong>。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303091506735.png" alt="img" loading="lazy"></p><h2 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h2><p>考虑到涉及到的类比较多了，因此需要进行解耦，根据单一职责的原则，我们让每个类只做与它有关的事情。</p><p>除了使用工厂模式外，这里再使用一个 <strong>模板方法模式</strong> 定义创建和获取 Bean 的抽象方法，具体的实现由子类完成。</p><p>目录结构更新如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303140821065.png" alt="image-20230314082119557" loading="lazy"></p><p>各个类的关系、职责如下图所示：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303091937370.png" alt="image-20230309193732265" loading="lazy"></p><ul><li><p>右上角的两个类是与单例 Bean 有关的；</p></li><li><p>再下来就是一个 <strong>提供了模板方法的抽象类 AbstractBeanFactory</strong>，它定义了 <strong>两个抽象方法供子类实现</strong>，分别是获取 BeanDefinition 和将 Bean 注入到容器中。</p><p>同时，它 <strong>继承了上面与单例有关的类</strong>，所以它也 <strong>具有获取单例 Bean 的能力</strong>。</p><p>该类中还 <strong>提供获取 Bean 的流程</strong>，即先获取单例 Bean，获取不到则创建 Bean，创建 Bean 的具体流程由子类实现。</p></li><li><p>接下来就是 <strong>AbstractAutoWireCapableBeanFactory 抽象类</strong>，它 <strong>具有创建 Bean 的能力</strong>，因为它继承自 AbstractBeanFactory，<strong>实现了创建 Bean 的模板方法</strong>，提供了具体实现：</p><ol><li>创建 BeanDefinition 实例（将实例化 Bean 的步骤移到了此）；</li><li>将实例化的 Bean 放入单例缓存（由于继承链的存在，所以可以直接调用向单例缓存中添加 Bean 的方法 <code>addSingleton()</code>）；</li></ol></li><li><p>最后一个 <strong>核心类 DefaultListableBeanFactory 提供了 Bena 容器，实现了向容器中注册 Bean 和从容器中获取 Bean 的方法</strong>；</p></li><li><p>外部调用就是通过 DefaultListableBeanFactory 调用继承链中模板类 AbstractBeanFactory 的 <code>getBean()</code> 方法来获取 Bean 实例。</p></li></ul><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><p>测试方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 1. 初始化 BeanFactory</span>
     <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
     <span class="token comment">// 这里直接把 UserService.class 传递给了 BeanDefinition，而不是像上次那样直接 new UserService()</span>
     <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
     <span class="token comment">// 2. 注册 bean</span>
     beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
     <span class="token comment">// 3. 第一次获取 bean</span>
     <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 4. 第二次获取 bean from Singleton</span>
     <span class="token class-name">UserService</span> userService_singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     userService_singleton<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-流程" tabindex="-1"><a class="header-anchor" href="#_4-流程" aria-hidden="true">#</a> 4. 流程</h2><p>注册、获取 Bean 的流程图：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303091946463.png" alt="" loading="lazy"></p>`,18);function v(g,_){const a=c("router-link");return i(),p("div",null,[n("details",u,[d,n("nav",k,[n("ul",null,[n("li",null,[s(a,{to:"#_1-设计"},{default:e(()=>[t("1. 设计")]),_:1})]),n("li",null,[s(a,{to:"#_2-实现"},{default:e(()=>[t("2. 实现")]),_:1})]),n("li",null,[s(a,{to:"#_3-测试"},{default:e(()=>[t("3. 测试")]),_:1})]),n("li",null,[s(a,{to:"#_4-流程"},{default:e(()=>[t("4. 流程")]),_:1})])])])]),m])}const f=o(r,[["render",v],["__file","第02章：Bean 的定义、注册、获取.html.vue"]]);export{f as default};
