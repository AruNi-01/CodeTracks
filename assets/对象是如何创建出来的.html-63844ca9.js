import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as l,c as i,a as t,d as o,w as r,e as g,b as s}from"./app-fff4f215.js";const d={},c={class:"hint-container details"},p=t("summary",null,"本文内容",-1),h={class:"table-of-contents"},_=g('<div class="hint-container info"><p class="hint-container-title">前言</p><p>在编写 Java 程序时，经常需要 new 对象，你知道 new 关键字背后的秘密吗？JVM 是如何执行 new 指令的呢？本文就带你一探究竟。</p></div><h2 id="_0-概览" tabindex="-1"><a class="header-anchor" href="#_0-概览" aria-hidden="true">#</a> 0. 概览</h2><p>首先从全局的角度来看看 new 一个对象的整体过程，会经历如下几个主要步骤：</p><ol><li><strong>类加载检查</strong>；</li><li><strong>内存分配</strong>；</li><li><strong>初始化零值</strong>；</li><li><strong>填充对象头信息</strong>；</li><li><strong>执行构造函数</strong>（<code>&lt;init&gt;()</code> 方法）。</li></ol><h2 id="_1-类加载检查" tabindex="-1"><a class="header-anchor" href="#_1-类加载检查" aria-hidden="true">#</a> 1. 类加载检查</h2><p>在方法区中的 <strong>常量池</strong> 里，存储了类的信息，还有一个常量池表，用来存放 <strong>编译时生成的各种字面量和符号引用</strong>。</p><p>想要创建一个对象，首先肯定得拿到该对象对应的类，那么就需要先将该类加载到内存。</p><p>所以在类加载检查时，首先就会去 <strong>常量池中定位到这个类的符号引用</strong>，然后 <strong>检查该符号引用代表的类是否已经被加载、解析和初始化过了</strong>。如果没有，则会先执行类加载过程。</p><h2 id="_2-内存分配" tabindex="-1"><a class="header-anchor" href="#_2-内存分配" aria-hidden="true">#</a> 2. 内存分配</h2><p>类加载检查通过后，就会给对象 <strong>分配内存空间</strong>，这个过程其实就是 <strong>在堆中划分出一块确定大小的内存</strong>。</p><p>那么怎么划分呢？根据垃圾收集器是否带有 <strong>空间压缩整理</strong> 的能力，在 JVM 中有两种内存分配的划分方式：</p><ul><li><strong>指针碰撞</strong>；</li><li><strong>空闲列表</strong>。</li></ul><h3 id="_2-1-指针碰撞" tabindex="-1"><a class="header-anchor" href="#_2-1-指针碰撞" aria-hidden="true">#</a> 2.1 指针碰撞</h3><p>如果 Java 堆内存是绝对规整的，所有 <strong>已使用的内存放在一边，未使用的内存放在另一边</strong>，那么就可以在这两段内存的 <strong>中间放一个指针作为分界点</strong>，这样在分配内存的时候，就只用简单的 <strong>把该指针往空闲内存的方向移动一段与对象大小相等的距离即可</strong>，这种内存分配方式就叫 <strong>指针碰撞</strong>。</p><p>而堆内存是否规整，就取决于采用的垃圾收集器是否带有空间压缩整理（Compact）的能力。</p><p>比如 Serial、ParNew 等带有压缩整理的收集器，采用的内存分配算法就是指针碰撞，既简单又高效。</p><h3 id="_2-2-空闲列表" tabindex="-1"><a class="header-anchor" href="#_2-2-空闲列表" aria-hidden="true">#</a> 2.2 空闲列表</h3><p>如果 Java 堆中的内存不是规整的两部分，而是 <strong>已使用和未使用的内存相互交错在一起</strong>，那 JVM 就会维护一个列表，<strong>该列表记录哪些内存块是可用的</strong>，这样在分配内存时，就可以在这个 <strong>空闲列表中找出一块足够的空间划分给对象实例</strong>，这种方式就叫 <strong>空闲列表</strong>。</p><p>像 CMS 这种基于清除（Sweep）算法的收集器，就只能使用这种空闲列表的方式分配内存了。</p><h3 id="_2-3-并发修改问题" tabindex="-1"><a class="header-anchor" href="#_2-3-并发修改问题" aria-hidden="true">#</a> 2.3 并发修改问题</h3><p>创建对象是一个非常频繁的行为，在有 <strong>大量对象同时创建时</strong>，如果只是简单的修改指针的位置、或者在空闲列表上找一块空闲空间，然后再把这块空间在列表上更新为已使用。这都是一种更新行为，在并发情况下都 <strong>不是线程安全的</strong>。</p><p>在 JVM 中有两种解决并发问题的方案：</p><ul><li><p><strong>对分配内存的空间进行同步处理</strong>，JVM 使用的是 <strong>CAS</strong> 来保证更新的原子性；</p></li><li><p><strong>把内存分配按线程的不同划分到不同的空间上进行</strong>，即 <strong>每个线程会在堆中预先分配一块小内存</strong>，称之为 <strong>本地线程分配缓冲</strong>（Thread Local Allocation Buffer，TLAB）。</p><blockquote><p>也就是说，在线程分配内存时，<strong>首先会在自己的 TLAB 中进行</strong>，每个线程的 TLAB 互不相同，自然也不存在线程安全问题了。</p><p>只有在自己的 <strong>TLAB 使用完时，向堆中分配新的缓冲区才需要进行同步处理</strong>。</p></blockquote></li></ul><p>是否让 JVM 使用 TLAB，可以用参数 <code>-XX:+/-UseTLAB</code> 来设定。</p><h2 id="_3-初始化零值" tabindex="-1"><a class="header-anchor" href="#_3-初始化零值" aria-hidden="true">#</a> 3. 初始化零值</h2><p>给对象分配完内存后，JVM 必须要 <strong>将分配到的内存空间都初始化为零值</strong>（如果使用了 TLAB，那初始化零值的工作也可以提前到 TLAB 分配时顺便进行）。</p><p>为什么要事先初始化为零值呢？这样可以让对象的实例字段在代码中可以 <strong>不赋初值就能直接使用</strong>，访问到的就是这些字段类型对应的零值。</p><h2 id="_4-填充对象头信息" tabindex="-1"><a class="header-anchor" href="#_4-填充对象头信息" aria-hidden="true">#</a> 4. 填充对象头信息</h2><p>接下来，JVM 就需要 <strong>在对象的对象头（Object Header）中填充该对象的一些信息</strong>，包括：</p><ul><li><strong>该对象对应的是哪个类的实例</strong>？</li><li><strong>如何找到类的元数据信息</strong>？</li><li><strong>对象的哈希码</strong>（实际上会延迟到真正调用 <code>Object::hashCode()</code> 时才计算）；</li><li><strong>对象的 GC 分代年龄</strong>；</li><li><strong>是否启用偏向锁</strong>；</li><li><strong>其他信息</strong>。</li></ul><div class="hint-container info"><p class="hint-container-title">补充：对象在堆内存中的内存布局是怎样的？</p><p>在 JVM 中，对象在堆内存中可以划分为三个部分：</p><ul><li><strong>对象头</strong>（Header）；</li><li><strong>实例数据</strong>（Instance Data）；</li><li><strong>对齐填充</strong>（Padding）。</li></ul><p><strong>对象头</strong> 部分包含两类信息：</p><ul><li><strong>对象自身的运行时数据</strong>，比如哈希码、GC 分代年龄、锁状态标志、偏向线程 ID 等。这部分信息称为 <strong>Mark Word</strong>；</li><li><strong>类型指针</strong>，即对象指向它类型元数据的指针，<strong>通过该指针来确定该对象是哪个类的实例</strong>。</li></ul><blockquote><p>如果对象是一个数组，那么对象头中还会包含该数组的长度信息。</p></blockquote><p><strong>实例数据</strong> 就是对象真正存储的有效信息了，即 <strong>对象的字段信息</strong>（包括从父类继承下来的）。</p><p><strong>对齐填充</strong> 不是必须的，只是用来占位，因为 JVM 的自动内存管理系统要求对象的起始地址必须是 8 字节的整数倍，即 <strong>对象的大小必须是 8 字节的整数倍</strong>。</p><blockquote><p>对象头部分已经被精心设计成 8 字节的整数倍了，所以对齐填充主要是填充实例数据部分。</p></blockquote><blockquote><p>内存对齐可以让处理器在读取数据时直接按照规定的大小一次性读取，而不用做额外的处理，提高了效率。</p></blockquote></div><h2 id="_5-执行构造函数" tabindex="-1"><a class="header-anchor" href="#_5-执行构造函数" aria-hidden="true">#</a> 5. 执行构造函数</h2><p>经过了上面的步骤，从 JVM 的视角看，一个新对象已经创建好了。但从我们程序员的视角来看，对象的创建才刚刚开始，因为 <strong>此时所有的字段都是零值，还没有执行我们的构造函数</strong>（对应 Class 文件中的 <code>&lt;init&gt;()</code> 方法）。</p><p>所以接下来就会 <strong>执行 <code>&lt;init&gt;()</code> 方法，按照程序员的意愿来对对象进行初始化</strong>，这样一个真正可用的对象就被完全构造出来了。</p><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> 6. 总结</h2><p>最后用一张流程图来概括一个对象被创建的过程：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202308201141420.png" alt="image-20230820114138786" loading="lazy"></p>',37);function u(f,b){const n=a("router-link");return l(),i("div",null,[t("details",c,[p,t("nav",h,[t("ul",null,[t("li",null,[o(n,{to:"#_0-概览"},{default:r(()=>[s("0. 概览")]),_:1})]),t("li",null,[o(n,{to:"#_1-类加载检查"},{default:r(()=>[s("1. 类加载检查")]),_:1})]),t("li",null,[o(n,{to:"#_2-内存分配"},{default:r(()=>[s("2. 内存分配")]),_:1}),t("ul",null,[t("li",null,[o(n,{to:"#_2-1-指针碰撞"},{default:r(()=>[s("2.1 指针碰撞")]),_:1})]),t("li",null,[o(n,{to:"#_2-2-空闲列表"},{default:r(()=>[s("2.2 空闲列表")]),_:1})]),t("li",null,[o(n,{to:"#_2-3-并发修改问题"},{default:r(()=>[s("2.3 并发修改问题")]),_:1})])])]),t("li",null,[o(n,{to:"#_3-初始化零值"},{default:r(()=>[s("3. 初始化零值")]),_:1})]),t("li",null,[o(n,{to:"#_4-填充对象头信息"},{default:r(()=>[s("4. 填充对象头信息")]),_:1})]),t("li",null,[o(n,{to:"#_5-执行构造函数"},{default:r(()=>[s("5. 执行构造函数")]),_:1})]),t("li",null,[o(n,{to:"#_6-总结"},{default:r(()=>[s("6. 总结")]),_:1})])])])]),_])}const V=e(d,[["render",u],["__file","对象是如何创建出来的.html.vue"]]);export{V as default};
