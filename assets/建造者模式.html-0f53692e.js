import{_ as p,Y as o,Z as l,a2 as n,a0 as a,a3 as e,$ as c,E as i,a1 as t}from"./framework-cb320332.js";const u={},k={class:"hint-container details"},r=n("summary",null,"本文内容",-1),d={class:"table-of-contents"},m=c(`<h2 id="_1-为什么需要建造者模式" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要建造者模式" aria-hidden="true">#</a> 1. 为什么需要建造者模式？</h2><p>在开发时，我们创建一个对象常用的方式就是 new，new 一个对象是通过构造函数来完成的。<strong>那什么情况下不适合用构造函数来创建对象呢</strong>？</p><p>假设现在需要设计一个 <strong>资源池配置类 ResourcePoolConfig</strong>（类比线程池、连接池等，资源可以复用，用完后归还即可），里面有如下几个变量，<strong>有些是必填项、有些有默认值</strong>（可填可不填）：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304031804471.png" alt="image-20230403180436515"></p><p>这个类的设计主要是要考虑如何处理非必填变量，一个比较简单的方法是提供一个全参构造器，规定传进来的变量如果为 null，就使用默认值。具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourcePoolConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_TOTAL</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_IDLE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MIN_IDLE</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxTotal <span class="token operator">=</span> <span class="token constant">DEFAULT_MAX_TOTAL</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle <span class="token operator">=</span> <span class="token constant">DEFAULT_MAX_IDLE</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle <span class="token operator">=</span> <span class="token constant">DEFAULT_MIN_IDLE</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ResourcePoolConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> maxTotal<span class="token punctuation">,</span> <span class="token class-name">Integer</span> maxIdle<span class="token punctuation">,</span> <span class="token class-name">Integer</span> minIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;name should not be empty.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxTotal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxTotal <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;maxTotal should be positive.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maxTotal <span class="token operator">=</span> maxTotal<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;maxIdle should be negative.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdle <span class="token operator">=</span> maxIdle<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;minIdle should be negative.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>minIdle <span class="token operator">=</span> minIdle<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// getter 略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，就设计完成了。但是如果 ResourcePoolConfig 类的 <strong>可配置参数变得更多，这样就会使得构造函数得参数列表变得很长，影响代码的可读性和易用性</strong>。在使用这个构造函数时就得非常小心的填写参数，导致非常隐蔽的 bug 出现，就像下面这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ResourcePoolConfig</span> config <span class="token operator">=</span> 
    <span class="token keyword">new</span> <span class="token class-name">ResourcePoolConfig</span><span class="token punctuation">(</span><span class="token string">&quot;dbconnectionpool&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span>，<span class="token boolean">false</span>， <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>想解决参数列表过长的问题，其实提供 setter 方法就可以解决</strong>。我们让构造函数的参数列表只包含必须填写的变量，而其他非必填的变量，给用户暴露 set 方法进行注入，可以让用户自行选择设不设置。我们参数的校验逻辑也要移动到相应的 setter 方法中去。</p><p>使用方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ResourcePoolConfig 使用举例</span>
<span class="token class-name">ResourcePoolConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourcePoolConfig</span><span class="token punctuation">(</span><span class="token string">&quot;dbconnectionpool&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一切都看起来很完美，但是，需求总是在不断变化的，如果我们还有如下要求：</p><ul><li><strong>必填项变多了</strong>，此时构造函数的参数列表还是会出现过长的情况。<strong>如果把必填项也通过 set 方法注入的话，那怎么知道这些必填项到底有没有全部赋值呢</strong>？比如用户忘记调用了几个必填项的 set 方法。</li><li><strong>配置项之间存在依赖关系</strong>，如果现在规定，用户设置了非必填变量的其中一个，就必须也要设置另外两个；或者规定 maxIdle 必须要小于等于 maxTotal（本来就要考虑的）。这时这些依赖关系的检验逻辑代码应该放在哪里呢？</li><li><strong>把类对象改为是不可变对象</strong>，如果我们希望 ResourcePoolConfig 类对象在创建好后，就不能在修改内部的属性值了，此时我们就不能暴露 setter 方法了。</li></ul><p><strong>建造者模式</strong> 就可以很好地解决上述几个要求。</p><h2 id="_2-什么是建造者模式" tabindex="-1"><a class="header-anchor" href="#_2-什么是建造者模式" aria-hidden="true">#</a> 2. 什么是建造者模式？</h2><p><strong>建造者模式</strong> 的定义非常抽象，也没什么用，但是还是需要了解一下，它的定义是：<strong>将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示</strong>。</p><blockquote><p>个人觉得可以把 “表示” 理解为不同的参数、变量之间的依赖关系等。</p></blockquote><p>现在可以丢掉上面这个抽象的定义了，我们来看看如何使用建造者模式解决上面的需求。</p><p>我们可以 <strong>新定义一个 Builder 类，把校验逻辑都放到 Builder 类中，先创建建造者，并通过 setter 方法设置建造者的变量值，然后再使用 <code>build()</code> 方法真正创建对象，在 <code>build()</code> 方法中做必填项的检验、依赖关系的检验等</strong>。</p><p>接着，我们需要 <strong>把 ResourcePoolConfig 类的构造函数私有化，这样就只能通过建造者来创建类对象</strong>。而且 <strong>ResourcePoolConfig 类不要提供任何 setter 方法，这样创建出来的对象就无法被修改了</strong>（不可变对象）。</p><p>使用建造者模式后，具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourcePoolConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxTotal<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ResourcePoolConfig</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builder<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxTotal <span class="token operator">=</span> builder<span class="token punctuation">.</span>maxIdle<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdle <span class="token operator">=</span> builder<span class="token punctuation">.</span>maxIdle<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>minIdle <span class="token operator">=</span> builder<span class="token punctuation">.</span>minIdle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// getter 方法略，不提供 setter 方法</span>

    <span class="token doc-comment comment">/**
     * ResourcePoolConfig 的建造者，当然也可以将 Builder 类
     * 设计成独立的非内部类 ResourcePoolConfigBuilder。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_TOTAL</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_IDLE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MIN_IDLE</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> maxTotal <span class="token operator">=</span> <span class="token constant">DEFAULT_MAX_TOTAL</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle <span class="token operator">=</span> <span class="token constant">DEFAULT_MAX_IDLE</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle <span class="token operator">=</span> <span class="token constant">DEFAULT_MIN_IDLE</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 真正创建对象的方法。校验逻辑放到此方法来做，包括必填项校验、依赖关系校验等
         */</span>
        <span class="token keyword">public</span> <span class="token class-name">ResourcePoolConfig</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;name should not be empty.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle <span class="token operator">&gt;</span> maxTotal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;maxIdle should less equals maxTotal.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle <span class="token operator">&gt;</span> maxTotal <span class="token operator">||</span> minIdle <span class="token operator">&gt;</span> maxIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;minIdle should less equals maxIdle and maxTotal.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResourcePoolConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 以下是 Builder 对外提供的 setter 方法</span>
        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;name should not be empty.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxTotal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxTotal <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;maxTotal should be positive.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maxTotal <span class="token operator">=</span> maxTotal<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;maxIdle should be negative.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdle <span class="token operator">=</span> maxIdle<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token keyword">int</span> minIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;minIdle should be negative.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>minIdle <span class="token operator">=</span> minIdle<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Usage</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 抛出 IllegalArgumentException，因为 minIdle &gt; maxIdle</span>
        <span class="token class-name">ResourcePoolConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourcePoolConfig<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;dbconnectionpool&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建造者模式除了能解决上述需求外，还能 <strong>避免对象存在无效状态</strong>。例如定义一个长方形类，采用先创建再 set 的方式，就会导致第一个 set 之后，对象处于无效状态。具体代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// r is invalid</span>
r<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// r is invalid</span>
r<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	 <span class="token comment">// r is valid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里的无效状态会有什么影响呢？如果在并发场景下，不一次性设置好所有变量的值，那么线程就有可能获取到无效状态的对象。</p></blockquote><p>为了避免这种无效状态的存在，我们就需要使用构造函数一次性初始化好所有的成员变量。<strong>如果构造函数参数过多，那么就需要使用建造者模式一次性地创建对象，从而让对象一直处于有效状态</strong>。</p><p>不过，建造者模式有一个很明显的 <strong>缺点</strong>，那就是 <strong>代码有点重复</strong>，从上面的例子可以看出，ResourcePoolConfig 类中的成员变量，要在 Builder 类中又重新再定义一遍。所以，如果你不在意上面所提到的点，那么就可以使用原始方式，直接暴露 setter 方法让外部设置变量值来创建对象即可。</p><h2 id="_3-与工厂模式有何区别" tabindex="-1"><a class="header-anchor" href="#_3-与工厂模式有何区别" aria-hidden="true">#</a> 3. 与工厂模式有何区别？</h2><p>建造者模式与工厂模式都是用来负责创建对象的工作，它们有什么区别呢？</p><p>实际上，<strong>工厂模式是用来创建类型相关，但创建出来的对象是不同的（继承同一父类的不同子类对象），由给定的参数来决定创建哪种具体的对象</strong>。而 <strong>建造者模式是用来创建一种类型的复杂对象，通过设置不同的可选参数，“定制化” 地创建不同的对象</strong>（注意这里类的类型是相同的）。</p><p>一个很典型的例子就是：客户到 KFC 点餐，利用工厂模式，可以根据客户不同的选择，来制作不同的食物，比如汉堡、披萨、炸鸡（这些都可以看作是 Food 类的子类）。而对于披萨来说，客户又有各种配料可以定制，比如奶酪、西红柿、起司等，通过建造者模式，可以根据用户选择的不同配料来制作披萨（虽然都是披萨（类型相同），但制作出来的披萨是不同的（对象不同））。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>建造者模式的原理和实现都是比较简单的，重要的是需要掌握它的应用场景。</p><p>如果类中有很多属性，避免构造函数参数列表过长，影响代码的可读性和易用性，可以先考虑使用 set 方法解决。但是，<strong>如果还有如下需求，那么就可以考虑建造者模式了</strong>：</p><ul><li><strong>必填项变多了</strong>，此时构造函数的参数列表还是会出现过长的情况。<strong>如果把必填项也通过 set 方法注入的话，那么就不知道这些必填项到底有没有全部赋值</strong>。</li><li><strong>配置项之间存在依赖关系</strong>，如果现在规定，用户设置了非必填变量的其中一个，就必须也要设置另外两个；或者规定某属性必须要小于等于另一属性等。这时这些依赖关系的检验逻辑代码就没地方可放了。</li><li><strong>把类对象改为是不可变对象</strong>，如果我们希望类对象在创建好后，就不能在修改内部的属性值了，此时我们就不能暴露 setter 方法了。</li></ul><p>如果 <strong>需要保证对象一直处于有效状态</strong>，就只能使用构造函数创建对象，而不能一步一步的调用 set 方法，当使用构造函数参数列表过长时，也可以考虑使用建造者模式。</p><p>此外，还讲到了工厂模式和建造者模式的区别，具体区别如下：</p><ul><li><strong>工厂模式是用来创建类型相关，但创建出来的对象是不同的（继承同一父类的不同子类对象），由给定的参数来决定创建哪种具体的对象</strong>。</li><li><strong>建造者模式是用来创建一种类型的复杂对象，通过设置不同的可选参数，“定制化” 地创建不同的对象</strong>（注意这里类的类型是相同的）。</li></ul>`,40);function v(b,g){const s=i("router-link");return o(),l("div",null,[n("details",k,[r,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#_1-为什么需要建造者模式"},{default:e(()=>[t("1. 为什么需要建造者模式？")]),_:1})]),n("li",null,[a(s,{to:"#_2-什么是建造者模式"},{default:e(()=>[t("2. 什么是建造者模式？")]),_:1})]),n("li",null,[a(s,{to:"#_3-与工厂模式有何区别"},{default:e(()=>[t("3. 与工厂模式有何区别？")]),_:1})]),n("li",null,[a(s,{to:"#_4-总结"},{default:e(()=>[t("4. 总结")]),_:1})])])])]),m])}const y=p(u,[["render",v],["__file","建造者模式.html.vue"]]);export{y as default};
