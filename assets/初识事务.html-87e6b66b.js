import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c,b as n,e as o,w as t,d as s,a as d}from"./app-c466f23a.js";const p={},u={class:"hint-container details"},g=n("summary",null,"本文内容",-1),_={class:"table-of-contents"},k=d(`<h2 id="_1-什么是事务" tabindex="-1"><a class="header-anchor" href="#_1-什么是事务" aria-hidden="true">#</a> 1. 什么是事务？</h2><p>在 MySQL 数据库中，事务是指 <strong>对数据库表的一系列操作都是一个单独的工作单元</strong>。主要用于在批量操作多个表时，需要让这些操作成为一个独立的工作单元，<strong>保证它们要么全部执行，要么全部不执行</strong>。</p><p>举个例子，现在有三个表 user、video、post，我们在删除 user 的时候，希望把该 user 的 video 和 post 一并删除，这将涉及到三个表的 delete 操作（由于 user 与 video、post 是一对多的关系，所以 video 和 post 又涉及多个 delete 操作），这三个操作就需要使用事务，否则可能出现 user 被删除，而其 video/post 没被删除的情况。</p><p><strong>MySQL 中事务是在存储引擎实现的</strong>，MySQL 支持多种引擎，但不是都支持事务，比如 MyISAM 就不支持事务，而现在常用的 InnoDB 是支持的。我下面讲的事务都是基于 InnoDB 的。</p><h2 id="_2-事务控制语句" tabindex="-1"><a class="header-anchor" href="#_2-事务控制语句" aria-hidden="true">#</a> 2. 事务控制语句</h2><p>在 MySQL 中会默认开启 <strong>隐式事务</strong>，即在执行 insert、update 或 delete 语句的时候，会自动开启一个事务来执行这些操作，执行完后默认是会 <strong>自动提交</strong> 的，即执行完一句 SQL 后会马上执行 COMMIT 操作。</p><p>所以，要显示地开启一个事务有两种方式：</p><ul><li><p>使用开启事务的命令，即 <strong><code>BEGIN</code> 或 <code>START TRANSACTION</code></strong>；</p></li><li><p><strong>执行 <code>SET AUTOCOMMIT=0</code> 来禁止当前会话的自动提交</strong>，记得在事务结束位置提交事务。</p></li></ul><div class="hint-container danger"><p class="hint-container-title">注意</p><p><strong>执行 <code>SET AUTOCOMMIT=0</code> 后，此后的所有 SQL 语句都会包含在一个事务中</strong>，哪怕是 select，也要显示 commit。</p><p>执行了 <code>BEGIN/START TRANSACTION</code> 命令并不代表事务立马就启动了，<strong>只有在执行 DML（CRUD）时，才真正启动了事务</strong>。如果想立马启动事务，可以使用 <code>start transaction with consistent snapshot</code> 命令。</p></div><p>来看看事务的控制语句都有哪些：</p><ul><li><code>BEGIN</code> 或 <code>START TRANSACTION</code>：显式开启一个事务；</li><li><code>COMMIT</code>：提交事务，保证整个事务中对数据库的所有修改是永久的；</li><li><code>ROLLBACK</code>：回滚事务，会结束事务，保证数据库恢复到事务执行前的状态；</li><li><code>SAVEPOINT identifier</code>：在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li><li><code>RELEASE SAVEPOINT identifier</code>：删除一个保存点；</li><li><code>ROLLBACK TO identifier</code>：把事务回滚到某个标记点。</li></ul><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/https%2Fwww.runoob.com%2Fwp-content%2Fuploads%2F2014%2F03-2023_12_06-1701842077.webp" alt="img" loading="lazy"></p><p>一个简单的事务例子：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开始事务</span>
<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>	<span class="token comment">-- or START TRANSACTION;</span>

<span class="token comment">-- 执行一些 SQL 语句</span>
<span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">-- 判断是否要提交还是回滚</span>
<span class="token keyword">IF</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token keyword">THEN</span>
    <span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token comment">-- 提交事务</span>
<span class="token keyword">ELSE</span>
    <span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span> <span class="token comment">-- 回滚事务</span>
<span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-事务的四大特性" tabindex="-1"><a class="header-anchor" href="#_3-事务的四大特性" aria-hidden="true">#</a> 3. 事务的四大特性</h2><p>事务必须满足 <strong>ACID（Atomicity、Consistency、Isolation、Durability），即原子性、一致性、隔离性、持久性</strong>。它们的含义分别如下：</p><ul><li><strong>Atomicity 原子性</strong>：一个事务中的所有操作是原子的，<strong>要么全部完成，要么全部不完成，不会结束在某个中间环节</strong>。如果事务过程中发生了 <strong>任一错误</strong>，则整个事务会被 <strong>回滚</strong>，以还原到原始状态；</li><li><strong>Consistency 一致性</strong>：一个事务操作前和操作后，数据都必须满足 <strong>完整性约束</strong>，这个完整性约束包括 <strong>实体完整性</strong>（满足字段的约束条件）、参照完整性（确保外键关联的表的键存在于被关联的表中）、<strong>用户自定义的完整性</strong>（业务逻辑，比如转账，汇款方减 100，保证收款方加 100）等；</li><li><strong>Isolation 隔离性</strong>：在 <strong>多个事务并发执行时</strong>，隔离性可以保证其操作 <strong>不会互相影响</strong>，每个事务都有一个 <strong>独立完整的数据空间</strong>，对其他并发事务是隔离的。隔离的效果根据不同的 <strong>隔离级别</strong> 有所不同；</li><li><strong>Durability 持久性</strong>：一个事务结束后，<strong>对数据的修改就是永久的</strong>，即使数据库系统发生故障 <strong>数据也不会丢失</strong>。</li></ul><h2 id="_4-acid-分别靠什么保证" tabindex="-1"><a class="header-anchor" href="#_4-acid-分别靠什么保证" aria-hidden="true">#</a> 4. ACID 分别靠什么保证？</h2><p>MySQL 的 InnoDB 存储引擎支持事务，那么它是通过什么来保证事务的 ACID 的呢？</p>`,19),h=n("strong",null,"持久性",-1),m=n("strong",null,"redo log",-1),E=n("strong",null,"redo log 有 crash-safe 的能力",-1),v={href:"https://code.0x3f4.run/backend/database/mysql/log/redo%20log%EF%BC%9A%E5%B4%A9%E6%BA%83%E6%81%A2%E5%A4%8D%E7%A5%9E%E5%99%A8.html#_6-checkpoint",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"原子性",-1),A=n("strong",null,"undo log",-1),T=n("strong",null,"undo log 会将事务 SQL 执行前的数据记录下来",-1),y={href:"https://code.0x3f4.run/backend/database/mysql/log/undo%20log%EF%BC%9A%E4%B8%96%E4%B8%8A%E7%9C%9F%E6%9C%89%E5%90%8E%E6%82%94%E8%8D%AF.html",target:"_blank",rel:"noopener noreferrer"},I=n("li",null,[n("strong",null,"隔离性"),s(" 是通过 "),n("strong",null,"MVCC（多版本并发控制）和锁机制"),s(" 来保证的，下一篇文章详细讲解；")],-1),S=n("li",null,[n("strong",null,"一致性"),s(" 是通过 "),n("strong",null,"持久性、原子性、隔离性，以及开发人员的正确编码"),s(" 来共同保证的。")],-1);function f(C,w){const e=l("router-link"),a=l("ExternalLinkIcon");return i(),c("div",null,[n("details",u,[g,n("nav",_,[n("ul",null,[n("li",null,[o(e,{to:"#_1-什么是事务"},{default:t(()=>[s("1. 什么是事务？")]),_:1})]),n("li",null,[o(e,{to:"#_2-事务控制语句"},{default:t(()=>[s("2. 事务控制语句")]),_:1})]),n("li",null,[o(e,{to:"#_3-事务的四大特性"},{default:t(()=>[s("3. 事务的四大特性")]),_:1})]),n("li",null,[o(e,{to:"#_4-acid-分别靠什么保证"},{default:t(()=>[s("4. ACID 分别靠什么保证？")]),_:1})])])])]),k,n("ul",null,[n("li",null,[h,s(" 是通过 "),m,s("（重做日志）来保证的，"),E,s("，即可以保证即使系统断电崩溃，数据也是不会丢失的（具体看 "),n("a",v,[s("redo log：崩溃恢复神器"),o(a)]),s("）；")]),n("li",null,[b,s(" 是通过 "),A,s("（回滚日志）来保证的，"),T,s("，后续需要回滚的时候，通过 undo log 即可恢复到事务执行前的状态了（具体看 "),n("a",y,[s("undo log：世上真有后悔药"),o(a)]),s("）；")]),I,S])])}const B=r(p,[["render",f],["__file","初识事务.html.vue"]]);export{B as default};
