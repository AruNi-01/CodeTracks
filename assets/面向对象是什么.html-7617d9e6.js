import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,e as n,b as a,w as t,a as l,d as p}from"./app-70e0ac83.js";const u={},r={class:"hint-container details"},k=n("summary",null,"本文内容",-1),d={class:"table-of-contents"},v=l(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>其实，面向对象是一个很广泛的概念，它包括面向对象编程、面向对象编程语言、面向对象分析和面向对象设计等。我们常说的面向对象一般默认指的是面向对象编程。</p></div><h2 id="_1-面向对象编程和面向对象编程语言" tabindex="-1"><a class="header-anchor" href="#_1-面向对象编程和面向对象编程语言" aria-hidden="true">#</a> 1. 面向对象编程和面向对象编程语言</h2><p><strong>面向对象编程</strong>（OOP，Object Oriented Programming）是一种 <strong>编程范式或编程风格</strong>，其中有两个非常重要、基础的概念，叫 <strong>类</strong>（class）和 <strong>对象</strong>（object）。</p><p>而 <strong>面向对象编程语言</strong>（OOPL，Object Oriented Programming Language）是指 <strong>支持类或对象的语法机制，并有现成的语法能方便地实现面向对象编程的四大特性（封装、抽象、继承、多态）的编程语言</strong>。</p><p>常见的 OOPL 有 Java、C++、Golang 等；非 OOPL 有 C。</p><p>需要注意的是，<strong>OOP 和 OOPL 本身并没有强制性的关联</strong>。也就是说，不同面向对象编程语言，也可以进行面向对象编程；反过来，即使使用了面向对象编程语言，写出来的代码也不一定是面向对象编程风格的。（后续会详细举例讲解）</p><p>其中，理解 OOP 和 OOPL，其中最重要的是理解面向对象编程的四大特性：<strong>封装、抽象、继承、多态</strong>。</p><blockquote><p>可能你会疑惑为什么有抽象，其实抽象并不是面向对象编程特有，在一些架构设计中也会有。不过我们没必要纠结，关键是看它存在的意义、能解决什么问题。</p></blockquote><h2 id="_2-面向对象分析和面向对象设计" tabindex="-1"><a class="header-anchor" href="#_2-面向对象分析和面向对象设计" aria-hidden="true">#</a> 2. 面向对象分析和面向对象设计</h2><p>跟面向对象相关的还有两个概念，就是面向对象分析（OOA，Object Oriented Analysis）和面向对象设计（OOD，Object Oriented Design）。</p><p>对于这两个概念，我们只需要从字面上去理解就好了，分析和设计最终的产出就是类的设计，比如拆解出了哪些类，每个类有哪些属性、方法，类与类之间的关系，类之间如何交互等。</p><p>具体来说，<strong>面向对象分析就是搞清楚要做什么，面向对象设计就是搞清楚要怎么做，而面向对象编程就是将分析和设计的结果翻译成代码的过程</strong>。</p><h2 id="_3-oop-的四大特性" tabindex="-1"><a class="header-anchor" href="#_3-oop-的四大特性" aria-hidden="true">#</a> 3. OOP 的四大特性</h2><p>我们在进行面向对象编程的时候，一个很重要的内容就是合理使用 <strong>OOP 的四大特性</strong>，分别是 <strong>封装、抽象、继承、多态</strong>。</p><h3 id="_3-1-封装" tabindex="-1"><a class="header-anchor" href="#_3-1-封装" aria-hidden="true">#</a> 3.1 封装</h3><div class="hint-container tip"><p class="hint-container-title">封装的定义是什么？</p></div><p><strong>封装</strong>，也称为 <strong>信息隐藏或数据访问保护</strong>，具体在代码中的体现就是：</p><ul><li>类通过 <strong>暴露固定有限的访问接口</strong>，而 <strong>外部仅能通过类提供的方式（函数）来访问内部信息或数据</strong>。</li></ul><p>下面举一个实际的例子，来看看什么是封装。</p><p>我们在设计一个虚拟钱包 Wallet 类的时候，一般都会进行如下设计：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wallet</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">long</span> createTime<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> balance<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">long</span> balanceLastModifiedTime<span class="token punctuation">;</span>
  <span class="token comment">// ...省略其他属性...</span>

  <span class="token keyword">public</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>createTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>balanceLastModifiedTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>createTime<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getBalanceLastModifiedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balanceLastModifiedTime<span class="token punctuation">;</span>  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increaseBalance</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> increasedAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>increasedAmount<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidAmountException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>increasedAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>balanceLastModifiedTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decreaseBalance</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> decreasedAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>decreasedAmount<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidAmountException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>decreasedAmount<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InsufficientAmountException</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>decreasedAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>balanceLastModifiedTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义钱包的四个属性：id、createTime、balance、balanceLastModifiedTime，这四个属性一般都使用 private 修饰；</li><li>定义钱包的操作方法，可提供的方法有（见名知意）： <ul><li>String getId()</li><li>long getCreateTime()</li><li>BigDecimal getBalance()</li><li>long getBalanceLastModifiedTime()</li><li>void increaseBalance(BigDecimal increasedAmount)</li><li>void decreaseBalance(BigDecimal decreasedAmount)</li><li>另外，还提供一个无参构造函数，里面会对属性做初始化</li></ul></li></ul><p>从业务角度来说，id 和 createTime 是在创建钱包的时候就确定好了，<strong>之后不应该随意改动</strong>，所以我们一般 <strong>不会在 Wallet 类中暴漏 id 和 createTime 这两个属性的任何修改方法</strong>，比如 set 方法。而且这两个属性的初始化设置，对于 Wallet 类的调用者来说也应该是透明的，所以 <strong>在 Wallet 类的无参构造器内部将该属性初始化好，而不是通过构造函数的参数来进行外部赋值</strong>。</p><p>对于 <strong>余额 balance</strong> 这个属性，从业务的角度来说，<strong>只能增或者减，不会被重新设置</strong>。所以在 Wallet 类中，只暴露了 <code>increaseBalance()</code> 和 <code>decreaseBalance()</code> 方法，并没有暴露 set 方法。</p><p>对于 balanceLastModifiedTime 这个属性，<strong>它完全是跟 balance 这个属性的修改操作绑定在一起的</strong>。只有在 balance 修改的时候，这个属性才会被修改。所以，我们把 balanceLastModifiedTime 这个属性的修改操作完全封装在了 <code>increaseBalance()</code> 和 <code>decreaseBalance()</code> 两个方法中，不对外暴露任何修改这个属性的方法和业务细节。这样也可以保证 balance 和 balanceLastModifiedTime 两个数据的一致性。</p><p>可以发现，对于封装这个特性，需要编程语言本身提供一定的语法机制来支持，即 <strong>访问权限控制</strong>。</p><p>上面例子中的 private、public 等关键字，就定义了某个属性或方法的访问权限。private 修饰的属性只能在本类中访问，可以保护其不被本类之外的代码直接访问。</p><p>相反，如果没有了权限控制，那么任意外部代码都可以通过实例对象 <code>.</code> 属性进行修改，例如 <code>wallet.id = 10</code>，这样 <strong>直接访问、修改属性</strong>，就 <strong>没法达到隐藏信息和保护数据的目的了</strong>，也就无法支持封装特性了。</p><div class="hint-container tip"><p class="hint-container-title">封装的意义是什么？解决了什么问题？</p></div><p>讲完了封装的定义，我们需要知道封装用来解决了什么问题。</p><p>可以通过反证法来说明封装的意义，即如果没有封装，对类中的属性不做限制，那么类属性就可能会在各种不同地方、被各种不同的方式修改，这样会 <strong>影响代码的可读性、可维护性</strong>。</p><p>其次，类仅仅暴露出有限的方法，也能提高类的 <strong>易用性</strong>。如果把所有类属性都暴露给调用者，调用者操作这些属性时就要对该类的细节有足够的了解，这对调用者来说也是一种负担。而如果把属性封装起来，暴露一些简单易用的方法给调用者，调用者一看就知道该方法是用来干什么的，也就大大降低了使用难度和减少了用错概率。</p><blockquote><p>就比如我们使用的电脑，就把具体的细节隐藏（封装）起来了，只用给用户暴露简单的屏幕、键盘、鼠标，就能方便的操作电脑，大大增加了易用性。</p></blockquote><h3 id="_3-2-抽象" tabindex="-1"><a class="header-anchor" href="#_3-2-抽象" aria-hidden="true">#</a> 3.2 抽象</h3><div class="hint-container tip"><p class="hint-container-title">抽象的定义是什么？</p></div><p>封装讲的是如何隐藏信息、保护数据，而 <strong>抽象</strong> 讲的是 <strong>如何隐藏方法的具体实现</strong>，让调用者只需关心方法提供了什么功能，而不需要知道这些功能是如何实现的。</p><p>在 OOP 中，实现抽象主要通过 <strong>接口类</strong> 或 <strong>抽象类</strong> 这两种语法机制。</p><p>下面举个图片存储的例子来说明。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPictureStorage</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">savePicture</span><span class="token punctuation">(</span><span class="token class-name">Picture</span> picture<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Image</span> <span class="token function">getPicture</span><span class="token punctuation">(</span><span class="token class-name">String</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">deletePicture</span><span class="token punctuation">(</span><span class="token class-name">String</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">modifyMetaInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> pictureId<span class="token punctuation">,</span> <span class="token class-name">PictureMetaInfo</span> metaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureStorage</span> <span class="token keyword">implements</span> <span class="token class-name">IPictureStorage</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...省略其他属性...</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">savePicture</span><span class="token punctuation">(</span><span class="token class-name">Picture</span> picture<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Image</span> <span class="token function">getPicture</span><span class="token punctuation">(</span><span class="token class-name">String</span> pictureId<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deletePicture</span><span class="token punctuation">(</span><span class="token class-name">String</span> pictureId<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyMetaInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> pictureId<span class="token punctuation">,</span> <span class="token class-name">PictureMetaInfo</span> metaInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用者在使用图片存储功能时，<strong>只需要了解 IPictureStorage 接口提供了哪些方法</strong>，而不需要去实现类 PictureStorage 中看方法的具体实现细节。</li></ul><p>其实，抽象很容易实现，<strong>并不是非得依靠接口类或抽象类</strong>。因为其实 <strong>函数本身就是一种抽象</strong>，调用者通过函数名（加上注释或文档）就能了解该方法的功能，而不需要去查看函数包裹的具体的实现逻辑。</p><p>所以，为什么有些时候会把抽象排除在面向对象的特性之外，就是因为抽象是一个很通用的设计思想，并不单单用在 OOP 中，只要编程语言的语法中提供 <strong>函数</strong>，就可以实现抽象。</p><div class="hint-container tip"><p class="hint-container-title">抽象的意义是什么？解决了什么问题？</p></div><p>实际上，抽象和封装都是人类处理复杂事物的一种有效手段。<strong>抽象这种只关注功能点而不关注具体实现</strong> 的设计思路，正好帮我们过滤掉许多非必要的信息。</p><p>所以，我们在定义类的方法时，需要有抽象思维，<strong>不要在方法定义中暴露太多的细节</strong>，以保证在需要改变方法的具体实现逻辑时，不用去修改其方法定义。例如方法 <code>getAliyunPictureUrl()</code> 就不具有抽象思维，如果某天需要换一个图片存储地址，比如存到华为云上，那这时这个方法名也要改成 <code>getHuaWeiyunPictureUrl()</code>。而如果定义一个比较抽象的方法 <code>getPictureUrl()</code>，即便内部的存储地址修改了，也不需要修改方法名。</p><h3 id="_3-3-继承" tabindex="-1"><a class="header-anchor" href="#_3-3-继承" aria-hidden="true">#</a> 3.3 继承</h3><div class="hint-container tip"><p class="hint-container-title">继承的定义是什么？</p></div><p><strong>继承</strong> 用来表示 <strong>类之间的 is-a 关系</strong>，比如猫是一种哺乳动物。</p><p>继承又可分为 <strong>单继承和多继承</strong>，单继承表示子类只能继承一个父类，多继承表示一个子类可以继承多个父类，比如猫既是哺乳动物，又是爬行动物。</p><p><strong>继承需要编程语言提供特定的语法机制</strong>，比如 Java 使用 extends 关键字来实现继承，C++ 用冒号（class B : public A），Python 用 parentheses()。</p><p>不过有些语言 <strong>只支持单继承</strong>，例如 <strong>Java</strong>，而 C++ 也支持多继承。</p><div class="hint-container info"><p class="hint-container-title">为什么 Java 只支持单继承？</p><p>因为多继承有一个副作用，就是当出现 <strong>钻石问题</strong>（菱形继承）时，会产生 <strong>二义性</strong>。</p><p>例如，类 B 和 类 C 继承自类 A，它们都重写了类 A 中的同一个方法，此时又来个类 D，它继承了类 B 和类 C，那么此时就形成了一个菱形继承。对于类 B 和类 C 中重写的这个方法，类 D 要继承哪一个？这就产生了歧义，所以 Java 并不支持多继承。</p><p>顺便说一下，<strong>Java 中支持多接口实现，因为接口中的方法，是抽象的（没写也默认），所以类在实现接口时，需要实现接口中的所有方法</strong>，这样该类只会调用自己实现的方法，而没有二义性。</p><blockquote><p><strong>JDK 1.8 之后，接口中的方法也可以有默认实现</strong>，但是如果一个类实现了多个接口，这些接口中又有相同的默认实现方法，那么 <strong>会强制让你实现该方法</strong>，所以也不会有二义性。</p></blockquote></div><div class="hint-container tip"><p class="hint-container-title">继承的意义是什么？解决了什么问题？</p></div><p>继承最大的一个好处就是 <strong>代码复用</strong>。例如 <strong>有两个类有一些相同的属性和方法，我们就可以将这些相同的部分抽取到父类中，让两个子类继承父类</strong>。这样，两个子类就可以重用父类中的代码，避免代码重复编写。</p><blockquote><p>ps：利用组合关系也能实现代码复用。</p></blockquote><p>但是，<strong>过度使用继承</strong>，继承层次过深，可能会导致 <strong>代码可读性差、可维护性变差</strong>。这时候为了知道一个类的功能，还要按照继承关系一层一层地网上查看父类、父类的父类......中的代码。还有，<strong>子类和父类高度耦合</strong>，修改父类的代码，会直接影响到子类。</p><p>所以，继承也是一个非常有争议的特性，很多人觉得继承是一种反模式，我们应该尽量少用，甚至不用。而是使用组合来解决代码复用问题。（后续讲解组合模式的时候会详细分析）</p><h3 id="_3-4-多态" tabindex="-1"><a class="header-anchor" href="#_3-4-多态" aria-hidden="true">#</a> 3.4 多态</h3><p><strong>多态</strong>指 <strong>在运行时子类可以替换父类，调用子类的方法实现</strong>。</p><p>多态同样需要编程语言的语法机制来实现，实现多态需要三个条件：</p><ul><li><strong>继承关系</strong>；</li><li><strong>父类对象引用（指向）子类对象</strong>；</li><li><strong>子类重写（override）父类中的方法</strong>。</li></ul><p>通过这三个条件，就可以实现 <strong>在方法调用时，子类替换父类，从而执行子类中重写的方法</strong>。</p><p>例如下面这个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;动物叫：~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;猫：喵喵喵~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;狗：汪汪汪~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Polymorphism</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Animal</span> animal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>猫：喵喵喵~~~
狗：汪汪汪~~~

Process finished with exit code 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，当调用父类的 <code>call()</code> 方法时，由于多态的特性，实际上调用的是子类重写的方法。</p><p>其实，多态除了利用 “继承+方法重写” 实现方式外，还可以使用接口类，或者 duck-typing 语法，只不过不是所有编程语言都支持。</p><p>下面再来看看接口类如何实现多态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Array</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token comment">//...省略其他方法...</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">LinkedListNode</span> head<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token comment">//...省略其他方法... </span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolyDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Iterator</span> arrayIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Iterator</span> linkedListIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>linkedListIterator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Iterator 是一个接口类，定义了一些遍历集合数据的方法；</li><li>Array 和 LinkedList 都实现了 Iterator，这样我们就可以通过 <strong>传递不同类型的实现类（Array/LinkedList）到 print(Iterator iterator) 函数中，从而实现动态的调用不同的 <code>next()</code>、<code>hasNext()</code> 实现</strong>。</li></ul><p>再来看看 duck-typing 是如何实现多态的，下面是一段 Python 代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Logger</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>“I write a log into <span class="token builtin">file</span><span class="token punctuation">.</span>”<span class="token punctuation">)</span>
        
<span class="token keyword">class</span> <span class="token class-name">DB</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">record</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>“I insert data into db<span class="token punctuation">.</span> ”<span class="token punctuation">)</span>
        
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>recorder<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recorder<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    logger <span class="token operator">=</span> Logger<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db <span class="token operator">=</span> DB<span class="token punctuation">(</span><span class="token punctuation">)</span>
    test<span class="token punctuation">(</span>logger<span class="token punctuation">)</span>
    test<span class="token punctuation">(</span>db<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，duck-typing 实现多态的方式非常灵活，<strong>Logger 和 DB 两个类没有任何关系</strong>，也没有所谓的父类或接口，<strong>只要它们两个类中都定义了 <code>record()</code> 方法</strong>，就可以被传递到 <code>test()</code> 方法中，在实际运行时执行对应的 <code>record()</code> 方法。</p><p><strong>只要两个类具有相同的方法，就可以实现多态</strong>，并不要求两个类之间有任何关系，这就是所谓的 <strong>duck-typing</strong>。</p><div class="hint-container tip"><p class="hint-container-title">多态的意义是什么？解决了什么问题？</p></div><p>多态一个很明显的特性，就是提高了代码的 <strong>可扩展性和复用性</strong>。</p><p>例如上面的 Iterator 例子，利用多态仅用一个 <code>print()</code> 函数就可以实现遍历打印不同类型（Array、LinkedList）集合的数据。<strong>当要添加一种集合类型的遍历打印时，只需要让这个集合也实现 Iterator 接口，重新实现自己的 <code>hasNext()</code>、<code>next()</code> 等方法就行了</strong>，不需要改动 <code>print()</code> 方法。这说明提高了代码的 <strong>可扩展性</strong>。</p><p>如果 <strong>不使用多态</strong>，那么就无法将不同类型的集合（Array、LinkedList）传递给同一个 <code>print()</code> 函数，那么我们就需要 <strong>针对每种集合都编写一个自己的 <code>print()</code> 函数</strong>。而利用多态便不用这么麻烦，这说明提高了代码的 <strong>复用性</strong>。</p><p>除此之外，多态也是很多设计模式、设计原则、编程技巧的代码实现基础，比如策略模式、基于接口而非实现编程、依赖倒置原则、里式替换原则、利用多态去掉冗长的 if-else 语句等等。（后续会讲解）</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>下面重点总结一下面向对象的四大特性：</p><p><strong>封装</strong>：</p><ul><li>封装是什么：隐藏信息、保护数据；</li><li>封装怎么做：暴露有限的接口和属性，需要编程语言提供权限控制；</li><li>为什么需要封装：提高可维护性、提高类的易用性。</li></ul><p><strong>抽象</strong>：</p><ul><li>抽象是什么：隐藏具体实现，调用者只需要关心功能，而无需关系具体实现；</li><li>抽象怎么做：通过接口或抽象类，或者方法本身；</li><li>为什么需要抽象：提高代码扩展性、可维护性、降低复杂度。</li></ul><p><strong>继承</strong>：</p><ul><li>继承是什么：表示类之间的 is-a 关系；</li><li>继承怎么做：利用语言提供的语法机制，例如 Java 的 extends；</li><li>为什么需要继承：提高代码复用。</li></ul><p><strong>多态</strong>：</p><ul><li>多态是什么：运行时子类替换父类，从而调用子类实现的方法；</li><li>多态怎么做：利用语言提供的语法机制，例如继承、接口类、duck-typing；</li><li>为什么需要多态：提高代码可扩展性和复用性。</li></ul>`,90);function m(g,b){const s=o("router-link");return c(),i("div",null,[n("details",r,[k,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#_1-面向对象编程和面向对象编程语言"},{default:t(()=>[p("1. 面向对象编程和面向对象编程语言")]),_:1})]),n("li",null,[a(s,{to:"#_2-面向对象分析和面向对象设计"},{default:t(()=>[p("2. 面向对象分析和面向对象设计")]),_:1})]),n("li",null,[a(s,{to:"#_3-oop-的四大特性"},{default:t(()=>[p("3. OOP 的四大特性")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_3-1-封装"},{default:t(()=>[p("3.1 封装")]),_:1})]),n("li",null,[a(s,{to:"#_3-2-抽象"},{default:t(()=>[p("3.2 抽象")]),_:1})]),n("li",null,[a(s,{to:"#_3-3-继承"},{default:t(()=>[p("3.3 继承")]),_:1})]),n("li",null,[a(s,{to:"#_3-4-多态"},{default:t(()=>[p("3.4 多态")]),_:1})])])]),n("li",null,[a(s,{to:"#_4-总结"},{default:t(()=>[p("4. 总结")]),_:1})])])])]),v])}const f=e(u,[["render",m],["__file","面向对象是什么.html.vue"]]);export{f as default};
