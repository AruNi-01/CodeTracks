import{_ as p,Y as o,Z as c,a2 as n,a0 as s,a3 as t,$ as l,E as i,a1 as e}from"./framework-cb320332.js";const u={},r={class:"hint-container details"},k=n("summary",null,"本文内容",-1),d={class:"table-of-contents"},v=l(`<h2 id="_1-设计" tabindex="-1"><a class="header-anchor" href="#_1-设计" aria-hidden="true">#</a> 1. 设计</h2><p>在上一章的设计中，将类和属性都配置到 XML 文件中，完成了通过 XML 配置文件的方式进行类的实例化操作及依赖属性注入。</p><p>我们在测试时，是使用 <code>DefaultListableBeanFactory</code> 和 <code>XmlBeanDefinitonReader</code> 的实例化对象来进行初始化 BeanFactory，读取配置文件以及注册 Bean。但这其实是 <strong>提供给 Spring 框架的，不可能把这些暴露给用户</strong>。而且目前也 <strong>不能对 Class 类、Bean 对象进行扩展操作</strong>。</p><p>比如现在如果需要提供一个可以在 Bean 初始化过程中，完成对 Bean 对象的扩展的功能，就很难做到自动化处理。所以我们 <strong>要把 Bean 对象扩展机制功能和对 Spring 框架上下文的包装融合起来</strong>，对外提供完整的服务。</p><p>所以，<strong>为了满足在 Bean 对象从注册到实例化的过程中执行用户自定义的操作，就需要在 Bean 的定义和初始化过程中插入接口类，这个接口再由外部去实现具体的具体功能逻辑</strong>。再结合对 <strong>Spring 框架上下文的处理能力</strong>，就可以满足我们的目标需求了。</p><blockquote><p>Spring 框架上下文具体指什么？看完下面的实现就明白了。</p></blockquote><p>因此，我们提供两个用于扩展功能的接口，分别是 <code>BeanFactoryPostProcessor</code> 和 <code>BeanPostProcessor</code>：</p><ul><li><code>BeanFactoryPostProcessor</code>：<strong>在 Bean 对象注册后，但未实例化之前，允许对 Bean 的定义信息 BeanDefinition 执行修改操作</strong>；</li><li><code>BeanPostProcessor</code>：<strong>在 Bean 对象实例化之后修改或替换 Bean 对象</strong>（这与后面要实现的 AOP 密切相关）。</li></ul><p>如果只是添加这两个接口，不做任何包装，那么对于使用者来说还是非常麻烦的。因此，还要设计 <strong>应用上下文</strong>，将这些繁杂的操作都交给上下文去做：</p><ul><li>加载 XML（其中包含注册 Bean）；</li><li>修改 BeanDefinition；</li><li>实现 Bean 的扩展（修改/替换 Bean 对象）；</li><li>Bean 的实例化；</li></ul><p>整体设计结构如下图所示：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303182200676.png" alt="img"></p><h2 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h2><p>在实现本章内容之前，需要先扩展一下 Bean 工厂模块，封装更多操作 BeanFactory 的接口，供应用上下文使用。</p><h3 id="_2-1-工厂扩展模块" tabindex="-1"><a class="header-anchor" href="#_2-1-工厂扩展模块" aria-hidden="true">#</a> 2.1 工厂扩展模块</h3><p>主要新增的接口有 5 个：</p><ul><li>+ListableBeanFactory：扩展 BeanFactory 的接口，提供 <code>getBeansOfType()</code>、<code>getBeanDefinitionNames()</code> 方法；</li><li>+HierarchicalBeanFactory：源码中提供了可以获取父类 BeanFactory 方法，属于一种扩展工厂的层次子接口；</li><li>+AutowireCapableBeanFactory：自动化处理 BeanFactory 的接口，用于执行 BeanPostProcessors 接口的实现类的扩展方法；</li><li>+ConfigurableBeanFactory：BeanFactory 配置接口，提供向 BeanPostProcessor 容器中添加执行器的方法；</li><li>+ConfigurableListableBeanFactory：除了 ConfigurableBeanFactory 之外，该类还提供了分析和修改 bean 定义，并预实例化单例的方法。</li></ul><h3 id="_2-2-上下文的实现" tabindex="-1"><a class="header-anchor" href="#_2-2-上下文的实现" aria-hidden="true">#</a> 2.2 上下文的实现</h3><p>由于上下文是一个新增的模块，所以都定义到 <code>context</code> 包下。</p><div class="hint-container tip"><p class="hint-container-title">一、定义上下文接口</p></div><p>主要新增两个接口：</p><ul><li>+ApplicationContext：ApplicationContext 本身是 Central 接口，但目前还不需要添加一些获取 ID 和父类上下文，所以暂时没有接口方法的定义。此外，该接口继承于 ListableBeanFactory，也就继承了关于 BeanFactory 方法，比如一些 getBean 的方法；</li><li>+ConfigurableApplicationContext：继承自 ApplicationContext，并提供了 <code>refresh()</code> 这个核心方法。接下来也是需要在上下文的实现中完成刷新容器的操作过程。</li></ul><div class="hint-container tip"><p class="hint-container-title">二、应用上下文的抽象类实现</p></div><p>在 <code>context</code> 包下新增 <code>support</code> 包，新增 AbstractApplicationContext 抽象类：</p><ul><li>继承自 DefaultResourceLoader，为了处理 <code>spring.xml</code> 配置资源的加载；</li><li>实现 ConfigurableApplicationContext，在 <code>refresh()</code> 定义具体实现过程；</li><li>提供 <code>refreshBeanFactory()</code>、<code>getBeanFactory()</code> 抽象方法。</li></ul><div class="hint-container tip"><p class="hint-container-title">三、获取 BeanFactory 和加载资源</p></div><p>新增 AbstractRefreshableApplicationContext 抽象类，继承自 AbstractApplicationContext，实现 <code>refreshBeanFactory()</code>，主要是获取 BeanFactory 和加载资源。</p><p>加载资源的方法 <code>loadBeanDefinition()</code> 定义为抽象方法，由子类具体实现。</p><div class="hint-container tip"><p class="hint-container-title">四、上下文中对配置信息的加载</p></div><p>新增 AbstractXmlApplicationContext 抽象类，继承自 AbstractRefreshableApplicationContext，实现 <code>loadBeanDefinition()</code> 方法，主要是使用 XmlBeanDefinitionReader 类，处理关于 XML 文件配置信息的操作。</p><p>同时，这里又留下一个抽象方法 <code>getConfigLocations()</code>，为了从入口上下文拿到配置信息的地址描述。</p><div class="hint-container tip"><p class="hint-container-title">五、应用上下文实现</p></div><p>新增类 ClassPathXmlApplicationContext，因为继承自 AbstractXmlApplicationContext，以及层层抽象类的功能分离实现后，此类的实现就简单多了，主要是对继承抽象类中方法的调用和提供了配置文件地址信息。</p><p><strong>ClassPathXmlApplicationContext 类是具体对外给用户提供的应用上下文方法</strong>。</p><div class="hint-container tip"><p class="hint-container-title">六、在 Bean 创建时完成前置和后置处理</p></div><p>让 AbstractAutowireCapableBeanFactory 抽象类 <strong>实现 AutowireCapableBeanFactory 接口</strong>，实现对 Bean 对象执行初始化前后的额外处理方法 <code>applyBeanPostProcessorsBeforeInitialization()</code> 和 <code>applyBeanPostProcessorsAfterInitialization</code>。</p><p>新增 <code>initializeBean()</code> 初始化 Bean，主要就是对上面两个额外处理方法的使用。</p><p>在 <code>createBean()</code> 方法中，添加执行 Bean 的初始化方法 <code>initializeBean()</code>。</p><h3 id="_2-3-目录结构" tabindex="-1"><a class="header-anchor" href="#_2-3-目录结构" aria-hidden="true">#</a> 2.3 目录结构</h3><p>到此，所有的设计就完成了，来看看目录结构的更变（绿色—新增、蓝色—修改）：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303201708602.png" alt="image-20230320170803428"></p><h3 id="_2-4-类结构图" tabindex="-1"><a class="header-anchor" href="#_2-4-类结构图" aria-hidden="true">#</a> 2.4 类结构图</h3><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303202149344.png" alt="step-06"></p><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><p>在 UserService 中添加一些其他依赖属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> uId<span class="token punctuation">;</span>

    <span class="token comment">// 新增加了 company、location，两个属性信息，便于测试 BeanPostProcessor、</span>
    <span class="token comment">// BeanFactoryPostProcessor 两个接口对 Bean 属性信息扩展的作用。</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> company<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>

    <span class="token comment">// 依赖 UserDao</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义类来实现 BeanPostProcessor 和 BeanFactoryPostProcessor，完成对 Bean 对象的修改和对 BeanDefinition 的修改。</p><p>MyBeanPostProcessor：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@desc</span>: 对实例化过程中的 Bean 对象做一些操作。
 * <span class="token keyword">@author</span>: AruNi_Lu
 * <span class="token keyword">@date</span>: 2023/3/19
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>
            userService<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token string">&quot;改为：北京&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MyBeanFactoryPostProcessor：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@desc</span>: 对实例化过程中的 Bean 对象做一些操作
 * <span class="token keyword">@author</span>: AruNi_Lu
 * <span class="token keyword">@date</span>: 2023/3/19
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PropertyValues</span> propertyValues <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        propertyValues<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;company&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;改为：字节跳动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提供了两个配置文件对照验证，在运用 Spring 新增加的应用上下文和不使用的时候，都是怎么操作的。</p><p>基础配置，无 BeanFactoryPostProcessor、BeanPostProcessor 的实现类：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--  注入 userDao  --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.run.test.bean.UserDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!--  注入 userService，并且把它依赖的 uId 和 userDao 进行属性填充 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.run.test.bean.UserService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10001<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>company<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>腾讯<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>location<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>深圳<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- userDao 指向上面的 userDao 这个 bean --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增强配置，有 BeanFactoryPostProcessor、BeanPostProcessor 的实现类：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.run.test.bean.UserDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.run.test.bean.UserService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10001<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>company<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>腾讯<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>location<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>深圳<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.run.test.common.MyBeanPostProcessor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.run.test.common.MyBeanFactoryPostProcessor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当不使用应用上下文时：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 不使用应用上下文</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_BeanFactoryPostProcessorAndBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 初始化 BeanFactory</span>
    <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 读取配置文件 &amp; 注册 Bean</span>
    <span class="token class-name">XmlBeanDefinitionReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. BeanDefinition 加载完成 &amp; Bean 实例化之前，修改 BeanDefinition 的属性值</span>
    <span class="token class-name">MyBeanFactoryPostProcessor</span> beanFactoryPostProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanFactoryPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. Bean 实例化之后，修改 Bean 的属性信息</span>
    <span class="token class-name">MyBeanPostProcessor</span> beanPostProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>beanPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 获取 Bean 对象，调用方法</span>
    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 测试结果：孙悟空，公司：改为：字节跳动，地点：改为：北京</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>DefaultListableBeanFactory 创建 beanFactory 并使用 XmlBeanDefinitionReader 加载配置文件的方式，还是比较熟悉的；</li><li>接下来就是对 MyBeanFactoryPostProcessor 和 MyBeanPostProcessor 的处理，一个是在 BeanDefinition 加载完成 &amp; Bean实例化之前，修改 BeanDefinition 的属性值，另外一个是在 Bean 实例化之后，修改 Bean 属性信息。</li></ul><p>当使用应用上下文时：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用应用上下文：再操作起来就方便多了，这才是面向用户使用的类，在这里可以一步把配置文件交给</span>
<span class="token comment">// ClassPathXmlApplicationContext，也不需要管理一些自定义实现的 Spring 接口的类</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_xml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 初始化 BeanFactory</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:springPostProcessor.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 获取 Bean 对象调用方法</span>
    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 测试结果：孙悟空，公司：改为：字节跳动，地点：改为：北京</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用新增加的 ClassPathXmlApplicationContext 应用上下文类，再操作起来就方便多了；</li><li>这与不用应用上下文的测试结果是一样，不过现在的方式更加方便了。</li></ul><h2 id="_4-流程" tabindex="-1"><a class="header-anchor" href="#_4-流程" aria-hidden="true">#</a> 4. 流程</h2><p>不使用应用上下文时：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303202202263.png" alt=""></p><p>使用应用上下文时：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303202202668.png" alt=""></p>`,67);function m(b,g){const a=i("router-link");return o(),c("div",null,[n("details",r,[k,n("nav",d,[n("ul",null,[n("li",null,[s(a,{to:"#_1-设计"},{default:t(()=>[e("1. 设计")]),_:1})]),n("li",null,[s(a,{to:"#_2-实现"},{default:t(()=>[e("2. 实现")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#_2-1-工厂扩展模块"},{default:t(()=>[e("2.1 工厂扩展模块")]),_:1})]),n("li",null,[s(a,{to:"#_2-2-上下文的实现"},{default:t(()=>[e("2.2 上下文的实现")]),_:1})]),n("li",null,[s(a,{to:"#_2-3-目录结构"},{default:t(()=>[e("2.3 目录结构")]),_:1})]),n("li",null,[s(a,{to:"#_2-4-类结构图"},{default:t(()=>[e("2.4 类结构图")]),_:1})])])]),n("li",null,[s(a,{to:"#_3-测试"},{default:t(()=>[e("3. 测试")]),_:1})]),n("li",null,[s(a,{to:"#_4-流程"},{default:t(()=>[e("4. 流程")]),_:1})])])])]),v])}const B=p(u,[["render",m],["__file","第06章：实现应用上下文.html.vue"]]);export{B as default};
