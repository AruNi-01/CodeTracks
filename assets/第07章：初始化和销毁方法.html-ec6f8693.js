import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as n,e as a,w as t,a as l,d as e}from"./app-26c597d0.js";const u={},r={class:"hint-container details"},d=n("summary",null,"本文内容",-1),k={class:"table-of-contents"},v=l(`<h2 id="_1-设计" tabindex="-1"><a class="header-anchor" href="#_1-设计" aria-hidden="true">#</a> 1. 设计</h2><p>当我们把某个类创建的 Bean 对象交给 Spring 容器管理后，该类对象就可以被赋予更多的使用能力。例如在上一章中，我们就给类对象添加了 <strong>对 BeanDefinition 未实例化前的属性信息的修改能力</strong>，以及 <strong>初始化过程中的前置处理和后置处理</strong>，让 Bean 对象实例化前后可以进行修改或替换。</p><p>这些额外能力的实现，都可以让我们对现有工程中的类对象做相应的 <strong>扩展处理</strong>。</p><p>所以，我们还希望可以在 Bean 初始化过程中，执行一些额外操作，例如做数据的加载执行、链接注册中心暴露 RPC 接口、在 Web 程序关闭时执行链接断开、内存销毁等。</p><p>实现方式也有多种，一种是可以在 <strong><code>spring.xml</code> 中配置</strong>，就像下面这样，此方式是 <strong>通过在 XML 中获取对应标签中的方法名，然后获取该方法，再通过反射执行该方法</strong> 即可：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303232011962.png" alt="image-20230323195834654" loading="lazy"></p><p>另一种实现方式是通过 <strong>实现接口</strong>，如果 <strong>有 Bean 实现了对应的接口，则会调用对应的初始化/销毁方法</strong>。</p><p>还有一种则是通过 <strong>注解</strong> 实现，这个放到后续完善。</p><p>所以下面就来看看前两种方式应该如何实现。</p><h2 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h2><p>总体的实现思路如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303232011564.png" alt="img" loading="lazy"></p><h3 id="_2-1-通过接口实现" tabindex="-1"><a class="header-anchor" href="#_2-1-通过接口实现" aria-hidden="true">#</a> 2.1 通过接口实现</h3><p>如果通过接口实现的方式进行调用初始化/销毁方法，那么首先要做的，当然是提供接口，让某个 Bean 需要使用初始化/销毁方法时，只需实现我们提供的接口，实现对应的方法即可。</p><p>所以新增两个接口 InitializingBean 和 DisposableBean，在其中分别定义初始化方法 <code>afterPropertiesSet()</code>（进行属性填充后再调用），销毁方法 <code>destroy()</code>。</p><h3 id="_2-2-通过-xml-配置实现" tabindex="-1"><a class="header-anchor" href="#_2-2-通过-xml-配置实现" aria-hidden="true">#</a> 2.2 通过 XML 配置实现</h3><p>如果从 XML 文件中获取调用的方法名，再得到对应的方法，使用反射执行该方法（<code>method.invoke()</code>），则需要先在 BeanDefinition 中添加对应的属性（initMethodName、destroyMethodName），在进行 XML 解析时将得到的方法名存入 BeanDefinition，后续就可以从 BeanDefinition 中获取到对应的方法。</p><p>从而也得在 XmlBeanDefinitionReader 类中解析 XML 的时候，将 XML 配置中的 init-method、destroy-method 读取出来，然后设置到 beanDefinition 中，再进行注册 Bean。</p><h3 id="_2-3-初始化方法的执行" tabindex="-1"><a class="header-anchor" href="#_2-3-初始化方法的执行" aria-hidden="true">#</a> 2.3 初始化方法的执行</h3><p>在上一章中，AbstractAutowireCapableBeanFactory 类中的 <code>initializeBean()</code> 方法中执行 Bean 对象的初始化方法 <code>invokeInitMethods()</code>，只是还未实现。</p><p>所以现在来实现此方法即可，由于现在我们提供了两种方式执行该方法，所以逻辑如下：</p><ul><li>方式一、实现了接口 InitializingBean：此时直接将当前 Bean 强转成 InitializingBean 类型后，调用 <code>afterPropertiesSet()</code> 即可执行实现类中的初始化方法；</li><li>方式二、XML 文件中的 init-method：此时通过 BeanDefinition 获取 initMethodName 属性，然后通过 Class 获取到该方法，通过反射执行即可（<code>initMethod.invoke(bean)</code>）。</li></ul><h3 id="_2-4-销毁方法的执行" tabindex="-1"><a class="header-anchor" href="#_2-4-销毁方法的执行" aria-hidden="true">#</a> 2.4 销毁方法的执行</h3><div class="hint-container tip"><p class="hint-container-title">销毁方法适配器</p></div><p>首先，需要先新定义一个适配器类 DisposableBeanAdapter，实现 DisposableBean，实现 <code>destroy()</code> 方法，在此方法中定义我们目前提供的两种方式来执行 <code>destroy()</code> 方法。提供一个适配器类是因为我们提供的销毁方法有两种甚至多种方式，所以在执行销毁时不用去关注销毁哪些类型的方法，由这个适配器统一执行。</p><div class="hint-container tip"><p class="hint-container-title">存储含有销毁方法的 Bean</p></div><p>那么继续来思考，我们怎么来判断一个 Bean 是否有销毁方法呢？因为销毁方法毕竟不是在注册时进行的，所以无法在注册时就判断。那想要知道哪些 Bean 需要执行销毁方法，最简单的方法就是 <strong>用一个容器将有销毁方法的 Bean 存储起来</strong>，当虚拟机关闭或主动销毁时，就可以先将这个容器中的 Bean 取出来，执行它们的销毁方法。</p><p>在接口 ConfigurableBeanFactory 中新定义 <code>destroySingletons()</code> 销毁方法，并由 AbstractBeanFactory（AbstractBeanFactory 实现了 ConfigurableBeanFactory）的父类 DefaultSingletonBeanRegistry 实现该方法。这里把实现接口的方法交给父类处理，是一种不错的隔离分层服务的设计技巧，把 Bean 的注册和销毁都交给了 DefaultSingletonBeanRegistry 管理，而不是放到 BeanFactory 中。</p><p>所以这里我们也把这个容器定义在 DefaultSingletonBeanRegistry 类中，然后提供一个注册方法 <code>registerDisposableBean(String beanName, DisposableBean bean)</code>。上面的 <code>destroySingletons()</code> 方法的实现，具体的步骤就是从容器中获取所有 DisposableBean，然后从容器中移除，再执行 <code>destroy()</code> 方法。</p><blockquote><p><strong>注意这个容器的 value 为 DisposableBean，上面的适配器类 DisposableBeanAdapter 实现了 DisposableBean，所以在注册时就可以使用 <code>registerDisposableBean(beanName, new DisposableBeanAdapter(bean, beanName, beanDefinition));</code> ，将这个适配器当成 value 注册进这个容器中，到时候从容器中获取到的就是适配器对象，调用 <code>destroy()</code> 走的就是适配器中的该方法，然后再由适配器具体去判断使用什么方式执行销毁方法</strong>。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">调用执行销毁方法</p></div><p>另外，销毁方法的执行比较隐晦，因为一种情况是销毁方法需要在虚拟机执行关闭之前进行操作，所以需要一个 <strong>钩子</strong> 来执行具体的销毁方法。</p><p>为了方便用户使用，我们将注册钩子方法 <code>registerShutdownHook()</code> 定义在上下文的 ConfigurableApplicationContext 接口中，同时再定义一个 <code>close()</code> 方法。当钩子函数触发时，就执行 <code>close()</code> 调用上面的 <code>destroySingletons()</code>。</p><p>这两个方法的实现类自然而然就在 AbstractApplicationContext 类中实现了。注册钩子函数的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">close</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>表示在虚拟机要关闭时，就会触发此钩子函数，调用 <code>close()</code> 方法。</li></ul><p><code>close()</code> 方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroySingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-目录结构" tabindex="-1"><a class="header-anchor" href="#_2-5-目录结构" aria-hidden="true">#</a> 2.5 目录结构</h3><p>到此，所有的设计就完成了，来看看目录结构的更变（绿色—新增、蓝色—修改）：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303242147891.png" alt="image-20230324214722933" loading="lazy"></p><h3 id="_2-6-类结构图" tabindex="-1"><a class="header-anchor" href="#_2-6-类结构图" aria-hidden="true">#</a> 2.6 类结构图</h3><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303251051004.png" alt="" loading="lazy"></p><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><p>UserDao 新增初始化方法和销毁方法，使用 XML 方式进行配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initDataMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;userDao 执行 init-method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10001&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10002&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;猪八戒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;10003&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沙悟净&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyDataMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;userDao 执行 destroy-method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>spring.xml</code> 文件增加 userDao Bean 的初始化和销毁标签：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- userDao 通过 xml 文件来执行初始化方法和销毁方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.run.test.bean.UserDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>initDataMethod<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>destroyDataMethod<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.run.test.bean.UserService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10001<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>company<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>腾讯<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>location<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>深圳<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UserService 实现 InitializingBean 和 DisposableBean 接口，通过实现接口的方式执行初始化和销毁方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> uId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> company<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>

    <span class="token comment">// 依赖 UserDao</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行 UserService.destroy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行 UserService.afterPropertiesSet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">queryUserName</span><span class="token punctuation">(</span>uId<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;，公司：&quot;</span> <span class="token operator">+</span> company <span class="token operator">+</span> <span class="token string">&quot;，地点：&quot;</span> <span class="token operator">+</span> location<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// setter、getter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Test 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_InitAndDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 初始化 BeanFactory</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注册钩子</span>
    applicationContext<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 获取 Bean 对象调用方法</span>
    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试结果：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>userDao 执行 init-method
执行 UserService.afterPropertiesSet
测试结果：孙悟空，公司：腾讯，地点：深圳
执行 UserService.destroy
userDao 执行 destroy-method

Process finished with exit code 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，两种方式都生效了。</p><h2 id="_4-流程" tabindex="-1"><a class="header-anchor" href="#_4-流程" aria-hidden="true">#</a> 4. 流程</h2><p>该流程包含了上一章的扩展功能：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303251054954.png" alt="" loading="lazy"></p>`,58);function m(b,g){const s=o("router-link");return c(),i("div",null,[n("details",r,[d,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#_1-设计"},{default:t(()=>[e("1. 设计")]),_:1})]),n("li",null,[a(s,{to:"#_2-实现"},{default:t(()=>[e("2. 实现")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_2-1-通过接口实现"},{default:t(()=>[e("2.1 通过接口实现")]),_:1})]),n("li",null,[a(s,{to:"#_2-2-通过-xml-配置实现"},{default:t(()=>[e("2.2 通过 XML 配置实现")]),_:1})]),n("li",null,[a(s,{to:"#_2-3-初始化方法的执行"},{default:t(()=>[e("2.3 初始化方法的执行")]),_:1})]),n("li",null,[a(s,{to:"#_2-4-销毁方法的执行"},{default:t(()=>[e("2.4 销毁方法的执行")]),_:1})]),n("li",null,[a(s,{to:"#_2-5-目录结构"},{default:t(()=>[e("2.5 目录结构")]),_:1})]),n("li",null,[a(s,{to:"#_2-6-类结构图"},{default:t(()=>[e("2.6 类结构图")]),_:1})])])]),n("li",null,[a(s,{to:"#_3-测试"},{default:t(()=>[e("3. 测试")]),_:1})]),n("li",null,[a(s,{to:"#_4-流程"},{default:t(()=>[e("4. 流程")]),_:1})])])])]),v])}const q=p(u,[["render",m],["__file","第07章：初始化和销毁方法.html.vue"]]);export{q as default};
