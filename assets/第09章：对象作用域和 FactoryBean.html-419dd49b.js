const e=JSON.parse('{"key":"v-2db1f4de","path":"/studynotes/framework/small-spring/ioc/%E7%AC%AC09%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%20FactoryBean.html","title":"第09章：对象作用域和 FactoryBean","lang":"zh-CN","frontmatter":{"title":"第09章：对象作用域和 FactoryBean","date":"2023-03-28T00:00:00.000Z","order":9,"icon":"write","category":["框架"],"tag":["Spring"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 1. 设计 目前我们的 Spring IOC 容器已经趋于完整，但还有一些可以扩展的地方。例如，我们业务中可能需要 不同作用域的 Bean 对象，但目前我们只支持单例 Bean，因此可以再添加对原型 Bean（prototype bean）的支持。 此外，交给 Spring 管理的 Bean 对象，不一定都是我们用类创建出来的。比如在 MyBatis 这样的 ORM 框架中，我们并没有手动去创建任何操作数据库的 Bean 对象。所以我们就需要 把复杂且以代理方式动态变化的对象，也注册到 Bean 容器中。","head":[["meta",{"property":"og:url","content":"https://aruni.me/studynotes/framework/small-spring/ioc/%E7%AC%AC09%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%20FactoryBean.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"第09章：对象作用域和 FactoryBean"}],["meta",{"property":"og:description","content":"本文内容 1. 设计 目前我们的 Spring IOC 容器已经趋于完整，但还有一些可以扩展的地方。例如，我们业务中可能需要 不同作用域的 Bean 对象，但目前我们只支持单例 Bean，因此可以再添加对原型 Bean（prototype bean）的支持。 此外，交给 Spring 管理的 Bean 对象，不一定都是我们用类创建出来的。比如在 MyBatis 这样的 ORM 框架中，我们并没有手动去创建任何操作数据库的 Bean 对象。所以我们就需要 把复杂且以代理方式动态变化的对象，也注册到 Bean 容器中。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-10T13:25:13.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2023-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-10T13:25:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第09章：对象作用域和 FactoryBean\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-10T13:25:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 设计","slug":"_1-设计","link":"#_1-设计","children":[]},{"level":2,"title":"2. 实现","slug":"_2-实现","link":"#_2-实现","children":[{"level":3,"title":"2.1 作用域的实现","slug":"_2-1-作用域的实现","link":"#_2-1-作用域的实现","children":[]},{"level":3,"title":"2.2 FactoryBean 的实现","slug":"_2-2-factorybean-的实现","link":"#_2-2-factorybean-的实现","children":[]},{"level":3,"title":"2.3 目录结构","slug":"_2-3-目录结构","link":"#_2-3-目录结构","children":[]},{"level":3,"title":"2.4 类结构图","slug":"_2-4-类结构图","link":"#_2-4-类结构图","children":[]}]},{"level":2,"title":"3. 测试","slug":"_3-测试","link":"#_3-测试","children":[]},{"level":2,"title":"4. 流程","slug":"_4-流程","link":"#_4-流程","children":[]}],"git":{"createdTime":1680104480000,"updatedTime":1686403513000,"contributors":[{"name":"AruNi-01","email":"1298911600@qq.com","commits":7},{"name":"aarynlu","email":"aarynlu@tencent.com","commits":1}]},"readingTime":{"minutes":7.05,"words":2114},"filePathRelative":"studynotes/framework/small-spring/ioc/第09章：对象作用域和 FactoryBean.md","localizedDate":"2023年3月28日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<h2> 1. 设计</h2>\\n<p>目前我们的 Spring IOC 容器已经趋于完整，但还有一些可以扩展的地方。例如，我们业务中可能需要 <strong>不同作用域的 Bean 对象</strong>，但目前我们只支持单例 Bean，因此可以再添加对原型 Bean（prototype bean）的支持。</p>\\n<p>此外，<strong>交给 Spring 管理的 Bean 对象，不一定都是我们用类创建出来的</strong>。比如在 MyBatis 这样的 ORM 框架中，我们并没有手动去创建任何操作数据库的 Bean 对象。所以我们就需要 <strong>把复杂且以代理方式动态变化的对象，也注册到 Bean 容器中</strong>。</p>","autoDesc":true}');export{e as data};
