import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as p,b as s,e as n,w as a,a as i,d as t}from"./app-c6c9fa04.js";const c={},d={class:"hint-container details"},u=s("summary",null,"本文内容",-1),_={class:"table-of-contents"},g=i(`<h2 id="_1-对幂等的理解" tabindex="-1"><a class="header-anchor" href="#_1-对幂等的理解" aria-hidden="true">#</a> 1. 对幂等的理解</h2><p>幂等是业务的一个特性，在 MQ 中，<strong>对于不满足幂等性的业务，在消息重复消费时，会导致数据不一致、或数据错乱的现象</strong>。</p><p>例如一个支付业务，消费者需要消费扣款的消息，如果该消息出现了重复消费的情况，<strong>但最终的业务结果是只扣款了一次</strong>，那么就说这个扣款业务具有 <strong>幂等性</strong>。</p><p>再用我们常见的 HTTP 为例，GET、PUT、DELETE 方法都是幂等的，因为它们不管执行多少次，都和执行一次效果一样，对业务结果都是无影响的。而 POST 就不是幂等的，它会创建多个资源。</p><p>在实际业务中，大多都是对 DB 的操作，在 CRUD 中：</p><ul><li><p>READ 和 DELETE 是幂等的；</p></li><li><p>CREATE 不是幂等的；</p></li><li><p>而 UPDATE 操作可能是幂等的，也可能不是幂等的。比如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> age <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment"># 幂等</span>
<span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> age <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment"># 不幂等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_2-为何会出现消息不幂等的情况" tabindex="-1"><a class="header-anchor" href="#_2-为何会出现消息不幂等的情况" aria-hidden="true">#</a> 2. 为何会出现消息不幂等的情况？</h2><p>在 MQ 中，为了保证 <strong>消息的可靠传输</strong>，一般都会有 <strong>失败重传机制</strong>，比如：</p><ul><li><p><strong>当生产者发现消息发送失败时，生产者会进行消息重发</strong>；</p><blockquote><p>比如 <strong>发送的消息因网络延时，导致生产者未收到服务端的 ACK，导致 消息重发，而一段时间后延时的消息又到达了，导致消息重复，这种情况消息的 offset 是不同的</strong>。</p></blockquote></li><li><p><strong>当消费者消费失败时，服务端会再次投递该消息给消费者</strong>。</p><blockquote><p>比如 <strong>消费者消费完消息后，还没来得及回复 ACK，机器就宕机了，重启后服务端会再次将该消息投递给消费者，这种情况消息的 offset 是相同的</strong>。</p></blockquote></li></ul><p>出现了重复消息，自然而然就会有幂等性问题了。</p><h2 id="_3-如何解决消息不幂等" tabindex="-1"><a class="header-anchor" href="#_3-如何解决消息不幂等" aria-hidden="true">#</a> 3. 如何解决消息不幂等？</h2><p>首先要明确一点，<strong>有些业务天然就不需要考虑幂等性问题，允许重复调用</strong>（即允许重试）。这些业务还可以通过合理的重试机制来提高可靠性。</p><p>那在需要考虑幂等性问题的业务中，应该如何保证消息幂等呢？通常有以下几种解决方案：</p><ul><li><strong>利用数据库</strong>；</li><li><strong>设置全局唯一标识 ID</strong>；</li></ul><h3 id="_3-1-利用数据库" tabindex="-1"><a class="header-anchor" href="#_3-1-利用数据库" aria-hidden="true">#</a> 3.1 利用数据库</h3><p>利用数据库解决幂等性问题，可以有两种方案：</p><ul><li><strong>使用唯一索引去重</strong>；</li><li><strong>设计一个去重表</strong>。</li></ul><p>比如，业务是向数据库中插入数据，那么就可以使用唯一索引来保证幂等，重复消费时会插入失败，捕获异常处理即可。</p><blockquote><p>同理，如果业务是操作 Redis 的 Set，那么也可以天然的保证幂等。</p></blockquote><p>如果是不具有幂等性的更新数据（<code>UPDATE user SET age = age + 1 WHERE id = 1;</code>），此时可以使用第二种方案，我们 <strong>新建一张去重表，将 id 和时间戳做一个唯一索引进行约束</strong>。当消费者要更新数据库时，<strong>先往去重表进行写入</strong>，只有第一条消息会插入成功，后面的都会失败，在失败时捕获异常处理一下即可保证幂等。</p><h3 id="_3-2-设置全局唯一标识-id" tabindex="-1"><a class="header-anchor" href="#_3-2-设置全局唯一标识-id" aria-hidden="true">#</a> 3.2 设置全局唯一标识 ID</h3><p>我们可以用 <strong>业务唯一标识 ID 作为 Message Key 放入消息中</strong>，消费者在消费消息时，首先需要取出该 Key，然后根据业务来做具体的幂等处理。</p><blockquote><p>为了增加幂等处理的速度，可以将这个 Message Key 存入 Redis，通过 Redis 来快速判断该 Key 是否存在，即是否为重复消费。</p></blockquote>`,23);function k(h,m){const e=l("router-link");return r(),p("div",null,[s("details",d,[u,s("nav",_,[s("ul",null,[s("li",null,[n(e,{to:"#_1-对幂等的理解"},{default:a(()=>[t("1. 对幂等的理解")]),_:1})]),s("li",null,[n(e,{to:"#_2-为何会出现消息不幂等的情况"},{default:a(()=>[t("2. 为何会出现消息不幂等的情况？")]),_:1})]),s("li",null,[n(e,{to:"#_3-如何解决消息不幂等"},{default:a(()=>[t("3. 如何解决消息不幂等？")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#_3-1-利用数据库"},{default:a(()=>[t("3.1 利用数据库")]),_:1})]),s("li",null,[n(e,{to:"#_3-2-设置全局唯一标识-id"},{default:a(()=>[t("3.2 设置全局唯一标识 ID")]),_:1})])])])])])]),g])}const f=o(c,[["render",k],["__file","如何保证消息幂等.html.vue"]]);export{f as default};
