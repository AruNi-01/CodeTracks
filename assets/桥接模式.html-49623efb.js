import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,b as n,e as s,w as t,d as a,a as u}from"./app-f67e1033.js";const r={},k={class:"hint-container details"},d=n("summary",null,"本文内容",-1),v={class:"table-of-contents"},m=u(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>桥接模式在日常开发中使用得并不多，而且理解起来也有难度，所以下面只是简单地介绍下桥接模式，以及它怎么运用。</p></div><h2 id="_1-什么是桥接模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是桥接模式" aria-hidden="true">#</a> 1. 什么是桥接模式</h2><p><strong>桥接模式</strong> 的定义：<strong>将抽象部分与它的实现部分分离，使它们都可以独立地变化</strong>。</p><p>这个定义可以说是非常的抽象了，它还有另一种比较简单的理解方式：<strong>一个类存在两个（或多个）独立变化的维度，我们通过组合的方式，让这两个（或多个）维度可以独立进行扩展</strong>。通过组合关系来替代继承关系，避免子类过多过杂。</p><p>可以发现，<strong>桥接模式主要是用于将两个独立的模块，通过组合的方式连接起来使用</strong>。</p><h2 id="_2-桥接模式例子" tabindex="-1"><a class="header-anchor" href="#_2-桥接模式例子" aria-hidden="true">#</a> 2. 桥接模式例子</h2><p>下面用一个实际生活中的例子来讲解。假设我们是负责给星巴克做订单系统的外包码农，星巴克在一开始时说他们的咖啡只提供正常杯（中杯）、原味和加糖这几种选择。</p><p>这个需求还是很简单的，我们先定义一个点咖啡的接口，通过一个下单方法，至于点哪种口味的咖啡，由子类去决定即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 点咖啡的接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICoffee</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// 原味咖啡类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeOriginal</span> <span class="token keyword">implements</span> <span class="token class-name">ICoffee</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;原味咖啡%d杯&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 加糖咖啡类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeWithSugar</span> <span class="token keyword">implements</span> <span class="token class-name">ICoffee</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;加糖咖啡%d杯&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过了没多久，星巴克又过来说，他们还要再添加两个规格容量的咖啡，大杯和小杯。</p><p>虽然我们之前是面向抽象编程的，但是现在口味的组合就很多了，有小杯的原味和加糖、中杯的原味和加糖、大杯的原味和加糖，这就需要 6 个实现类。而如果后续还有其他需求，比如三分糖、五分糖、七分糖等等。这实现类不得爆炸？</p><p>此时，桥接模式就能派上用场了。这里有两个变化维度，咖啡的容量和口味，而且都是可以独立变化的。</p><p>桥接模式的设计结构图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304081627646.png" alt="" loading="lazy"></p><p>桥梁模式所涉及的角色有：</p><ul><li><strong>抽象化(Abstraction)角色</strong>：抽象化给出的定义，并保存一个对实现化对象的引用。</li><li><strong>修正抽象化(RefinedAbstraction)角色</strong>：扩展抽象化角色，改变和修正父类对抽象化的定义。</li><li><strong>实现化(Implementor)角色</strong>：这个角色给出实现化角色的接口，但不给出具体的实现。必须指出的是，这个接口不一定和抽象化角色的接口定义相同，实际上，这两个接口可以非常不一样。实现化角色应当只给出底层操作，而抽象化角色应当只给出基于底层操作的更高一层的操作。</li><li><strong>具体实现化(ConcreteImplementor)角色</strong>：这个角色给出实现化角色接口的具体实现。</li></ul><p>该案例的整体设计如下（本例中无需扩展抽象化角色）：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304081627611.png" alt="image-20230408161433475" loading="lazy"></p><p>代码实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISugarDegree</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">chooseSugarDegree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SugarDegreeAsc</span> <span class="token keyword">implements</span> <span class="token class-name">ISugarDegree</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chooseSugarDegree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;加糖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SugarDegreeNormal</span> <span class="token keyword">implements</span> <span class="token class-name">ISugarDegree</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chooseSugarDegree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正常糖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过组合的方式将 Coffee 的糖度添加进来</span>
    <span class="token keyword">protected</span> <span class="token class-name">ISugarDegree</span> sugarDegree<span class="token punctuation">;</span>

    <span class="token comment">// 通过依赖注入将 ICoffeeAdditives 注入进来</span>
    <span class="token keyword">public</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token class-name">ISugarDegree</span> sugarDegree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sugarDegree <span class="token operator">=</span> sugarDegree<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LargeCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">LargeCoffee</span><span class="token punctuation">(</span><span class="token class-name">ISugarDegree</span> sugarDegree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>sugarDegree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sugarDegree<span class="token punctuation">.</span><span class="token function">chooseSugarDegree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;大杯咖啡%d杯&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediumCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">MediumCoffee</span><span class="token punctuation">(</span><span class="token class-name">ISugarDegree</span> sugarDegree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>sugarDegree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sugarDegree<span class="token punctuation">.</span><span class="token function">chooseSugarDegree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;中杯杯咖啡%d杯&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Coffee</span> largeWithSugarDegreeNormal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LargeCoffee</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SugarDegreeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        largeWithSugarDegreeNormal<span class="token punctuation">.</span><span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 输出：
正常糖
大杯咖啡3杯
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们如果需要添加容量，比如小杯、女神杯等，则直接添加一个类，继承 Coffee 即可。或者添加糖度，比如三分糖、七分糖，也只需要添加一个类，实现 ISugarDegree 接口即可。</p><p>不知道你有没有发现，其实 <strong>桥接模式就是通过组合的方式，将 M*N 个子类/实现类简化成了 M+N 个，从而大大减少了类的个数</strong>。</p><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h2><p>桥接模式的理解和使用是比较困难的，使用的场景也不多，但是还是需要了解一下。</p><p>桥接模式的定义有两种不同的理解：</p><ul><li><strong>将抽象部分与它的实现部分分离，使它们都可以独立地变化</strong>。</li><li><strong>一个类存在两个（或多个）独立变化的维度，我们通过组合的方式，让这两个（或多个）维度可以独立进行扩展</strong>。</li></ul><p>第二种方式比较好理解，其实就是类似于 “组合优于继承” 的设计原则，通过 <strong>组合的方式来替代继承</strong>，从而避免当需求扩充时，导致子类/实现类的爆炸增长。</p><p>桥接模式最大的作用无非就是 <strong>通过组合的方式，将 M*N 个子类/实现类简化成了 M+N 个，从而大大减少了类的个数</strong>。</p><h2 id="_4-参考文章" tabindex="-1"><a class="header-anchor" href="#_4-参考文章" aria-hidden="true">#</a> 4. 参考文章</h2>`,31),b={href:"https://zhuanlan.zhihu.com/p/58903776",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/weixin_39296283/article/details/104953668",target:"_blank",rel:"noopener noreferrer"};function f(y,w){const e=o("router-link"),p=o("ExternalLinkIcon");return l(),i("div",null,[n("details",k,[d,n("nav",v,[n("ul",null,[n("li",null,[s(e,{to:"#_1-什么是桥接模式"},{default:t(()=>[a("1. 什么是桥接模式")]),_:1})]),n("li",null,[s(e,{to:"#_2-桥接模式例子"},{default:t(()=>[a("2. 桥接模式例子")]),_:1})]),n("li",null,[s(e,{to:"#_3-总结"},{default:t(()=>[a("3. 总结")]),_:1})]),n("li",null,[s(e,{to:"#_4-参考文章"},{default:t(()=>[a("4. 参考文章")]),_:1})])])])]),m,n("ul",null,[n("li",null,[n("a",b,[a("秒懂设计模式之桥接模式"),s(p)])]),n("li",null,[n("a",g,[a("桥接模式（Bridge Pattern）"),s(p)])])])])}const S=c(r,[["render",f],["__file","桥接模式.html.vue"]]);export{S as default};
