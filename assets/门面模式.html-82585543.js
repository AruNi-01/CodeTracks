const t=JSON.parse('{"key":"v-92b10cca","path":"/backend/design_pattern/pattern/structure_type/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html","title":"门面模式","lang":"zh-CN","frontmatter":{"title":"门面模式","date":"2023-04-16T00:00:00.000Z","order":5,"category":["设计模式"],"tag":["设计模式与范式"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 前言 我们平时在开发接口的时候，一个常见的问题就是 接口粒度 的问题。 为了保证接口的 可复用性（或叫通用性），我们需要把接口设计得 细粒度一点，职责单一一点。但这样又会导致调用者在使用时需要调用 n 多个细粒度的接口，才能完成某个功能，这称为接口的易用性不好。 而如果 接口的粒度设计得过大，一个接口要做 n 多件事情，返回 n 多个数据，就会导致接口 不够通用、可复用性不好。 那如何解决接口的 可复用性和易用性之间的矛盾 呢？这就要谈到我们本章的 门面模式 了。","head":[["meta",{"property":"og:url","content":"https://code.0x3f4.run/backend/design_pattern/pattern/structure_type/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"门面模式"}],["meta",{"property":"og:description","content":"本文内容 前言 我们平时在开发接口的时候，一个常见的问题就是 接口粒度 的问题。 为了保证接口的 可复用性（或叫通用性），我们需要把接口设计得 细粒度一点，职责单一一点。但这样又会导致调用者在使用时需要调用 n 多个细粒度的接口，才能完成某个功能，这称为接口的易用性不好。 而如果 接口的粒度设计得过大，一个接口要做 n 多件事情，返回 n 多个数据，就会导致接口 不够通用、可复用性不好。 那如何解决接口的 可复用性和易用性之间的矛盾 呢？这就要谈到我们本章的 门面模式 了。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T16:55:13.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"设计模式与范式"}],["meta",{"property":"article:published_time","content":"2023-04-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T16:55:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"门面模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-25T16:55:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是门面模式","slug":"_1-什么是门面模式","link":"#_1-什么是门面模式","children":[]},{"level":2,"title":"2. 应用场景","slug":"_2-应用场景","link":"#_2-应用场景","children":[{"level":3,"title":"2.1 解决易用性问题","slug":"_2-1-解决易用性问题","link":"#_2-1-解决易用性问题","children":[]},{"level":3,"title":"2.2 解决性能问题","slug":"_2-2-解决性能问题","link":"#_2-2-解决性能问题","children":[]}]},{"level":2,"title":"3. 总结","slug":"_3-总结","link":"#_3-总结","children":[]}],"git":{"createdTime":1700931313000,"updatedTime":1700931313000,"contributors":[{"name":"MECHREVO_GGPRO\\\\AarynLu","email":"hello@0x3f4.run","commits":1}]},"readingTime":{"minutes":4.82,"words":1445},"filePathRelative":"backend/design_pattern/pattern/structure_type/门面模式.md","localizedDate":"2023年4月16日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">前言</p>\\n<p>我们平时在开发接口的时候，一个常见的问题就是 <strong>接口粒度</strong> 的问题。</p>\\n<p>为了保证接口的 <strong>可复用性</strong>（或叫通用性），我们需要把接口设计得 <strong>细粒度一点，职责单一一点</strong>。但这样又会导致调用者在使用时需要调用 n 多个细粒度的接口，才能完成某个功能，这称为接口的易用性不好。</p>\\n<p>而如果 <strong>接口的粒度设计得过大</strong>，一个接口要做 n 多件事情，返回 n 多个数据，就会导致接口 <strong>不够通用、可复用性不好</strong>。</p>\\n<p>那如何解决接口的 <strong>可复用性和易用性之间的矛盾</strong> 呢？这就要谈到我们本章的 <strong>门面模式</strong> 了。</p>\\n</div>","autoDesc":true}');export{t as data};
