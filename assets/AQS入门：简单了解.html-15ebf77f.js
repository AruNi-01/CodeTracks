import{_ as c,Y as l,Z as i,a2 as n,a0 as s,a3 as e,a1 as a,$ as u,E as p}from"./framework-cb320332.js";const d={},r={class:"hint-container details"},k=n("summary",null,"本文内容",-1),v={class:"table-of-contents"},m=u(`<h2 id="_1-什么是-aqs" tabindex="-1"><a class="header-anchor" href="#_1-什么是-aqs" aria-hidden="true">#</a> 1. 什么是 AQS</h2><p>AQS 全称 AbstractQueuedSynchronizer，即抽象队列同步器，是 JUC 包下的一个 <strong>构建锁和同步器的框架</strong>。</p><p>AQS 是一个抽象类，内部提供了一些使用 <code>protected</code> 修饰的方法，意图就是让我们自己 <strong>继承 AQS，重写这些模板方法，即可来构建自己的同步器</strong>。</p><p>AQS 中大量 <strong>使用 CAS 来提供乐观锁服务</strong>，在发生冲突时使用自旋的方式进行重试，效率是比较高的。所以 JUC 包下的很多锁，并发组件等，许多都是由 AQS 构建而来的。例如常见的 <code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>、AQS 组件 <code>Semaphore</code> 和 <code>CountDownLatch</code> 等。</p><h2 id="_2-aqs-模板方法" tabindex="-1"><a class="header-anchor" href="#_2-aqs-模板方法" aria-hidden="true">#</a> 2. AQS 模板方法</h2><p>AQS 基于模板方法模式，如果需要自定义自己的同步器，就需要继承 AQS，重写这些模板方法。</p><p>这些模板方法都使用 <code>protected</code> 修饰，而且没有被 <code>final</code> 或 <code>static</code> 修饰，因此可以被子类继承重写。</p><p>主要有如下几个模板方法供开发者使用：</p><ul><li><p>与 <strong>try 获取/释放</strong> 相关：</p><ul><li><p>独占式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 尝试以独占模式获取</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// // 尝试以独占模式释放</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>共享式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//  // 以共享模式获取</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 以共享模式释放</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>判断同步器是否被当前线程独占</strong> 的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 如果同步状态被当前（调用）线程以独占方式持有，则返回 true。</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>除了上面的模板方法外，AQS 中的其他方法都使用 <code>final</code> 或 <code>private</code> 修饰，无法被其他类重写。</p><p>这几个模板方法也很简单，其实就是 <strong>对同步状态变量 <code>state</code> 的获取和释放</strong>。</p><div class="hint-container info"><p class="hint-container-title">疑问一：为什么 AQS 抽象类中的模板方法不使用 abstract 修饰，而是都抛出一个异常？</p><p>因为 AQS 是许多同步器/锁的基础，它不提供具体的实现，每个同步器可以根据自己的特点进行自定义实现。</p><p><strong>而如果把向外提供的方法也用 <code>abstract</code> 修饰，那么其它子类在继承它的时候，则必须要重写全部抽象方法，除非子类也声明为抽象类</strong>。</p><p>所以，为了方便子类 <strong>按需实现</strong> AQS 中的方法，AQS 就不能将这些方法定义为抽象方法，所以必须给出一个默认实现。</p><p>例如，ReentrantLock 是一个独占锁，它根本不需要 <code>tryAcquireShared()</code> 和 <code>tryReleaseShared()</code>。</p></div><div class="hint-container info"><p class="hint-container-title">疑问二：那既然 AQS 抽象类中没有抽象方法，那为何还要定义为抽象类？</p><p>上面说了，AQS 只是给许多同步器/锁一个基石，让我们自己可以自定义实现各种特性的同步器。所以 <strong>AQS 并不希望外界直接 new 一个 AQS 实例来使用</strong>，因此定义成抽象类。</p></div><p>接下来我们就使用 AQS，来构建一个简单的同步类。</p><h3 id="_2-1-自定义同步类" tabindex="-1"><a class="header-anchor" href="#_2-1-自定义同步类" aria-hidden="true">#</a> 2.1 自定义同步类</h3><p>我们这里就自定义一个非常简单的同步锁，只有加锁解锁功能，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLatch</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取</span>
        sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 释放</span>
        sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 同步器 Sync 继承 AQS，重写模板方法</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// CAS 将 state 从期望值 0 自旋地修改为 1（state 为 1 表示有锁状态）</span>
            <span class="token keyword">return</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 释放操作，将 state 置为 0（state 为 0 表示无锁状态）</span>
            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义一个 <code>Sync</code> 同步器，继承自 AQS，重写模板方法。逻辑很简单，获取锁就是使用 CAS 将 <code>state</code> 从 0 改成 1（0 表示无锁，1 表示有锁），释放锁就是将 <code>state</code> 设置回 0；</li><li><code>MyLatch</code> 是我们对外提供的同步锁接口，只提供了 <code>lock</code> 和 <code>unlock</code> 功能；</li></ul><h3 id="_2-2-测试-mylatch" tabindex="-1"><a class="header-anchor" href="#_2-2-测试-mylatch" aria-hidden="true">#</a> 2.2 测试 MyLatch</h3><p>下面进行测试。测试代码很简单，就是对一个竞争资源进行并发操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLatchTest</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存在竞争的资源 val</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">MyLatchTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 开启 10 个线程模拟并发，都执行 add 方法</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 各线程并发执行 val++</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: 执行 +1 前 val=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>val<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;，执行 +1 后 val=&quot;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302271711104.png" alt="image-20230227171052139"></p><p>可以发现，因为 <strong><code>val++</code> 本身不是原子操作</strong>，它分成了读取 val 的值，进行 +1 操作，写回 val 的值。所以在并发操作时，就出现了乱序错误。</p><p>接下来就要有请我们自定义的同步锁 <code>MyLatch</code> 闪亮登场了，我们让每个线程在执行 <code>val++</code> 操作前，都要获取到该锁，从而使得所有线程都按序进行。</p><p>想要实现这个效果，也很简单，直接在 <code>add()</code> 方法执行 <code>val++</code> 之前必须先获得锁，执行完之后再释放掉锁即可，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLatchTest</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存在竞争的资源 val</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 使用自己自定义的同步锁</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MyLatch</span> myLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">MyLatchTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 开启 10 个线程模拟并发，都执行 add 方法</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行操作前上锁</span>
        myLatch<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行 val++ 操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: 执行 +1 前 val=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>val<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;，执行 +1 后 val=&quot;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行完后解锁</span>
        myLatch<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302271716282.png" alt="image-20230227171653299"></p><p>可以看到，执行效果与我们预期相符，各线程一次执行 <code>val++</code>，最后保证了 val 的正确性。</p><h3 id="_2-3-常用工具类的实现" tabindex="-1"><a class="header-anchor" href="#_2-3-常用工具类的实现" aria-hidden="true">#</a> 2.3 常用工具类的实现</h3><p>通过上面我们自定义的同步类，可以发现其实这些模板方法无非就是对 <strong>同步状态变量 <code>state</code> 的获取和释放</strong>，常用的锁和工具类也不例外。</p><p>下面就来简单的了解一下 ReentrantLock 和 CountDownLatch 对 AQS 的应用。</p><blockquote><p>本文章只会简单的介绍它们的实现思想，不涉及具体的源码分析。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">ReentrantLock</p></div><p><strong>ReentrantLock</strong> 是用 AQS 构建的一个 <strong>可重入锁</strong>，它的大致思想如下：</p><ul><li><p><code>state</code> 初始化为 0，表示未锁定状态。一个线程在调用 <code>lock()</code> 方法时，会调用 <code>tryAcquire()</code> 独占该锁并将 <code>state</code> +1。之后其他线程再 <code>tryAcquire()</code> 时就会失败，<strong>直到之前的线程调用 <code>unlock()</code> 将 <code>state</code> 设置为 0，其他线程才能获取该锁</strong>。</p></li><li><p>它的 <strong>可重入</strong> 实现也很简单，当一个线程尝试获取锁时，会先判断当前获得锁的线程是否是本线程，如果是则判为加锁成功，将 <strong><code>state</code> 累加</strong>。释放锁时，每释放一次就将 <code>state</code> -1，<strong>直到 <code>state</code> 归零，才是真正的释放掉锁</strong>。</p></li></ul><div class="hint-container tip"><p class="hint-container-title">CountDownLatch</p></div><p>CountDownLatch 介绍：</p><ul><li><strong>CountDownLatch</strong> 是一个 <strong>减法计数器</strong>，我们可以在初始化时指定任务的个数 <code>count</code>，每次调用 <strong><code>countDown()</code></strong> 方法都会将 <strong><code>count</code> -1</strong>，调用 <strong><code>await()</code></strong> 会进行 <strong>阻塞</strong>，<strong>直到 <code>count</code> 变为 0</strong>；</li><li>所以 CountDownLatch 的应用场景就是等所有线程都将需要的资源准备完毕（每个线程准备完就执行一次 <code>countDown()</code>），主线程再执行后续任务（执行前调用 <code>await()</code>）。</li></ul><p>实现思想：</p><ul><li><strong>将 <code>state</code> 初始化为 <code>count</code></strong>（一般让 count 与线程个数一致），子线程并行执行，每个子线程执行完就执行 <code>countDown()</code>，将 <code>state</code> -1。等到所有子线程都执行完毕后，此时 <code>state</code> 就为 0 了，就会执行 <code>unpark()</code> 恢复主线程，让主线程从 <code>await()</code> 函数返回，继续执行后面的任务。</li></ul><h2 id="_3-aqs-底层原理" tabindex="-1"><a class="header-anchor" href="#_3-aqs-底层原理" aria-hidden="true">#</a> 3. AQS 底层原理</h2><p>同步状态变量 <code>state</code> 在构建同步器时充当 <strong>共享资源</strong> 的角色，所有线程都要 <strong>竞争到此资源的操作权，才能表示获取锁成功</strong>。</p><p>AQS 的 <strong>核心思想</strong> 如下：</p><ul><li><p>如果被请求的共享资源 <strong>空闲</strong>，则将当前请求该资源的线程设置为 <strong>有效的工作线程</strong>，然后将共享资源设置为 <strong>锁定状态</strong>；</p></li><li><p>如果被请求的共享资源被 <strong>占用</strong>，那么就将当前线程暂存到一个地方，以便后续唤醒。AQS 中使用一个 <strong>同步等待队列 CLH 暂存获取不到锁的线程</strong>。</p><blockquote><p>不要以为 CLH 很高大上，称之为 CLH 只是因为这个队列是由三个人发明的，CLH 是他们名字的首字母。</p></blockquote></li></ul><p>AQS 的主要架构思想如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302281301851.png" alt="image-20230228130021521"></p><h3 id="_3-1-同步状态-state" tabindex="-1"><a class="header-anchor" href="#_3-1-同步状态-state" aria-hidden="true">#</a> 3.1 同步状态 state</h3><p>在 AQS 中，表示同步状态的变量 <code>state</code> 尤为重要，所以，我们就从这个 <code>state</code> 入手，来看看 AQS 的底层实现到底是怎样的。</p><p>直接翻开 AQS 源码，找到 <code>state</code>：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302271922443.png" alt="image-20230227192224318"></p><p>可以发现，它被 <strong>volatile</strong> 修饰。不难理解，在多线程并发的场景下，要保证共享变量的 <strong>可见性</strong>，即一个线程对 <code>state</code> 的值进行修改后，需要 <strong>保证其他线程能及时看见 <code>state</code> 的最新值</strong>。</p><p>接下来再去看看与 <code>state</code> 变量有关的三个操作方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 获取 state</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 修改 state</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">int</span> newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state <span class="token operator">=</span> newState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 修改 state，通过 CAS 的方式</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSetInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">STATE</span><span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，这三个方法都使用了 <code>final</code> 进行修饰，所以子类是无法重写它们的。</p><p>重点来看 <strong>通过 CAS 修饰 <code>state</code></strong> 的方法。</p><p>CAS 全称 Compare And Swap，意为比较并交换，是一种 <strong>实现同步的无锁算法</strong>，它能保证一个变量在修改时具有 <strong>原子性</strong>。</p><p>它主要包含三个操作数：</p><ul><li><strong>内存位置 offset：当前需要修改的变量值在内存的什么位置</strong>；</li><li><strong>预期值 expect：修改变量之前期望该变量是什么值</strong>；</li><li><strong>新值 update：需要将变量修改成什么值</strong>。</li></ul><p><strong>CAS 核心思想：将内存位置的值与期望值做比较，若相同则将内存位置的值修改为新值，否则不做任何操作</strong>。</p><p><strong>修改 <code>state</code> 通过 CAS 保证了原子性，<code>state</code> 又通过 volatile 保证了可见性</strong>，因此在 AQS 中对 <code>state</code> 变量的操作是 <strong>能保证并发安全的</strong>。</p><h3 id="_3-2-同步等待队列-clh" tabindex="-1"><a class="header-anchor" href="#_3-2-同步等待队列-clh" aria-hidden="true">#</a> 3.2 同步等待队列 CLH</h3><blockquote><p>注：CLH 是单项队列，AQS 中的队列是 CLH 的变体 — <strong>虚拟双向队列</strong>，文中直称 CLH。</p></blockquote><p>当线程获取锁失败时，就需要加入到等待队列中，以便后续唤醒，<strong>AQS 中使用同步等待队列 CLH 来保存暂时获取不到锁的线程</strong>。</p><p>CLH 是一个 <strong>虚拟的双向队列</strong>，之所以称之为虚拟，即不存在真正的队列实例，<strong>只是存在节点与节点间的关联关系</strong>。</p><p>那么节点之间如何进行关联呢？其实，就是一个 <strong>双向链表</strong>，通过前驱和后继指针，就能建立节点之间的联系。</p><p>在 AQS 中，CLH 是通过 <code>Node</code> 节点来实现的，<strong>暂时获取不到锁的线程都会对应一个 <code>Node</code> 节点</strong>。</p><p><code>Node</code> 节点的定义如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/** CLH Nodes */</span>
    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
        <span class="token keyword">volatile</span> <span class="token class-name">Node</span> prev<span class="token punctuation">;</span>       <span class="token comment">// initially attached via casTail</span>
        <span class="token keyword">volatile</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>       <span class="token comment">// visibly nonnull when signallable</span>
        <span class="token class-name">Thread</span> waiter<span class="token punctuation">;</span>            <span class="token comment">// visibly nonnull when enqueued</span>
        <span class="token keyword">volatile</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>      <span class="token comment">// written by owner, atomic bit ops by others</span>

        <span class="token comment">// Some methods......</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>prev</code>：前驱节点；</p></li><li><p><code>next</code>：后继节点；</p></li><li><p><code>waiter</code>：当前等待的线程（暂时未获得锁的线程）；</p></li><li><p><code>status</code>：当前节点的状态，分为：</p><ul><li>WAITING：等待状态，节点等待被唤醒；</li><li>CANCELLED：取消等待，将节点从队列中移除；</li><li>COND：节点放入了条件队列中。</li></ul><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302272103310.png" alt="image-20230227210313442"></p></li></ul><p>为了方便的获取首尾节点，AQS 类中定义了一个 <code>head</code> 和 <code>tail</code>，分别指向 CLH 队列的头尾：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Head of the wait queue, lazily initialized.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Tail of the wait queue. After initialization, modified only via casTail.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> tail<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么当一个线程获取到了锁，<strong>其他线程再尝试获取锁时，就会加入到 CLH 双向队列中</strong>，如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302272105294.png" alt="image-20230227210535131"></p><blockquote><p>第一个节点为虚节点，不存储任何信息，只用于占位。</p></blockquote><h2 id="_4-aqs-应用场景" tabindex="-1"><a class="header-anchor" href="#_4-aqs-应用场景" aria-hidden="true">#</a> 4. AQS 应用场景</h2><p>之前也提到过，一张表总结：</p><table><thead><tr><th>同步工具</th><th>与 AQS 的关联</th></tr></thead><tbody><tr><td>ReentrantLock</td><td><code>state</code> 变量值表示重入的次数，<code>state</code> 为 0 才为无锁状态，公平和非公平使用参数 <code>fair</code> 指定 <code>new ReentrantLock(boolean fair)</code></td></tr><tr><td>ReentrantReadWriteLock</td><td><code>state</code> 变量中的 16 位保存写锁持有的次数，剩下的 16 位保存读锁持有的次数</td></tr><tr><td>Semaphore</td><td><code>state</code> 变量值表示信号量的当前计数，线程获取锁时会减少计数，释放锁时会增加计数，计数为 0 表示信号量已用完</td></tr><tr><td>CountDownLatch</td><td><code>state</code> 变量值表示计数，每次释放锁（<code>countDown()</code>）计数器就减一，计数为 0 时，获取锁的操作（<code>await()</code>）才可以执行。</td></tr><tr><td>ThreadPoolExecutor</td><td>Worker 利用 <code>state</code> 实现对独占线程变量的设置（tryAcquire 和 tryRelease）</td></tr></tbody></table><h2 id="_5-参考文章" tabindex="-1"><a class="header-anchor" href="#_5-参考文章" aria-hidden="true">#</a> 5. 参考文章</h2>`,80),b={href:"https://javaguide.cn",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.bilibili.com/video/BV1Fd4y1b7Qp/?spm_id_from=333.788&vd_source=2716833caf2bf21200544dca2cc25e03",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.cnblogs.com/xijiu/p/14522224.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html",target:"_blank",rel:"noopener noreferrer"};function w(f,_){const t=p("router-link"),o=p("ExternalLinkIcon");return l(),i("div",null,[n("details",r,[k,n("nav",v,[n("ul",null,[n("li",null,[s(t,{to:"#_1-什么是-aqs"},{default:e(()=>[a("1. 什么是 AQS")]),_:1})]),n("li",null,[s(t,{to:"#_2-aqs-模板方法"},{default:e(()=>[a("2. AQS 模板方法")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_2-1-自定义同步类"},{default:e(()=>[a("2.1 自定义同步类")]),_:1})]),n("li",null,[s(t,{to:"#_2-2-测试-mylatch"},{default:e(()=>[a("2.2 测试 MyLatch")]),_:1})]),n("li",null,[s(t,{to:"#_2-3-常用工具类的实现"},{default:e(()=>[a("2.3 常用工具类的实现")]),_:1})])])]),n("li",null,[s(t,{to:"#_3-aqs-底层原理"},{default:e(()=>[a("3. AQS 底层原理")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_3-1-同步状态-state"},{default:e(()=>[a("3.1 同步状态 state")]),_:1})]),n("li",null,[s(t,{to:"#_3-2-同步等待队列-clh"},{default:e(()=>[a("3.2 同步等待队列 CLH")]),_:1})])])]),n("li",null,[s(t,{to:"#_4-aqs-应用场景"},{default:e(()=>[a("4. AQS 应用场景")]),_:1})]),n("li",null,[s(t,{to:"#_5-参考文章"},{default:e(()=>[a("5. 参考文章")]),_:1})])])])]),m,n("ul",null,[n("li",null,[n("a",b,[a("JavaGuide"),s(o)])]),n("li",null,[n("a",g,[a("AQS 源码分析（一）"),s(o)])]),n("li",null,[n("a",h,[a("深入理解 Java 并发框架 AQS 系列"),s(o)])]),n("li",null,[n("a",y,[a("从 ReentrantLock 的实现看 AQS 的原理及应用"),s(o)])])])])}const A=c(d,[["render",w],["__file","AQS入门：简单了解.html.vue"]]);export{A as default};
