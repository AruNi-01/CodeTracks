const e=JSON.parse('{"key":"v-2dbe33d8","path":"/backend/framework/small-spring/ioc/%E7%AC%AC03%E7%AB%A0%EF%BC%9A%E5%AE%9E%E7%8E%B0%E5%90%AB%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%AD%96%E7%95%A5.html","title":"第03章：实现含构造函数的类实例化策略","lang":"zh-CN","frontmatter":{"title":"第03章：实现含构造函数的类实例化策略","date":"2023-03-12T00:00:00.000Z","order":3,"category":["框架"],"tag":["Spring"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 1. 设计 在第02章的设计中，虽然扩充了 Bean 容器的功能，将类的实例化交给了容器来处理，但是并 没有考虑到带有有参构造器的类的实例化，因此这章我们来进行改造，使其具备获取有参 Bean 的能力。 具体的，在 BeanFactory 中添加 Object getBean(String name, Object... args) 接口，即可在获取 Bean 的时候把构造函数的入参信息传递进去，从而能实例化有参数的 Bean 对象。","head":[["meta",{"property":"og:url","content":"https://code.0x3f4.run/backend/framework/small-spring/ioc/%E7%AC%AC03%E7%AB%A0%EF%BC%9A%E5%AE%9E%E7%8E%B0%E5%90%AB%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"第03章：实现含构造函数的类实例化策略"}],["meta",{"property":"og:description","content":"本文内容 1. 设计 在第02章的设计中，虽然扩充了 Bean 容器的功能，将类的实例化交给了容器来处理，但是并 没有考虑到带有有参构造器的类的实例化，因此这章我们来进行改造，使其具备获取有参 Bean 的能力。 具体的，在 BeanFactory 中添加 Object getBean(String name, Object... args) 接口，即可在获取 Bean 的时候把构造函数的入参信息传递进去，从而能实例化有参数的 Bean 对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T16:55:13.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2023-03-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T16:55:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第03章：实现含构造函数的类实例化策略\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-25T16:55:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 设计","slug":"_1-设计","link":"#_1-设计","children":[]},{"level":2,"title":"2. 实现","slug":"_2-实现","link":"#_2-实现","children":[]},{"level":2,"title":"3. 测试","slug":"_3-测试","link":"#_3-测试","children":[]},{"level":2,"title":"4. 流程","slug":"_4-流程","link":"#_4-流程","children":[]}],"git":{"createdTime":1700931313000,"updatedTime":1700931313000,"contributors":[{"name":"MECHREVO_GGPRO\\\\AarynLu","email":"hello@0x3f4.run","commits":1}]},"readingTime":{"minutes":2.29,"words":686},"filePathRelative":"backend/framework/small-spring/ioc/第03章：实现含构造函数的类实例化策略.md","localizedDate":"2023年3月12日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<h2> 1. 设计</h2>\\n<p>在第02章的设计中，虽然扩充了 Bean 容器的功能，将类的实例化交给了容器来处理，但是并 <strong>没有考虑到带有有参构造器的类的实例化</strong>，因此这章我们来进行改造，使其具备获取有参 Bean 的能力。</p>\\n<p>具体的，在 BeanFactory 中添加 <code>Object getBean(String name, Object... args)</code> 接口，即可在获取 Bean 的时候把构造函数的入参信息传递进去，从而能实例化有参数的 Bean 对象。</p>","autoDesc":true}');export{e as data};
