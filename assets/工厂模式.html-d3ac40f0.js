import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as a,w as e,e as i,b as t}from"./app-1cf94a9c.js";const u={},r={class:"hint-container details"},k=n("summary",null,"本文内容",-1),d={class:"table-of-contents"},v=i(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>除了上一章讲的单例模式外，还有一个比较常用的创建型模式：<strong>工厂模式</strong>。</p><p>工厂模式可以分为三种类型：<strong>简单工厂、工厂方法和抽象工厂</strong>。在本章中，除了了解工厂模式的原理和实现之外，更重要的是搞清楚下面两个问题：</p><ul><li><strong>什么时候应该使用工厂模式</strong>？</li><li><strong>相对于直接 new 来创建对象，工厂模式有什么好处</strong>？</li></ul></div><h2 id="_1-简单工厂" tabindex="-1"><a class="header-anchor" href="#_1-简单工厂" aria-hidden="true">#</a> 1. 简单工厂</h2><p><strong>简单工厂模式</strong> 又称为 <strong>静态方法模式</strong>（因为工厂类定义了一个创建对象的静态方法），简单工厂模式可以理解为 <strong>一个专门负责生产对象的 “工厂类”</strong>。</p><p>简单工厂有两种实现方式，分别是常规的实现和结合单例的实现。</p><h3 id="_1-1-常规的简单工厂" tabindex="-1"><a class="header-anchor" href="#_1-1-常规的简单工厂" aria-hidden="true">#</a> 1.1 常规的简单工厂</h3><p>下面用一个配置文件解析器的例子来说明，比如可以根据配置文件的后缀（json、xml、yaml 等），选择不同的解析器（JsonRuleConfigParser、XmlRuleConfigParser……），将存储在文件中的配置解析成内存对象 RuleConfig。那么我们可以用如下代码来实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleConfigSource</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">RuleConfig</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> ruleConfigFilePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> ruleConfigFileExtension <span class="token operator">=</span> <span class="token function">getFileExtension</span><span class="token punctuation">(</span>ruleConfigFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IRuleConfigParser</span> parser <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ruleConfigFileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ruleConfigFileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;yaml&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ruleConfigFileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidRuleConfigException</span><span class="token punctuation">(</span><span class="token string">&quot;Rule config file format is not supported: &quot;</span> <span class="token operator">+</span> ruleConfigFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> configText <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// ...从 ruleConfigFilePath 文件中读取配置文本到 configText 中...</span>
    <span class="token class-name">RuleConfig</span> ruleConfig <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>configText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ruleConfig<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getFileExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...解析文件名获取扩展名，比如 rule.json，返回 json</span>
    <span class="token keyword">return</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码是一个原始的实现，实际上，我们应该 <strong>把创建对象的步骤提取到一个独立的类中，让这个类只负责对象的创建</strong>，这样才能使 <strong>类的职责更单一、代码更清晰</strong>。</p><p>我们 <strong>将只负责创建对象的这个类称为工厂类，里面提供一个创建解析器的静态方法</strong>，这就是 <strong>简单工厂模式</strong>。具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 工厂类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleConfigParserFactory</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IRuleConfigParser</span> <span class="token function">createParser</span><span class="token punctuation">(</span><span class="token class-name">String</span> configFormat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">IRuleConfigParser</span> parser <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configFormat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configFormat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;yaml&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configFormat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> parser<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们在获取解析器的时候，就可以直接调用工厂类中的 <code>createParser()</code> 创建了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleConfigSource</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">RuleConfig</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> ruleConfigFilePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> ruleConfigFileExtension <span class="token operator">=</span> <span class="token function">getFileExtension</span><span class="token punctuation">(</span>ruleConfigFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从工厂类中获取解析器</span>
    <span class="token class-name">IRuleConfigParser</span> parser <span class="token operator">=</span> <span class="token class-name">RuleConfigParserFactory</span><span class="token punctuation">.</span><span class="token function">createParser</span><span class="token punctuation">(</span>ruleConfigFileExtension<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidRuleConfigException</span><span class="token punctuation">(</span><span class="token string">&quot;Rule config file format is not supported: &quot;</span> <span class="token operator">+</span> ruleConfigFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> configText <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// ...从 ruleConfigFilePath 文件中读取配置文本到 configText 中...</span>
    <span class="token class-name">RuleConfig</span> ruleConfig <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>configText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ruleConfig<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getFileExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...解析文件名获取扩展名，比如 rule.json，返回 json</span>
    <span class="token keyword">return</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>大部分工厂类都是以 &quot;Factory&quot; 结尾，但也不是必须的，比如 Java 中的 DateFormat、Calender 等。</p><p>而工厂类中创建对象的方法一般都是以 &quot;create&quot; 开头，但有的也命名为 <code>getInstance()</code>、<code>newInstance()</code>，甚至命名为 <code>valueOf()</code>（Java String 类的 <code>valueOf()</code> 方法）。</p></blockquote><p>类图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304011237869.png" alt="image-20230401123712510" loading="lazy"></p><h3 id="_1-2-结合单例的简单工厂" tabindex="-1"><a class="header-anchor" href="#_1-2-结合单例的简单工厂" aria-hidden="true">#</a> 1.2 结合单例的简单工厂</h3><p>在上面的代码中，我们每次调用 RuleConfigParserFactory 的 <code>createParser()</code> 时，都会创建一个新的对象返回。但是如果 <strong>Parser 可以复用，那么我们就可以先将 Parser 缓存起来</strong>，而不用每次需要时都去新创建一个 Parser 对象了。</p><p>这有点类似于 <strong>单例模式和简单工厂模式的结合</strong>，具体代码实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleConfigParserFactory</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">RuleConfigParser</span><span class="token punctuation">&gt;</span></span> cachedParsers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token punctuation">{</span>
    cachedParsers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JsonRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cachedParsers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">XmlRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cachedParsers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;yaml&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">YamlRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IRuleConfigParser</span> <span class="token function">createParser</span><span class="token punctuation">(</span><span class="token class-name">String</span> configFormat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>configFormat <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> configFormat<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>	<span class="token comment">// 返回 null 还是 IllegalArgumentException 全凭你自己说了算</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">IRuleConfigParser</span> parser <span class="token operator">=</span> cachedParsers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>configFormat<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> parser<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304011243075.png" alt="image-20230401124308412" loading="lazy"></p><h3 id="_1-3-小结" tabindex="-1"><a class="header-anchor" href="#_1-3-小结" aria-hidden="true">#</a> 1.3 小结</h3><p>在上面的两种简单工厂的实现方式中，如果需要添加新的 Parser，那就需要修改 RuleConfigParserFactory 工厂类中的代码（第一种需要添加 if-else 分支，第二种需要在容器中添加新的 Parser），这不是违背了开闭原则呢？实际上，<strong>如果不是需要频繁的添加新的 Parser，偶尔修改一下工厂类中的代码，也是可以接受的</strong>。</p><p>此外，还发现在第一种实现中，RuleConfigParserFactory 中有一组 if-else 分支判断，是否应该用多态或其他设计模式来代替呢？实际上，<strong>如果 if-else 分支不是很多，也是可以接受的</strong>。而如果使用多态或其他设计模式来代替，<strong>虽然提高了代码的扩展性，更符合开闭原则，但也随之增加了类的个数，牺牲了代码的可读性</strong>。后面马上就会讲到。</p><p>所以，我们需要根据实际情况进行设计，不是非要一味地追求极致，我们需要 <strong>在扩展性和可读性之间做权衡</strong>。</p><h2 id="_2-工厂方法" tabindex="-1"><a class="header-anchor" href="#_2-工厂方法" aria-hidden="true">#</a> 2. 工厂方法</h2><h3 id="_2-1-工厂方法的引出" tabindex="-1"><a class="header-anchor" href="#_2-1-工厂方法的引出" aria-hidden="true">#</a> 2.1 工厂方法的引出</h3><p>在上面的简单工厂实现中，有很多 if-else 分支，如果想要去掉，比较经典的方法就是利用多态。</p><p>按照多态思想实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRuleConfigParserFactory</span> <span class="token punctuation">{</span>
  <span class="token class-name">IRuleConfigParser</span> <span class="token function">createParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonRuleConfigParserFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IRuleConfigParserFactory</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">IRuleConfigParser</span> <span class="token function">createParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlRuleConfigParserFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IRuleConfigParserFactory</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">IRuleConfigParser</span> <span class="token function">createParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XmlRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlRuleConfigParserFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IRuleConfigParserFactory</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">IRuleConfigParser</span> <span class="token function">createParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">YamlRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是工厂方法模式的典型实现。这样当我们新增一种 Parser 时，只需要新增一个实现 IRuleConfigParserFactory 接口的 Factory 类即可。</p><p>类图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304011303356.png" alt="image-20230401130318831" loading="lazy"></p><p><strong>简单工厂的创建对象逻辑都在同一个工厂类中，而工厂方法则将不同对象的创建逻辑放在了不同的子工厂类中，所以工厂方法模式比简单工厂模式更加符合开闭原则</strong>。</p><p><strong>工厂方法模式</strong>，又称为多态工厂模式，它的定义是：<strong>通过定义一个工厂父类来负责定义创建对象的公共接口，而子类则负责生成具体的对象</strong>。</p><h3 id="_2-2-工厂方法存在的问题" tabindex="-1"><a class="header-anchor" href="#_2-2-工厂方法存在的问题" aria-hidden="true">#</a> 2.2 工厂方法存在的问题</h3><p>从上面的实现来看，好像解决了工厂类中的开闭原则问题。但是，我们如何使用上面的那些工厂类呢？下面来看看：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleConfigSource</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">RuleConfig</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> ruleConfigFilePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> ruleConfigFileExtension <span class="token operator">=</span> <span class="token function">getFileExtension</span><span class="token punctuation">(</span>ruleConfigFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">IRuleConfigParserFactory</span> parserFactory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ruleConfigFileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parserFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonRuleConfigParserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ruleConfigFileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parserFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlRuleConfigParserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;yaml&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ruleConfigFileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parserFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlRuleConfigParserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidRuleConfigException</span><span class="token punctuation">(</span><span class="token string">&quot;Rule config file format is not supported: &quot;</span> <span class="token operator">+</span> ruleConfigFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">IRuleConfigParser</span> parser <span class="token operator">=</span> parserFactory<span class="token punctuation">.</span><span class="token function">createParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> configText <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// ...从 ruleConfigFilePath 文件中读取配置文本到 configText 中...</span>
    <span class="token class-name">RuleConfig</span> ruleConfig <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>configText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ruleConfig<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getFileExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...解析文件名获取扩展名，比如 rule.json，返回 json</span>
    <span class="token keyword">return</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，<strong>工厂类的对象创建逻辑又耦合进了更上一层的使用类中</strong>，所以工厂方法并没有实际解决掉这个问题，反而让类的设计变更复杂了。</p><p>想要解决这个问题，我们可以 <strong>为工厂类再创建一个简单工厂，用于创建工厂类对象</strong>。</p><p>因为各工厂类只包含方法，不包含成员变量，完全可以复用，不需要每次都创建新的工厂类对象。所以，我们使用结合单例的简单工厂模式更加合适。</p><p>具体来说，我们定义一个 RuleConfigParserFactoryMap 类作为创建工厂对象的工厂类，<code>getParserFactory()</code> 用于返回缓存好的单例工厂对象，实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleConfigSource</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">RuleConfig</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> ruleConfigFilePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> ruleConfigFileExtension <span class="token operator">=</span> <span class="token function">getFileExtension</span><span class="token punctuation">(</span>ruleConfigFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">IRuleConfigParserFactory</span> parserFactory <span class="token operator">=</span> <span class="token class-name">RuleConfigParserFactoryMap</span><span class="token punctuation">.</span><span class="token function">getParserFactory</span><span class="token punctuation">(</span>ruleConfigFileExtension<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parserFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidRuleConfigException</span><span class="token punctuation">(</span><span class="token string">&quot;Rule config file format is not supported: &quot;</span> <span class="token operator">+</span> ruleConfigFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">IRuleConfigParser</span> parser <span class="token operator">=</span> parserFactory<span class="token punctuation">.</span><span class="token function">createParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> configText <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// ...从 ruleConfigFilePath 文件中读取配置文本到 configText 中...</span>
    <span class="token class-name">RuleConfig</span> ruleConfig <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>configText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ruleConfig<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getFileExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...解析文件名获取扩展名，比如 rule.json，返回 json</span>
    <span class="token keyword">return</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 工厂的工厂</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleConfigParserFactoryMap</span> <span class="token punctuation">{</span> 
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IRuleConfigParserFactory</span><span class="token punctuation">&gt;</span></span> cachedFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token punctuation">{</span>
    cachedFactories<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JsonRuleConfigParserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cachedFactories<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">XmlRuleConfigParserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cachedFactories<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;yaml&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">YamlRuleConfigParserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IRuleConfigParserFactory</span> <span class="token function">getParserFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">IRuleConfigParserFactory</span> parserFactory <span class="token operator">=</span> cachedFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> parserFactory<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，这样的实现方式其实就是再抽象出一个单例的简单工厂，把 if-else 分支使用一个 Map 来代替了。</p><p>类图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304011312688.png" alt="image-20230401131206101" loading="lazy"></p><p>上面这个配置文件解析器的例子只是为了帮助我们学习工厂模式，实际对于这个例子而言，<strong>简单工厂模式比工厂方法模式更加合适</strong>，因为我们这里 <strong>对每个 Factory 类只是做简单的 new 操作，功能非常单薄，没必要设计成单独的类，增加代码的复杂性</strong>。</p><h3 id="_2-3-什么时候使用工厂方法-而非简单工厂呢" tabindex="-1"><a class="header-anchor" href="#_2-3-什么时候使用工厂方法-而非简单工厂呢" aria-hidden="true">#</a> 2.3 什么时候使用工厂方法，而非简单工厂呢？</h3><p>我们知道，如果要将某个代码块抽取出来，独立为一个函数或类，是因为这个代码块的逻辑过于复杂，抽取后能让代码逻辑更清晰、更加可读和可维护。但是，<strong>如果代码块本身就不复杂，就几行代码，那我们就完全没必要将它抽取成单独的函数或类了</strong>。</p><p>将上面的思想类比到工厂模式中来，可以得出：<strong>当对象的创建逻辑比较复杂（例如需要组合其他类对象，做各种初始化操作），那就推荐使用工厂方法模式</strong>，将复杂的创建逻辑拆分到多个工厂类中，而如果使用简单工厂模式，将所有的创建逻辑都放到一个工厂类中，就会导致这个工厂类过于复杂。</p><h2 id="_3-抽象工厂" tabindex="-1"><a class="header-anchor" href="#_3-抽象工厂" aria-hidden="true">#</a> 3. 抽象工厂</h2><p>抽象工厂模式的应用场景有些特殊，没有前两种常用，下面简单的了解一下。</p><p>如果 <strong>类有两种分类方式</strong>，比如上个例子中，我们除了根据配置文件格式（Json、Xml、Yaml......）进行分类，如果还要根据解析的对象（Rule 规则配置、System 系统配置）进行分类，那么就会对应下面 6 种 Parser 类：</p><ul><li>针对规则配置的解析器，基于接口 IRuleConfigParser： <ul><li>JsonRuleConfigParser</li><li>XmlRuleConfigParser</li><li>YamlRuleConfigParser</li></ul></li><li>针对系统配置的解析器，基于接口 ISystemConfigParser： <ul><li>JsonSystemConfigParser</li><li>XmlSystemConfigParser</li><li>YamlSystemConfigParser</li></ul></li></ul><p>针对这种特殊的场景，如果使用工厂方法实现，就要针对每个 Parser 都编写工厂类，那么就会有 6 各工厂类。而如果后续还要继续增加根据业务配置的解析器（如 IBizConfigParser），那就要再对应地增加 3 个工厂类。类过多就会导致系统难以维护。</p><p>这时候，就要有请抽象工厂出场了。我们可以让一个工厂负责创建多个不同类型的对象（IRuleConfigParser、ISystemConfigParser 等），而不是只创建一种 Parser 对象，这样就可以减少工厂类的个数。具体代码实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// IConfigParserFactory 工厂，负责创建不同类型的对象</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IConfigParserFactory</span> <span class="token punctuation">{</span>
  <span class="token class-name">IRuleConfigParser</span> <span class="token function">createRuleParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ISystemConfigParser</span> <span class="token function">createSystemParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 此处可以扩展新的 parser 类型，比如 IBizConfigParser</span>
<span class="token punctuation">}</span>

<span class="token comment">// Json 类型的解析器工厂，里面提供创建不同类型的对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonConfigParserFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IConfigParserFactory</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">IRuleConfigParser</span> <span class="token function">createRuleParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">ISystemConfigParser</span> <span class="token function">createSystemParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonSystemConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Xml 类型的解析器工厂</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlConfigParserFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IConfigParserFactory</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">IRuleConfigParser</span> <span class="token function">createRuleParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XmlRuleConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">ISystemConfigParser</span> <span class="token function">createSystemParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XmlSystemConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 省略 YamlConfigParserFactory</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用时，就可以直接根据不同解析对象的类型和不同的配置文件格式来创建不同的解析器了。</p><p>类图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202304011356428.png" alt="" loading="lazy"></p><p>有没有发现，抽象工厂其实就是：<strong>如果不只是一种分类时，可以在接口中定义第二个分类维度</strong>，从而减少需要创建的工厂类。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>本章主要讲了三种工厂模式，它们的实现方式在上面的代码和类图中都已经表达得非常清楚了，那么下面就来总结一下它们的使用场景。</p><p>如果 <strong>创建逻辑比较复杂</strong>，那么就考虑使用工厂模式，封装对象的创建过程，<strong>将对象的创建和使用分离开来</strong>。判断创建逻辑是否复杂，可以根据如下依据：</p><ul><li><p>代码中存在 if-else 分支判断，<strong>需要动态地根据不同类型创建不同的对象</strong>：</p><blockquote><p>在这种情况下，<strong>如果每个对象的创建逻辑都比较简单，那么直接使用简单工厂模式，将多个对象的创建逻辑都放到一个工厂类中即可。相反，若每个对象的创建逻辑都比较复杂时，为了避免一个工厂类过于庞大，推荐使用工厂方法模式，将创建逻辑拆分得更细，每个对象的创建逻辑独立到各自的工厂类中</strong>。</p></blockquote></li><li><p>尽管不需要根据不同类型创建不同对象，但 <strong>单个对象本身的创建过程比较复杂时</strong>，也可以考虑使用工厂模式，将对象的创建过程封装到工厂类中：</p><blockquote><p>在这种情况下，<strong>由于单个对象本身的创建逻辑就比较复杂，因此直接使用工厂方法模式即可</strong>。</p></blockquote></li></ul><p>除此之外，如果创建对象的逻辑并不复杂，那我们直接通过 new 来创建对象即可，不必使用工厂模式。</p><p>最后再来总结一下 <strong>工厂模式的作用</strong>：</p><ul><li><strong>封装变化</strong>：创建逻辑可能会发生变化，封装成工厂模式后，创建逻辑的变化对调用者更透明；</li><li><strong>代码复用</strong>：创建对象的逻辑抽取到独立的工厂类后，可以进行复用；</li><li><strong>隔离复杂性</strong>：封装复杂的创建逻辑，调用者无需了解如何具体的创建对象；</li><li><strong>控制复杂度</strong>：将创建对象的逻辑抽取出来，让原本的函数或类职责更单一，代码更简洁。</li></ul>`,68);function m(g,f){const s=o("router-link");return c(),l("div",null,[n("details",r,[k,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#_1-简单工厂"},{default:e(()=>[t("1. 简单工厂")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_1-1-常规的简单工厂"},{default:e(()=>[t("1.1 常规的简单工厂")]),_:1})]),n("li",null,[a(s,{to:"#_1-2-结合单例的简单工厂"},{default:e(()=>[t("1.2 结合单例的简单工厂")]),_:1})]),n("li",null,[a(s,{to:"#_1-3-小结"},{default:e(()=>[t("1.3 小结")]),_:1})])])]),n("li",null,[a(s,{to:"#_2-工厂方法"},{default:e(()=>[t("2. 工厂方法")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_2-1-工厂方法的引出"},{default:e(()=>[t("2.1 工厂方法的引出")]),_:1})]),n("li",null,[a(s,{to:"#_2-2-工厂方法存在的问题"},{default:e(()=>[t("2.2 工厂方法存在的问题")]),_:1})]),n("li",null,[a(s,{to:"#_2-3-什么时候使用工厂方法-而非简单工厂呢"},{default:e(()=>[t("2.3 什么时候使用工厂方法，而非简单工厂呢？")]),_:1})])])]),n("li",null,[a(s,{to:"#_3-抽象工厂"},{default:e(()=>[t("3. 抽象工厂")]),_:1})]),n("li",null,[a(s,{to:"#_4-总结"},{default:e(()=>[t("4. 总结")]),_:1})])])])]),v])}const w=p(u,[["render",m],["__file","工厂模式.html.vue"]]);export{w as default};
