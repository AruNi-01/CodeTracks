import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,b as n,e as a,w as t,a as c,d as e}from"./app-bb331e56.js";const r={},u={class:"hint-container details"},d=n("summary",null,"本文内容",-1),v={class:"table-of-contents"},g=c(`<div class="hint-container info"><p class="hint-container-title">前言</p><p>当通过注册中心获取到了某个服务的可用节点列表后，就可以对节点发起请求了。</p><p>但是，这个列表中一般都 <strong>包含了多个节点</strong>，那客户端应该选择哪一个呢？这就需要引入 <strong>负载均衡</strong> 了。</p></div><h2 id="_1-负载均衡有什么用" tabindex="-1"><a class="header-anchor" href="#_1-负载均衡有什么用" aria-hidden="true">#</a> 1. 负载均衡有什么用？</h2><p>为什么要引入负载均衡呢？当客户端得到一个可用节点列表后，随便选一个不都可以请求成功吗？</p><p>是的，随便选一个也能保证服务能正常请求，但是我们需要考虑下面几点：</p><ul><li>如果每次随便选择的节点都是同一个，那么该节点将会承受所有请求，导致性能下降甚至出现故障；</li><li>可用节点列表中的各节点的性能如果不同，那么选到一个性能低的节点则会导致请求耗时更长，这肯定不是客户端想要的；</li><li>随便选择节点可能会导致某些节点永远都选不到的情况，这样就无法发挥所有节点的作用了。</li></ul><p>所以，引入负载均衡是很有必要的，负载均衡算法选的好，能让微服务项目 <strong>可用性更好、性能更强、机器的利用率更高</strong>，能为客户端选出 <strong>最合适的节点</strong>。</p><p>下面就来看看常见的负载均衡算法有哪些，我们又该如何选择？</p><h2 id="_2-常见负载均衡算法" tabindex="-1"><a class="header-anchor" href="#_2-常见负载均衡算法" aria-hidden="true">#</a> 2. 常见负载均衡算法</h2><p>负载均衡算法分为两大类，分别是：</p><ul><li><strong>静态负载均衡算法</strong>：<strong>统计学上的 “最合适”</strong>，在系统运行期间不能动态切换到真正合适的节点；</li><li><strong>动态负载均衡算法</strong>：能够 <strong>实时检测</strong> 的负载均衡算法，在系统运行期间能够实时判断候选节点的状态，从而选出此时最合适的节点。</li></ul><p>常见的静态负载均衡算法有：<strong>轮询、加权轮询、随机、加权随机、哈希以及一致性哈希</strong>。</p><p>常见的动态负载均衡算法有：<strong>最少连接、最少活跃请求数、最快响应时间等</strong>。</p><p>下面我按照先静态负载均衡、后动态负载均衡的顺序，来讲讲这几种常用的算法。</p><h3 id="_2-1-轮询与加权轮询" tabindex="-1"><a class="header-anchor" href="#_2-1-轮询与加权轮询" aria-hidden="true">#</a> 2.1 轮询与加权轮询</h3><div class="hint-container tip"><p class="hint-container-title">轮询</p></div><p><strong>轮询</strong> 是最简单、也最常用的负载均衡算法，它其实就是 <strong>按照顺序轮流的作为目标节点</strong>。</p><p>比如服务端一共有 3 个节点，那么客户端请求时，被选中的节点顺序就是 <code>node1 -&gt; ndoe2 -&gt; node3 -&gt; node1 -&gt; ......</code></p><div class="hint-container tip"><p class="hint-container-title">加权轮询</p></div><p>但是，由于每个节点的性能是不一样的，比如 CPU 频率、核数、内存大小等，所以我们可以 <strong>让性能高的节点多处理一些请求</strong>，这就是 <strong>加权轮询</strong>。</p><p>比如 node1 的性能比较高，我们将它的权重调为其他 2 个节点的三倍，那么 node1 被选中的次数也会是其他 2 个节点的三倍。被选中的节点顺序就是 <code>3 次 node1 -&gt; node2 -&gt; node3 -&gt; 3 次 node1 -&gt; ......</code></p><p>但是，如果某个节点的权重倍数过大，加权轮询算法就会 <strong>导致多个请求都连续请求到一个节点</strong>，一旦该节点发生意外，后面连续几次请求也都会跟着失败。</p><div class="hint-container tip"><p class="hint-container-title">平滑的加权轮询</p></div><p>为了解决这个问题，有个改进叫做 <strong>平滑的加权轮询算法</strong>，这个算法可以保证 <strong>在整体请求次数根据权重合理分配的前提下，让连续的请求依次分配给不同的节点</strong>。</p><p>平滑的加权轮询算法，每个节点会有两个权重，<strong>初始权重</strong>（initWeight）和 <strong>当前权重</strong>（currentWeight），算法步骤如下：</p><ol><li>对每个节点，执行 currentWeight = currentWeight + initWeight；</li><li>将 currentWeight 最大的节点作为目标节点；</li><li>将目标节点的 currentWeight 修改为 currentWeight = currrentWeight - sum(initWeight)，对所有节点的 initWeight 求和。</li></ol><p>通过以上步骤，<strong>每个节点在被挑选后，currentWeight 就会下降，下一次就不会选中它，而经过几轮后，他的权重又会升回来</strong>。</p><p>我用 Python 简单的模拟了上面的步骤，可以看到每次请求都分配到了不同的节点上：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 平滑的加权轮询算法</span>
initWeight <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;node-1&#39;</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&#39;node-2&#39;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;node-3&#39;</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;node-4&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span>
currentWeight <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;node-1&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;node-2&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;node-3&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;node-4&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
hitNode <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment"># 节点命中情况</span>
hitNodeCnt <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment"># 节点命中次数</span>
initWeightSum <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>initWeight<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 计算当前权重</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            node <span class="token operator">=</span> <span class="token string">&#39;node-&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
            currentWeight<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> initWeight<span class="token punctuation">[</span>node<span class="token punctuation">]</span>

        <span class="token comment"># 选出节点</span>
        max_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>currentWeight<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        max_keys <span class="token operator">=</span> <span class="token punctuation">[</span>key <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> currentWeight<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">==</span> max_value<span class="token punctuation">]</span>
        hit <span class="token operator">=</span> max_keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment"># 无论多少个 key，只选第一个（随机）</span>
        hitNode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> hit
        hitNodeCnt<span class="token punctuation">[</span>hit<span class="token punctuation">]</span> <span class="token operator">=</span> hitNodeCnt<span class="token punctuation">.</span>get<span class="token punctuation">(</span>hit<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>

        <span class="token comment"># 扣减当前权重</span>
        currentWeight<span class="token punctuation">[</span>hit<span class="token punctuation">]</span> <span class="token operator">-=</span> initWeightSum


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    calculate<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> hitNode<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;轮次:&#39;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token string">&#39;，命中节点:&#39;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;============================&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> hitNodeCnt<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;节点:&#39;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token string">&#39;，命中次数:&#39;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>轮次: 1 ，命中节点: node-4
轮次: 2 ，命中节点: node-1
轮次: 3 ，命中节点: node-3
轮次: 4 ，命中节点: node-2
轮次: 5 ，命中节点: node-4
轮次: 6 ，命中节点: node-1
轮次: 7 ，命中节点: node-3
轮次: 8 ，命中节点: node-2
轮次: 9 ，命中节点: node-4
轮次: 10 ，命中节点: node-1
轮次: 11 ，命中节点: node-3
轮次: 12 ，命中节点: node-4
轮次: 13 ，命中节点: node-1
轮次: 14 ，命中节点: node-2
轮次: 15 ，命中节点: node-3
轮次: 16 ，命中节点: node-4
轮次: 17 ，命中节点: node-1
轮次: 18 ，命中节点: node-4
轮次: 19 ，命中节点: node-3
轮次: 20 ，命中节点: node-2
轮次: 21 ，命中节点: node-1
轮次: 22 ，命中节点: node-4
轮次: 23 ，命中节点: node-3
轮次: 24 ，命中节点: node-1
轮次: 25 ，命中节点: node-4
轮次: 26 ，命中节点: node-2
轮次: 27 ，命中节点: node-3
轮次: 28 ，命中节点: node-1
轮次: 29 ，命中节点: node-4
轮次: 30 ，命中节点: node-2
轮次: 31 ，命中节点: node-3
轮次: 32 ，命中节点: node-1
轮次: 33 ，命中节点: node-4
轮次: 34 ，命中节点: node-4
轮次: 35 ，命中节点: node-1
轮次: 36 ，命中节点: node-3
轮次: 37 ，命中节点: node-2
轮次: 38 ，命中节点: node-4
轮次: 39 ，命中节点: node-1
轮次: 40 ，命中节点: node-3
============================
节点: node-4 ，命中次数: 12
节点: node-1 ，命中次数: 11
节点: node-3 ，命中次数: 10
节点: node-2 ，命中次数: 7

Process finished with exit code 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，每次请求是比较平均的，没有连续请求一个节点的情况出现。</p><h3 id="_2-2-随机与加权随机" tabindex="-1"><a class="header-anchor" href="#_2-2-随机与加权随机" aria-hidden="true">#</a> 2.2 随机与加权随机</h3><div class="hint-container tip"><p class="hint-container-title">随机</p></div><p>随机就和我们开篇讲的一样，随便挑选一个节点即可。而加权随机则是通过权重来判断被选中的概率，权重越大，被选中的概率就越大。</p><p>比如，node1 权重为 30，node2 为 10， node3 为 10，那么当生成一个随机数（50 以内）后，落到它们的区间分为是：</p><ul><li>node1：20 &lt;= 随机数 &lt; 50；</li><li>node2：10 &lt;= 随机数 &lt; 20；</li><li>node3：10 &lt;= 随机数。</li></ul><h3 id="_2-3-哈希与一致性哈希" tabindex="-1"><a class="header-anchor" href="#_2-3-哈希与一致性哈希" aria-hidden="true">#</a> 2.3 哈希与一致性哈希</h3><div class="hint-container tip"><p class="hint-container-title">哈希</p></div><p><strong>哈希</strong> 会选取请求中的某些参数来做 <strong>哈希计算得到一个哈希值，然后对节点数量取余</strong>，即可得到目标节点的编号。</p><p>比如下面：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202307082115847.png" alt="image-20230708210723057" loading="lazy"></p><p>可以发现，这和随机算法类似，只不过 <strong>哈希是通过固定的几个参数来计算的，而随机是通过随机数</strong>。</p><p><strong>哈希算法的选取会严重影响负载均衡的效果</strong>，所以要保证该算法计算出来的结果是均匀的，否则就会出现节点负载不均衡的现象。</p><div class="hint-container info"><p class="hint-container-title">扩展点</p><p>如果节点用来做缓存时，当使用哈希算法来请求数据时，还有另外一个问题，就是 <strong>节点发生变化时，会带来大规模的数据迁移</strong>。</p><p>因为哈希值需要对节点数量取余，所以当节点数量发生变化时，就需要讲数据重新进行运算了，否则按照原来的计算就会拿到错误的数据。</p><p>这可以通过 <strong>一致性哈希</strong> 来很好的解决。</p><blockquote><p>当然了，负载均衡不会存在该问题，因为这里的节点不缓存数据。</p></blockquote></div><div class="hint-container tip"><p class="hint-container-title">一致性哈希</p></div><p>一致性哈希算法引入了 <strong>哈希环</strong> 的概念，它的取模规则与哈希算法不同，是 <strong>对 2^32 进行取模运算</strong>，而不是对节点数量进行取模，所以 <strong>得到的都是一个固定的值</strong>，这些值落到哈希环的各个地方。</p><p>一致性哈希算法的 <strong>流程</strong> 如下：</p><ul><li>先用某个 <strong>key 对 2^32 进行取模运算</strong>，得到一个点位；</li><li>接着 <strong>顺时针找到第一个节点</strong>（节点的点位提前计算设置好），此 key 就映射到该节点上。</li></ul><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202307082125128.png" alt="image-20230708212517804" loading="lazy"></p><p>但由于 <strong>节点的分布在哈希环上不能保证均匀</strong>，所以可能会出现 <strong>请求倾斜</strong> 的现象。</p><p>解决平均问题最简单的办法就是通过增加数量，所以我们可以在哈希环上增加节点的数量，但又不能真的添加节点的数量，毕竟我们没这么多的节点。</p><p>一致性哈希算法一般会通过 <strong>虚拟节点</strong> 来解决，以 <strong>提高均衡度</strong>，具体来说，可以加多一层映射关系，<strong>将大量虚拟节点放在哈希环上</strong>，进行哈希映射时，<strong>先映射到虚拟节点上，然后再从虚拟节点映射到真实节点</strong>，虚拟节点与真实节点是 <strong>多对一</strong> 的关联，这样即可保证节点在哈希环的相对均匀了。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202307082301751.png" alt="img" loading="lazy"></p><div class="hint-container info"><p class="hint-container-title">扩展点</p><p>上面提到的当节点数量发生变化时，大规模数据迁移的问题，在一致性哈希算法中也得到了很好的解决。</p><p>当节点数量发生变化时，由于 <strong>取模运算得到的点位都是固定的</strong>，所以此时 <strong>只会影响到变化节点的一个下游节点</strong>（其他点位还是映射到原来的节点上），从而大大减少了数据迁移的规模。</p></div><h3 id="_2-4-最少连接数" tabindex="-1"><a class="header-anchor" href="#_2-4-最少连接数" aria-hidden="true">#</a> 2.4 最少连接数</h3><p><strong>最少接连数</strong> 需要基于一个假说：<strong>如果某个节点上的连接数越多，那么该节点的负载就越高</strong>。因此在负载均衡的时候就要 <strong>挑选出连接数最少的节点</strong>，以获得更好的性能。</p><p>该算法的 <strong>缺点</strong> 在于，<strong>连接数并不能正确的反映节点的实际负载</strong>，尤其是在多路复用的情况下（一个连接可处理多个请求）。</p><h3 id="_2-5-最少活跃数" tabindex="-1"><a class="header-anchor" href="#_2-5-最少活跃数" aria-hidden="true">#</a> 2.5 最少活跃数</h3><p><strong>最少活跃数</strong> 就是根据节点当前的 <strong>活跃请求数量</strong> 来反映负载情况，<strong>活跃请求是已收到但还没返回的请求</strong>。</p><p>这个活跃请求数 <strong>在客户端维持</strong>，每次发送请求时，<strong>优先选择活跃请求数少的节点</strong>。</p><p>与最少连接数类似，活跃请求数也不能正确反映一个节点的实际负载，因为 <strong>请求可能是大请求</strong>（比如一个请求要处理的数据很多），这样就会出现即使该节点的活跃数少，但实际负载也很高的情况。</p><h3 id="_2-6-最快响应时间" tabindex="-1"><a class="header-anchor" href="#_2-6-最快响应时间" aria-hidden="true">#</a> 2.6 最快响应时间</h3><p><strong>最快响应时间</strong> 用的是 <strong>节点的响应时间</strong> 来反映负载情况，响应时间跟前两个指标比起来，<strong>更加综合、更加准确</strong>。</p><p>该算法也是 <strong>由客户端来维持每个节点的响应时间</strong>，<strong>优先选举响应时间最短的</strong>，说明该节点的性能越高。</p><p>在实际使用时，需要注意 <strong>响应时间的时效性</strong>，一般需要根据最近请求的响应时间来判断，让越近的响应时间，权重越大。也就是 <strong>采集响应时间的效用应该随着时间而衰减</strong>。</p><p>还有另一种思路，根据响应时间自适应的负载均衡算法，能够在大部分情况下保持良好的性能。这个算法也需要在客户端维持一份节点的性能统计快照，每隔一段时间需要更新这个快照。在发起请求时，根据 “二八定律”，把可用节点分为两部分，<strong>找出响应最慢的 20% 节点，降低它们的权重</strong>（节点权重相差不要太大） 。这样便可以根据节点的响应快慢，来动态调整节点的权重。</p><h3 id="_2-7-动态负载均衡算法有啥问题" tabindex="-1"><a class="header-anchor" href="#_2-7-动态负载均衡算法有啥问题" aria-hidden="true">#</a> 2.7 动态负载均衡算法有啥问题</h3><p>前面讲到的三个动态负载均衡算法都有一个小问题，就是数据都是由客户端维持的，而 <strong>不同的客户端数据可能不同</strong>。</p><p>一个解决办法是 <strong>让服务端主动上报</strong>，可以有两种思路：</p><ul><li><p>服务端返回响应时顺便把它的一些信息返回（需要微服务框架支持从服务端往客户端回传链路元数据）：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202307082345078.png" alt="image-20230708234502918" loading="lazy"></p></li><li><p>服务端定时上报自身信息给观察平台，客户端再查询出来：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202307082346442.png" alt="image-20230708234609407" loading="lazy"></p></li></ul><p>不过一般很少使用这么复杂的负载均衡算法，所以大多数微服务框架也不支持服务端上报指标到客户端的机制。</p><h2 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3. 小结</h2><p>常见的负载均衡算法就介绍完了，在静态负载均衡算法中，加权轮询、一致性哈希使用比较多，因此需要好好掌握，在后面的文章中，我也会详细讲解一致性哈希在更多场景下的使用。</p><p>在动态负载均衡算法中，最好使用最快响应时间，因为它能更综合的反映一个节点的实际负载情况。还要注意时效性问题，应当尽量选择近期的响应时间数据。</p>`,74);function k(m,h){const s=o("router-link");return p(),l("div",null,[n("details",u,[d,n("nav",v,[n("ul",null,[n("li",null,[a(s,{to:"#_1-负载均衡有什么用"},{default:t(()=>[e("1. 负载均衡有什么用？")]),_:1})]),n("li",null,[a(s,{to:"#_2-常见负载均衡算法"},{default:t(()=>[e("2. 常见负载均衡算法")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_2-1-轮询与加权轮询"},{default:t(()=>[e("2.1 轮询与加权轮询")]),_:1})]),n("li",null,[a(s,{to:"#_2-2-随机与加权随机"},{default:t(()=>[e("2.2 随机与加权随机")]),_:1})]),n("li",null,[a(s,{to:"#_2-3-哈希与一致性哈希"},{default:t(()=>[e("2.3 哈希与一致性哈希")]),_:1})]),n("li",null,[a(s,{to:"#_2-4-最少连接数"},{default:t(()=>[e("2.4 最少连接数")]),_:1})]),n("li",null,[a(s,{to:"#_2-5-最少活跃数"},{default:t(()=>[e("2.5 最少活跃数")]),_:1})]),n("li",null,[a(s,{to:"#_2-6-最快响应时间"},{default:t(()=>[e("2.6 最快响应时间")]),_:1})]),n("li",null,[a(s,{to:"#_2-7-动态负载均衡算法有啥问题"},{default:t(()=>[e("2.7 动态负载均衡算法有啥问题")]),_:1})])])]),n("li",null,[a(s,{to:"#_3-小结"},{default:t(()=>[e("3. 小结")]),_:1})])])])]),g])}const f=i(r,[["render",k],["__file","常见负载均衡算法.html.vue"]]);export{f as default};
