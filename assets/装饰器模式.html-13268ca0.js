const t=JSON.parse('{"key":"v-218f0af0","path":"/backend/design_pattern/pattern/structure_type/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"装饰器模式","lang":"zh-CN","frontmatter":{"title":"装饰器模式","date":"2023-04-13T00:00:00.000Z","order":3,"category":["设计模式"],"tag":["设计模式与范式"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 前言 装饰器模式也是一种结构型模式，在 Java 的 IO 类中就有使用到，所以下面我们就从 Java IO 类的设计，来看看什么是装饰器模式？使用它有什么好处？它与其他的结构型模式又有什么区别？ 1. Java IO 类 Java 的 IO 类库非常庞大和复杂，有十几个类，我当时在学 IO 操作时就被这些类给绕晕了。","head":[["meta",{"property":"og:url","content":"https://code.0x3f4.run/backend/design_pattern/pattern/structure_type/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"装饰器模式"}],["meta",{"property":"og:description","content":"本文内容 前言 装饰器模式也是一种结构型模式，在 Java 的 IO 类中就有使用到，所以下面我们就从 Java IO 类的设计，来看看什么是装饰器模式？使用它有什么好处？它与其他的结构型模式又有什么区别？ 1. Java IO 类 Java 的 IO 类库非常庞大和复杂，有十几个类，我当时在学 IO 操作时就被这些类给绕晕了。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T16:55:13.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"设计模式与范式"}],["meta",{"property":"article:published_time","content":"2023-04-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T16:55:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"装饰器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-25T16:55:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. Java IO 类","slug":"_1-java-io-类","link":"#_1-java-io-类","children":[]},{"level":2,"title":"2. 基于继承的设计","slug":"_2-基于继承的设计","link":"#_2-基于继承的设计","children":[]},{"level":2,"title":"3. 基于装饰器模式的设计","slug":"_3-基于装饰器模式的设计","link":"#_3-基于装饰器模式的设计","children":[]},{"level":2,"title":"4. 总结","slug":"_4-总结","link":"#_4-总结","children":[]}],"git":{"createdTime":1700931313000,"updatedTime":1700931313000,"contributors":[{"name":"MECHREVO_GGPRO\\\\AarynLu","email":"hello@0x3f4.run","commits":1}]},"readingTime":{"minutes":7.89,"words":2368},"filePathRelative":"backend/design_pattern/pattern/structure_type/装饰器模式.md","localizedDate":"2023年4月13日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">前言</p>\\n<p>装饰器模式也是一种结构型模式，在 Java 的 IO 类中就有使用到，所以下面我们就从 Java IO 类的设计，来看看什么是装饰器模式？使用它有什么好处？它与其他的结构型模式又有什么区别？</p>\\n</div>\\n<h2> 1. Java IO 类</h2>\\n<p>Java 的 IO 类库非常庞大和复杂，有十几个类，我当时在学 IO 操作时就被这些类给绕晕了。</p>","autoDesc":true}');export{t as data};
