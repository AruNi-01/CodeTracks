import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as u,b as n,e as a,w as t,d as s,a as i}from"./app-ea3317bb.js";const k={},r={class:"hint-container details"},d=n("summary",null,"本文内容",-1),m={class:"table-of-contents"},v={href:"https://bugstack.cn/",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> <strong>1. 介绍</strong></h2><p>HashMap 最早出现在 JDK 1.2 中，主要用于存放键值对（key-value），底层基于散列算法实现，是 <strong>线程不安全的</strong>。</p><p>HashMap 中允许 null 键和 null 值，但 <strong>null 作为 key 只能有一个</strong>，null 作为 value 可以有多个。</p><p>HashMap 涉及到的知识点非常多，设计的思想也很优秀，其中包括：<strong>散列表实现、扰动函数、初始化容量、负载因子、扩容元素拆分、链表树化/红黑树化、插入、查找、删除</strong> 等。</p><p>本章分为两部分讲解 HashMap 的源码分析，第一部分着重于数据结构的使用上，包括散列表实现、扰动函数、初始化容量、负载因子、扩容元素拆分；第二部分着重于功能的实现，包括链表树化/红黑树化、插入、查找、删除等。</p><h2 id="_2-最简单的-hashmap" tabindex="-1"><a class="header-anchor" href="#_2-最简单的-hashmap" aria-hidden="true">#</a> <strong>2. 最简单的 HashMap</strong></h2><p>学习 HashMap 前，最好的方式是先了解这是一种怎么样的数据结构来存放数据。现今的 HashMap 很复杂，所以先从基本出发，来看看一个最简单、最根本的 HashMap 是什么样子的。</p><p><strong>提出问题</strong>：假设有 7 个字符串，需要存放到数组中，但要求在获取每个元素的时候时间复杂度是 O(1)。也就是说不能通过循环遍历的方式进行获取， 而是要定位到数组 ID 直接获取相应的元素。</p><p><strong>解决方案</strong>：如果需要通过 ID 从数组中获取元素，那么就需要把每个字符串都计算出一个在数组中的位置 ID。字符串获取 ID 有什么方式？ 一个字符串最直接的获取跟数字相关的信息就是 HashCode，可是 HashCode 的取值范围太大了 <code>[-2147483648, 2147483647]</code>，不可能直接使用。那么就需要使用 HashCode 与数组长度做取模运算，得到一个可以在数组中出现的位置。如果说有两个元素经运算得到相同的 ID，那么这个数组 ID 下就存放两个字符串，这是一种解决哈希冲突的简单方法。</p><p>其实就是把字符串散列到数组中，下面来具体实现一下这个简单的 HashMap。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleHashMap</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;HashCode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Map&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;put&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;remove&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 存放的数组</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">// 存入数组</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> val <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 得到索引位置（hashCode() 方法可能返回负数）</span>
            <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ID: &quot;</span> <span class="token operator">+</span> idx <span class="token operator">+</span> <span class="token string">&quot;，值：&quot;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 该索引位置还没有元素，则直接存放</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tab<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 否则连接存放（模拟链表）</span>
                tab<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">&quot; -&gt; &quot;</span> <span class="token operator">+</span> val<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;存放结果：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">3</span>，值：<span class="token class-name">HashCode</span>
<span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">4</span>，值：<span class="token class-name">Map</span>
<span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">2</span>，值：<span class="token class-name">Index</span>
<span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">7</span>，值：<span class="token class-name">Key</span>
<span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">1</span>，值：<span class="token class-name">Value</span>
<span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">7</span>，值：put
<span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">4</span>，值：remove
存放结果：<span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> <span class="token class-name">Index</span><span class="token punctuation">,</span> <span class="token class-name">HashCode</span><span class="token punctuation">,</span> <span class="token class-name">Map</span> <span class="token operator">-&gt;</span> remove<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Key</span> <span class="token operator">-&gt;</span> put<span class="token punctuation">]</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就完成了一个简单 HashMap 的设计，将元素散列存放到数组中，最后通过字符串元素的索引 ID 进行获取对应的字符串。</p><div class="hint-container info"><p class="hint-container-title">最简单的 HashMap 有哪些问题？</p><p>上面这个最简单的 HashMap 只能算得上是一个散列数据存储的雏形，在实际使用中是有很多问题的：</p><ul><li>如果 <strong>哈希碰撞严重</strong>，那么一个索引位置就可能存放多个元素，这样定位后再查找仍需要很长时间；</li><li>在计算索引 ID 时，使用的是 <strong>取模操作</strong>，效率不及位运算；</li><li>存储元素的数组越小，哈希碰撞几率越大，但数组增大又会消耗更多的空间，<strong>如何衡量时间与空间</strong>？</li><li>随着元素的不断增加，数组长度不足时需要 <strong>扩容</strong>，如何把原有的元素重新散列到新的位置上。</li></ul><p>以上这些问题可以归纳为：<strong>扰动函数、初始化容量、负载因子、扩容方法以及链表和红黑树转换的使用</strong> 等。</p></div><h2 id="_3-扰动函数" tabindex="-1"><a class="header-anchor" href="#_3-扰动函数" aria-hidden="true">#</a> <strong>3. 扰动函数</strong></h2><p>在 HashMap 存放元素时候有这样一段代码来处理哈希值，这是 <strong>散列值扰动函数</strong>，用于优化散列效果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> h<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-为什么使用扰动函数" tabindex="-1"><a class="header-anchor" href="#_3-1-为什么使用扰动函数" aria-hidden="true">#</a> <strong>3.1 为什么使用扰动函数</strong></h3><p>理论上来说字符串的 hashCode是一个 int 类型值，那可以直接作为数组下标了，且不会出现碰撞。但是这个 hashCode 的取值范围是 <code>[-2147483648, 2147483647]</code>， 有将近 40 亿的长度，谁也不能把数组初始化的这么大，内存也是放不下的。</p><p>默认初始化的 Map 大小是 16 个长度（<code>DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4</code>），所以获取的 Hash 值并不能直接作为下标使用，需要与数组长度进行取模运算得到一个下标值，也就是上面做的散列例子。</p><p>那么 HashMap 源码这里不只是直接获取哈希值，<strong>还进行了一次扰动计算</strong>，<code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>。把哈希值右移 16 位，也就正好是自己 <strong>长度的一半</strong>，之后 <strong>与原哈希值做异或运算</strong>，这样就 <strong>混合了原哈希值中的高位和低位</strong>，<strong>增大了随机性</strong>。计算方式如下图：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302091627591.png" alt="扰动函数" loading="lazy"></p><p>使用扰动函数就是为了 <strong>增加随机性</strong>，让数据元素 <strong>更加均衡的散列，减少碰撞</strong>。</p><h3 id="_3-2-实验验证扰动函数" tabindex="-1"><a class="header-anchor" href="#_3-2-实验验证扰动函数" aria-hidden="true">#</a> <strong>3.2 实验验证扰动函数</strong></h3><p>从上面的分析可以看出，扰动函数使用了哈希值的高半区和低半区做异或，混合原始哈希码的高位和低位，以此来加大低位区的随机性。</p><p>但看不到实验数据的话，这终究是一段理论，具体这段哈希值真的被增加了随机性没有，并不知道。所以这里我们要做一个实验，这个实验是这样做；</p><ol><li>选取 10 万个单词词库；</li><li>定义 128 位长度的数组格子；</li><li>分别计算在扰动和不扰动下，10 万单词的下标分配到 128 个格子的数量；</li><li>统计各个格子数量，生成波动曲线。如果扰动函数下的波动曲线相对更平稳，那么证明扰动函数有效果。</li></ol><p>下面的索引下标计算方法中，<code>disturbHashIdx()</code> 使用了扰动函数，<code>hashIdx()</code> 没有使用扰动函数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Disturb</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用扰动函数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">disturbHashIdx</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 未使用扰动函数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashIdx</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 10 万单词已经初始化到 words 中</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_disturb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用扰动函数</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token class-name">Disturb</span><span class="token punctuation">.</span><span class="token function">disturbHashIdx</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 不使用扰动函数</span>
        <span class="token comment">// int idx = Disturb.hashIdx(word, 128);</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Integer</span> integer <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token operator">++</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上分别统计两种函数下的下标值分配，最终将统计结果放到 Excel 中生成图表：</p><ul><li><p><strong>未使用扰动函数</strong>：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302091627728.png" alt="未使用扰动函数" loading="lazy"></p></li><li><p><strong>使用扰动函数</strong>：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302091627119.png" alt="使用扰动函数" loading="lazy"></p></li></ul><p>从这两种的对比图可以看出来，<strong>在使用了扰动函数后，数据分配的更加均匀了</strong>。</p><p>数据分配均匀，也就是散列的效果更好，减少了 hash 的碰撞，让数据存放和获取的效率更佳。</p><h2 id="_4-初始化容量和负载因子" tabindex="-1"><a class="header-anchor" href="#_4-初始化容量和负载因子" aria-hidden="true">#</a> <strong>4. 初始化容量和负载因子</strong></h2><h3 id="_4-1-n-1-hash-的设计" tabindex="-1"><a class="header-anchor" href="#_4-1-n-1-hash-的设计" aria-hidden="true">#</a> <strong>4.1 (n - 1) &amp; hash 的设计</strong></h3><p>在上面简单 HashMap 的实现中，计算索引时使用的是 <strong>取模操作</strong>，这是最简单、效率比较低的设计方案。在真正的 HashMap 中，<strong>计算索引的方式是 <code>(n - 1) &amp; hash</code></strong>，为什么要这么设计呢？</p><div class="hint-container info"><p class="hint-container-title">位运算比取模运算效率高</p><p>首先的一个原因就是 <strong>取模运算的效率较低</strong>，数据量越大，取模运算消耗的时间比位运算越多。</p><p>当 HashMap 的容量足够大，一旦触发扩容机制，需要进行 rehash（将原来的元素重新计算新的索引位置，放到新的表中），那么当大量元素进行索引值的计算时，运行时间是很长的。</p></div><div class="hint-container info"><p class="hint-container-title">疑问：(n - 1) &amp; hash 和 hash % n 的结果是等价的吗？</p><p>使用 <code>(n - 1) &amp; hash</code> 计算出来的下标和 <code>hash % n</code> 能一样吗？如果不一样的话怎么能将元素散列到数组中？</p><p>这就是为什么 <strong>HashMap 的容量一定要是 2 的幂次方</strong>。当 n 为 2 的幂次方时，满足一个公式：<strong>(n - 1) &amp; hash = hash % n</strong>。</p></div><div class="hint-container info"><p class="hint-container-title">(n - 1) &amp; hash 能保证索引不越界</p><p>在上面简单 HashMap 的实现中，为了防止字符串的 hashCode 为负数，我们对计算出来的 hashCode 进行了取绝对值运算。</p><blockquote><p><strong>hashCode 为什么会有负数</strong>？</p><p>字符串计算哈希码的方法是：每个字符的 ASCII 码 +（31 × 前一个字符的哈希码），第一个字符的的哈希码就为它的 ASCII 码。具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> length <span class="token operator">=</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token function">getChar</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> h<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以当字符串足够长时，哈希码相加到最后是会超过 int 的最大值的，就变成了负数。</p></blockquote><p>而采用 <code>(n - 1) &amp; hash</code> 的设计方法，<strong>当 n 是 2 的幂次方时，n - 1 的二进制表示为末尾都是连续的 1</strong>（<code>011111</code> 这样的形式，前面补 0 来充满 32 位即可）。</p><p>当 (n - 1) 和 hash 做与运算时，n - 1 一定是正数，符号位为 0，所以不论 hash 的值是正还是负，进行 <code>&amp;</code> 运算后符号位一定为 0（正数）。</p></div><h3 id="_4-2-初始化容量" tabindex="-1"><a class="header-anchor" href="#_4-2-初始化容量" aria-hidden="true">#</a> <strong>4.2 初始化容量</strong></h3><p>从上面知道，<strong>HashMap 的容量一定要是 2 的幂次方</strong>，HashMap 的默认初始化容量是 16（2^4）。</p><p>如果我们自己将 HashMap 的容量初始化为 17（<code>new HashMap&lt;&gt;(17)</code>），会发生什么呢？</p><p>在 HashMap 的初始化方法中，有这样一段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 容量合法性校验...</span>
        
        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>loadFactor</code> 是 HashMap 的加载因子，默认为 0.75；</p></li><li><p>阈值 <code>threshold</code>，它通过 <code>tableSizeFor()</code> 方法进行计算，返回值的是 <strong>大于等于 <code>initialCapacity</code> 的最小 2 次幂</strong>。</p></li></ul><div class="hint-container danger"><p class="hint-container-title">注意：</p><p>HashMap 中并没有容量这个属性，<strong>初始化时直接将容量赋值给了阈值 <code>threshold</code></strong>，而且并没有初始化 <code>table</code>。</p><p>当插入第一个元素时，才会初始化 <code>table</code> 和设置重新计算阈值 <code>threshold</code>，后面会详细讲解。</p></div><p>所以如果我们将初始化容量设置为 17 的话，HashMap 会自动给我们将容量设置成大于等于 <code>initialCapacity</code> 的最小 2 次幂，即 32（2^5）。</p><p>我们可以利用反射机制，来验证一下以上结论：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> mapClass <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// HashMap 中没有 capacity 这个属性，但通过 capacity() 方法可以获取（其实就是返回 table.length）</span>
        <span class="token class-name">Method</span> capacityMethod <span class="token operator">=</span> mapClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;capacity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> thresholdField <span class="token operator">=</span> mapClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;threshold&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        capacityMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thresholdField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;容量：&quot;</span> <span class="token operator">+</span> capacityMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;，阈值：&quot;</span> <span class="token operator">+</span> thresholdField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---插入元素后，阈值才重新计算---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;容量：&quot;</span> <span class="token operator">+</span> capacityMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;，阈值：&quot;</span> <span class="token operator">+</span> thresholdField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>容量：<span class="token number">32</span>，阈值：<span class="token number">32</span>
<span class="token operator">--</span><span class="token operator">-</span>插入元素后，阈值才重新计算<span class="token operator">--</span><span class="token operator">-</span>
容量：<span class="token number">32</span>，阈值：<span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-负载因子" tabindex="-1"><a class="header-anchor" href="#_4-3-负载因子" aria-hidden="true">#</a> <strong>4.3 负载因子</strong></h3><p>HashMap 中的负载因子默认为 0.75：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>负载因子的作用</strong>：</p><ul><li>负载因子决定了 <strong>数据量</strong> 多少了以后进行扩容；</li></ul><p>因为我们的元素是经过散列后存放到数组中的，所以可能会出现有些位置有多个元素，有些位置始终没有元素。这就可能导致 <strong>即使数据量大于容量时，数组的位置还没被占满，而某些位置又出现了大量的碰撞，这样在查找时性能极低</strong>。</p><p>所以，要选择一个合理的大小下进行扩容，加载因子的默认值为 0.75，<strong>阈值 <code>threshold</code> 等于 <code>capacity * loadFactor</code></strong>，<strong>HashMap 是根据阈值来进行扩容的</strong>，也就是说当阈值容量占了 3/4 时赶紧扩容，以减少 Hash 碰撞。</p><p>0.75 是一个默认构造值，在创建 HashMap 也可以调整：</p><ul><li>如果想 <strong>提高查找效率</strong>，则可以 <strong>将负载因子调小</strong>，以减少碰撞。但会导致更容易扩容，浪费了空间；</li><li>如果想 <strong>节约存储空间</strong>，则可以 <strong>将负载因子调大</strong>，以延迟扩容的时机。但会导致更多的哈希碰撞，降低了查找效率。</li></ul><blockquote><p>0.75 是 JVM 团队经过大量测试得出的最合适的值，平衡了时间和空间。</p></blockquote><h2 id="_5-扩容元素拆分" tabindex="-1"><a class="header-anchor" href="#_5-扩容元素拆分" aria-hidden="true">#</a> <strong>5. 扩容元素拆分</strong></h2><p>数组长度不足了就需要扩容，扩容后的容量为 <strong>之前的 2 倍</strong>，因为需要维持容量是 2 的幂次方。</p><p>扩容最直接的问题，就是需要把元素拆分到新的数组中。</p><p>拆分元素的过程中，原 JDK1.7 中会需要重新计算哈希值，重新映射进新的数组中。</p><p>但是到 <strong>JDK1.8 中已经进行优化，不再需要重新计算哈希值，提升了拆分的性能</strong>，设计的非常巧妙。</p><h3 id="_5-1-如何做到不重新计算哈希值" tabindex="-1"><a class="header-anchor" href="#_5-1-如何做到不重新计算哈希值" aria-hidden="true">#</a> <strong>5.1 如何做到不重新计算哈希值?</strong></h3><p>我们先来写个示例，来看看容量为 16 的 HashMap 扩容到 32 后，索引值有什么规律。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jlkk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;lopi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jmdw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;e4we&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;io98&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;nmhg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;vfg6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;gfrt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;alpo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;vfbh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bnhj&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;zuio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;iu8e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;yhjk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;plop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;dd0p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符串：&quot;</span> <span class="token operator">+</span> key
                    <span class="token operator">+</span> <span class="token string">&quot;\\t idx(cap=16时)：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">&quot;\\t idx(cap=32时)：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">&quot;\\t [hash&amp;16=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 使用扰动函数计算 hash 值</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> h<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们将每个字符串分别在容量为 16 和 32 时的索引值求了出来（计算方式和 HashMap 相同），同时还将 hash 值和 16（旧容量） 进行 <code>&amp;</code> 运算的结果打印了出来，至于为什么要打印这个结果，看了下面的输出就知道了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>字符串：jlkk	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">3</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">19</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">]</span>
字符串：lopi	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">14</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">14</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：jmdw	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">7</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">7</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：e4we	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">3</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">19</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">]</span>
字符串：io98	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">4</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">20</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">]</span>
字符串：nmhg	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">13</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">13</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：vfg6	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">8</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">8</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：gfrt	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">1</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">17</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">]</span>
字符串：alpo	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">7</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">7</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：vfbh	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">1</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">1</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：bnhj	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">0</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">0</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：zuio	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">8</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">24</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">]</span>
字符串：iu8e	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">8</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">8</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：yhjk	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">8</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">8</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：plop	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">9</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">9</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
字符串：dd0p	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">16</span>时<span class="token punctuation">)</span>：<span class="token number">14</span>	 <span class="token function">idx</span><span class="token punctuation">(</span>cap<span class="token operator">=</span><span class="token number">32</span>时<span class="token punctuation">)</span>：<span class="token number">14</span>	 <span class="token punctuation">[</span>hash<span class="token operator">&amp;</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析上面的数据可以得出一个 <strong>重要结论</strong>：</p><ul><li><strong>原哈希值与旧容量（oldCap）16 进行 <code>&amp;</code> 运算</strong>： <ul><li><strong>如果结果等于 0，则下标位置不变</strong>；</li><li><strong>如果结果不为 0，那么新的位置则是原来位置上加 16（oldCap）</strong>。</li></ul></li></ul><p>所以在扩容后就不需要重新计算每一个元素的哈希值就可以快速判断新的位置，大大提高了扩容效率。</p><p>至于为什么用原哈希值与旧容量做 <code>&amp;</code> 运算，就能得出新位置是否需要加上原来的的容量，请往下看。</p><h3 id="_5-2-hash-oldcap-的设计" tabindex="-1"><a class="header-anchor" href="#_5-2-hash-oldcap-的设计" aria-hidden="true">#</a> <strong>5.2 hash &amp; oldCap 的设计</strong></h3><p>下图就是旧容量 16 向新容量 32 扩容的过程：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302092359284.png" alt="数据迁移" loading="lazy"></p><p>可以发现：</p><ul><li><p>对 31 取模保留低 5 位，对 15 取模保留低 4 位，<strong>两者的差异就在于第 5 位是否为 1</strong>，是的话则需要加上增量，为 0 的话则不需要改变；</p></li><li><p>其中黄色区域元素 <code>zuio</code> 因计算结果 <code>hash &amp; oldCap</code> 低位第 5 位为 1，所以导致结果不为 0，则被迁移到下标位置 24；</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302100010911.png" alt="image-20230210001022386" loading="lazy"></p></li><li><p>同时还是用重新计算哈希值（<code>hash &amp; 32 - 1 = 24</code>）的方式验证了，确实分配到 24 的位置。</p></li></ul><div class="hint-container info"><p class="hint-container-title">为什么用 hash &amp; oldCap 就能判断是否要加上增量：</p><p>因为是 <strong>扩容到原来的 2 倍</strong>，所以 <code>扩容后的 n - 1 的值</code> 就是 <code>原来 n - 1 的值</code> 往高位补了一个 1，<strong>而这个补 1 的位置（低位的第 5 位）就是 <code>oldCap</code> 中 1 的位置</strong>。仍然是原始长度为 16 举例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> old<span class="token operator">:</span>
 <span class="token number">10</span><span class="token operator">:</span> <span class="token number">0000</span> <span class="token number">1010</span>
 <span class="token number">15</span><span class="token operator">:</span> <span class="token number">0000</span> <span class="token number">1111</span>
 <span class="token operator">&amp;</span><span class="token operator">:</span>  <span class="token number">0000</span> <span class="token number">1010</span> 
 
 <span class="token keyword">new</span><span class="token operator">:</span>
 <span class="token number">10</span><span class="token operator">:</span> <span class="token number">0000</span> <span class="token number">1010</span>
 <span class="token number">31</span><span class="token operator">:</span> <span class="token number">0001</span> <span class="token number">1111</span>
 <span class="token operator">&amp;</span><span class="token operator">:</span>  <span class="token number">0000</span> <span class="token number">1010</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的示例可以很轻易的看出, 两次计算下标的差别只是 <strong>第二次参与位 比 第一次 左边有一位从 0 变为 1，而这个变化的 1 刚好是 <code>oldCap</code></strong>。那么只需要判断原 key 的 hash 值的这个位上是否为 1 即可，若是 1 则需要移动至 oldCap + i 的槽位，若为 0 则不需要移动。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202302100041551.png" alt="image-20230210004127429" loading="lazy"></p></div><p>这也是 <strong>HashMap 的容量为什么要保证是 2 的幂次方的原因之一</strong>，所以 HashMap 的设计既巧妙又是环环相扣的。</p><blockquote><p>提示：HashMap 功能实现的源码分析在下一篇文章！</p></blockquote>`,86);function h(g,f){const p=o("router-link"),e=o("ExternalLinkIcon");return l(),u("div",null,[n("details",r,[d,n("nav",m,[n("ul",null,[n("li",null,[a(p,{to:"#_1-介绍"},{default:t(()=>[s("1. 介绍")]),_:1})]),n("li",null,[a(p,{to:"#_2-最简单的-hashmap"},{default:t(()=>[s("2. 最简单的 HashMap")]),_:1})]),n("li",null,[a(p,{to:"#_3-扰动函数"},{default:t(()=>[s("3. 扰动函数")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#_3-1-为什么使用扰动函数"},{default:t(()=>[s("3.1 为什么使用扰动函数")]),_:1})]),n("li",null,[a(p,{to:"#_3-2-实验验证扰动函数"},{default:t(()=>[s("3.2 实验验证扰动函数")]),_:1})])])]),n("li",null,[a(p,{to:"#_4-初始化容量和负载因子"},{default:t(()=>[s("4. 初始化容量和负载因子")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#_4-1-n-1-hash-的设计"},{default:t(()=>[s("4.1 (n - 1) & hash 的设计")]),_:1})]),n("li",null,[a(p,{to:"#_4-2-初始化容量"},{default:t(()=>[s("4.2 初始化容量")]),_:1})]),n("li",null,[a(p,{to:"#_4-3-负载因子"},{default:t(()=>[s("4.3 负载因子")]),_:1})])])]),n("li",null,[a(p,{to:"#_5-扩容元素拆分"},{default:t(()=>[s("5. 扩容元素拆分")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#_5-1-如何做到不重新计算哈希值"},{default:t(()=>[s("5.1 如何做到不重新计算哈希值?")]),_:1})]),n("li",null,[a(p,{to:"#_5-2-hash-oldcap-的设计"},{default:t(()=>[s("5.2 hash & oldCap 的设计")]),_:1})])])])])])]),n("blockquote",null,[n("p",null,[s("本文来源 "),n("a",v,[s("bugstack"),a(e)]),s("，加上了自己的理解！")])]),b])}const x=c(k,[["render",h],["__file","HashMap源码分析：数据结构.html.vue"]]);export{x as default};
