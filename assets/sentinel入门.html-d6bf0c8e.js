import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as u,b as n,e as a,w as e,d as s,a as o}from"./app-ea3317bb.js";const r={},d={class:"hint-container details"},k=n("summary",null,"本文内容",-1),g={class:"table-of-contents"},v=o('<h2 id="_1-什么是-sentinel" tabindex="-1"><a class="header-anchor" href="#_1-什么是-sentinel" aria-hidden="true">#</a> 1. 什么是 Sentinel</h2><p>Sentinel 是面向分布式的 <strong>流量治理</strong> 组件，主要以流量为切入点，从 <strong>流量路由、流量控制、流量整形、熔断降级、系统自适应过载保护、热点流量防护</strong> 等多个维度来帮助开发者 <strong>保障微服务的稳定性</strong>。</p><p><strong>流量控制</strong>：任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要 <strong>根据系统的处理能力对流量进行控制</strong>。Sentinel 作为一个调配器，可以根据需要 <strong>把随机的请求调整成合适的 “形状”</strong>：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_25-1700911310.jpg" alt="arch" loading="lazy"></p><p>流量控制有以下几个角度：</p><ul><li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li><li>运行指标，例如 QPS、线程池、系统负载等；</li><li>控制的效果，例如直接限流、冷启动、排队等。</li></ul><p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合。</p><p><strong>熔断降级</strong>：由于调用关系的复杂性，如果 <strong>调用链路中的某个资源出现了不稳定（表现为 timeout，异常比例升高），最终会导致请求发生堆积</strong>。所以这时需要 <strong>对该资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果</strong>。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_25-1700911512.png" alt="image" loading="lazy"></p><p><strong>系统负载保护</strong>：防止雪崩，是系统防护中重要的一环。<strong>当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应</strong>。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候 <strong>其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用</strong>。针对这个情况，Sentinel 提供了对应的保护机制，<strong>让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求</strong>。</p><h2 id="_2-快速开始" tabindex="-1"><a class="header-anchor" href="#_2-快速开始" aria-hidden="true">#</a> 2. 快速开始</h2><h3 id="_2-1-启动-dashboard" tabindex="-1"><a class="header-anchor" href="#_2-1-启动-dashboard" aria-hidden="true">#</a> 2.1 启动 Dashboard</h3><p>Sentinel 的使用分为两个部分:</p><ul><li>核心库（Java 客户端）：不依赖任何框架/库，能够运行于 Java 8 及以上的版本的运行时环境。</li><li>控制台（Dashboard）：Dashboard 主要负责管理推送规则、监控、管理机器信息等。</li></ul>',14),b={href:"https://github.com/alibaba/Sentinel/releases%EF%BC%8C%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"},m=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> .<span class="token punctuation">\\</span>sentinel-dashboard-1.8.6.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-初始化工程" tabindex="-1"><a class="header-anchor" href="#_2-2-初始化工程" aria-hidden="true">#</a> 2.2 初始化工程</h3><p>先把 Nacos8848 启动起来：<code>./startup.cmd -m standalone</code>。</p><p>新建 cloudalibaba-sentinel-service8401 Module，pom 文件如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- SpringCloud Alibaba sentinel --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- SpringCloud Alibaba sentinel-datasource-nacos 后续做持久化用 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--日常通用jar包配置--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yaml 文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>service
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>   <span class="token comment"># 配置Nacos地址</span>

    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>   <span class="token comment"># 配置 Sentinel Dashboard 地址，</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>  <span class="token comment"># 默认 8719 端口，用于与 Sentinel Dashboard 交互</span>

<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>  <span class="token comment"># Spring Actuator 监控，将所有可用的端点都公开出来，供外部访问。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>controller：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLimitController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testA&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;------------testA&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testB&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;------------testB&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目，访问 Sentinel Dashboard，发现还是没应用，这是因为它采用的是懒加载，我们先去访问一下controller 层服务的接口，然后再查看 Dashboard，可以发现，Sentinel8080 正在监控微服务 sentinel-service8401：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_25-1700924597.png" alt="image-20231125230315716" loading="lazy"></p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_25-1700924645.png" alt="image-20231125230404273" loading="lazy"></p><h2 id="_3-流控规则" tabindex="-1"><a class="header-anchor" href="#_3-流控规则" aria-hidden="true">#</a> 3. 流控规则</h2><p>在 Dashboard 看看流控设置有哪些：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_27-1701100289.png" alt="image-20231127235111062" loading="lazy"></p><p>我们新增一个 QPS 单机阈值 = 1，流控效果快速失败，这意味着如果每秒请求量大于 1 时，后续的请求都会直接失败：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_27-1701100416.png" alt="image-20231127235333821" loading="lazy"></p><p>现在来看看流控规则中的配置项：</p><ul><li><p><strong>资源名</strong>：唯一名称，默认请求路径</p></li><li><p><strong>针对来源</strong>：Sentinel 可以 <strong>针对调用者进行限流</strong>，填写微服务名，默认default（不区分来源)</p></li><li><p><strong>阈值类型/单机阈值</strong>：</p><ul><li>QPS（每秒钟的请求数量）：当调用该 api 的 QPS 达到间值的时候，进行限流。</li><li>线程数：当调用该 api 的线程数达到阈值的时候，进行限流</li></ul></li><li><p><strong>是否集群</strong>：不需要集群</p></li><li><p><strong>流控模式</strong>：</p><ul><li>直接：api 达到限流条件时，直接限流。</li><li>关联：当与之关联的资源达到阈值时，就限流自己（别人达到阈值，限流自己，比如支付接口崩了，让下单接口限流）。</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【api 级别的针对来源，多个 api 访问同一个其他的 api】</li></ul></li><li><p><strong>流控效果</strong>：</p><ul><li><p>快速失败：直接失败，抛异常。</p></li><li><p>WarmUp：当阈值达到 <code>设定阀值 / codeFactor(默认为 3)</code> 时，开始在设定的预热时长时间内，逐渐升至设置的 QPS 阈值。</p><blockquote><p>场景：秒杀系统在开启的瞬间，突增的大量流量可能直接把系统打死，预热方式就是把为了保护系统，慢慢的把流量放进来，慢慢的把阀值增长到设置的阀值。</p></blockquote></li><li><p>排队等待：匀速排人，让请求以匀速的速度通过（对应漏桶算法），阈值类型必须设置为 QPS，否则无效。设置的超时时间到之后还没排到则请求失败。</p><blockquote><p>场景：主要用于处理间隔性突发的流量，例如消息队列。例如在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p></blockquote></li></ul></li></ul><h2 id="_4-熔断规则" tabindex="-1"><a class="header-anchor" href="#_4-熔断规则" aria-hidden="true">#</a> 4. 熔断规则</h2><p>现.代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的 <strong>弱依赖服务调用</strong> 进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p><p>例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701134637.png" alt="chain" loading="lazy"></p><p>Sentinel 熔断降级会在调用链路中某个 <strong>资源出现不稳定状态时</strong>（例如调用超时或异常比例升高），对这个资源的调用 <strong>进行限制</strong>，让请求 <strong>快速失败</strong>，<strong>避免影响到其它的资源而导致级联错误</strong>。当资源被降级后，在接下来的熔断降级时间内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException）。</p><p>来看看 Sentinel 熔断配置都有哪些：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701134715.png" alt="image-20231128092514601" loading="lazy"></p><p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p><table><thead><tr><th style="text-align:center;">Field</th><th style="text-align:left;">说明</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:center;">resource</td><td style="text-align:left;">资源名，即规则的作用对象</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">grade</td><td style="text-align:left;">熔断策略，支持慢调用比例/异常比例/异常数策略</td><td style="text-align:left;">慢调用比例</td></tr><tr><td style="text-align:center;">count</td><td style="text-align:left;">慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">timeWindow</td><td style="text-align:left;">熔断时长，单位为 s</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">minRequestAmount</td><td style="text-align:left;">熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td><td style="text-align:left;">5</td></tr><tr><td style="text-align:center;">statIntervalMs</td><td style="text-align:left;">统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td><td style="text-align:left;">1000 ms</td></tr><tr><td style="text-align:center;">slowRatioThreshold</td><td style="text-align:left;">慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td><td style="text-align:left;"></td></tr></tbody></table><p>熔断策略：</p><ul><li><strong>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)</strong>：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），<strong>请求的响应时间大于该值则统计为慢调用</strong>。当 <strong>单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值</strong>，则接下来的熔断时长内请求会自动被熔断。<strong>经过熔断时长后熔断器会进入探测恢复状态</strong>（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li><li><strong>异常比例 (<code>ERROR_RATIO</code>)</strong>：<strong>当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值</strong>，则接下来的熔断时长内请求会自动被熔断。<strong>经过熔断时长后熔断器会进入探测恢复状态</strong>（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</li><li><strong>异常数 (<code>ERROR_COUNT</code>)</strong>：<strong>当单位统计时长内的异常数目超过阈值之后会自动进行熔断</strong>。<strong>经过熔断时长后熔断器会进入探测恢复状态</strong>（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li></ul><h2 id="_5-热点参数限流" tabindex="-1"><a class="header-anchor" href="#_5-热点参数限流" aria-hidden="true">#</a> 5. 热点参数限流</h2><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>热点参数限流会 <strong>统计传入参数中的热点参数</strong>，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，<strong>仅对包含热点参数的资源调用生效</strong>。</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701136569.png" alt="Sentinel Parameter Flow Control" loading="lazy"></p><p>Sentinel 利用 <strong>LRU 策略</strong> 统计最近最常访问的热点参数，结合 <strong>令牌桶算法</strong> 来进行参数级别的流控。</p><p>热点规则：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701137457.png" alt="image-20231128101056103" loading="lazy"></p><p>例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testHotParams&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;testHotParams&quot;</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">&quot;handle_testHotParams&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testHotParams</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;p1&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p1<span class="token punctuation">,</span>
                                <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;p2&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;------------testHotParams&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 配置热点参数限流触发时的处理方法，不配置则直接将异常信息打到页面</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handle_testHotParams</span><span class="token punctuation">(</span><span class="token class-name">String</span> p1<span class="token punctuation">,</span> <span class="token class-name">String</span> p2<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;------------handle_testHotParams(兜底处理)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>热点规则：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701137712.png" alt="image-20231128101511019" loading="lazy"></p><p>当传入参数 idx 为 0（即 p1），1s 内 QPS 超过 1 时，就会进行限流。</p><p><strong>参数例外项</strong>：参数例外项可 <strong>额外配置该热点参数的参数值和限流阈值</strong>，该参数值的阈值不受上面阈值的限制。我们接着上面的配置，来新增参数例外项：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701138712.png" alt="image-20231128103151607" loading="lazy"></p><p>此时当请求 testHotParams 时，当参数 idx = 0（p1）不为 &quot;5&quot; 时，QPS 阈值只有 1，等于 &quot;5&quot; 时，阈值可以到 200。</p><p>注意：@SentinelResource 只管在 Sentinel 配置的出错，运行出错该走异常走异常。</p><h2 id="_6-系统自适应保护" tabindex="-1"><a class="header-anchor" href="#_6-系统自适应保护" aria-hidden="true">#</a> 6. 系统自适应保护</h2><p>Sentinel 系统自适应保护从 <strong>整体维度对应用入口流量</strong> 进行控制，结合应用的 Load、总体平均 RT、入口 QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p><p>系统规则支持以下的阈值类型：</p><ul><li><strong>Load</strong>（仅对 Linux/Unix-like 机器生效）：当系统 load1（系统负载）超过阈值，且系统当前的并发线程数超过系统容量时才会触发系统保护。系统容量由系统的 <code>maxQps * minRt</code> 计算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li><li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0）。</li><li><strong>RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul><h2 id="_7-sentinelresource" tabindex="-1"><a class="header-anchor" href="#_7-sentinelresource" aria-hidden="true">#</a> 7. @SentinelResource</h2><p>Sentinel 提供了 <code>@SentinelResource</code> 注解用于 <strong>定义资源</strong>，并提供了 AspectJ 的扩展用于 <strong>自动定义资源、处理 <code>BlockException</code> 等</strong>。</p><blockquote><p><strong>注意</strong>：注解方式埋点不支持 private 方法。</p></blockquote><p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 fallback 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p><ul><li><code>value</code>：资源名称，必需项（不能为空），Dashboard 中可以配置资源名，也可以配置 URL。</li><li><code>entryType</code>：entry 类型，可选项（默认为 <code>EntryType.OUT</code>）</li><li><code>blockHandler</code> / <code>blockHandlerClass</code>：<code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。 <ul><li>blockHandler 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。</li><li>blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li><code>fallback</code> / <code>fallbackClass</code>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求： <ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li><code>defaultFallback</code>（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所以类型的异常（除 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求： <ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li><code>defaultFallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li></ul><blockquote><p>注：1.6.0 之前的版本 fallback 函数只针对降级异常（<code>DegradeException</code>）进行处理，<strong>不能针对业务异常进行处理</strong>。</p></blockquote><p><code>blockHandler</code> 和 <code>fallback</code>：</p><ul><li><p><strong><code>blockHandler</code></strong> 是专门(只)处理 sentinel <strong>流控降级规则抛出的 BlockException</strong>，<strong>其他异常均会直接抛出</strong>，不会进入blockHandler方法处理。</p></li><li><p><strong><code>fallback</code> 默认处理所有的异常</strong>，其中包括 BlockEcxeption（BlockException 是 Exception 的子类）。</p></li><li><p>特别地，<strong>若 blockHandler 和 fallback 都进行了配置</strong>，则被限流降级而抛出 <code>BlockException</code> 时 <strong>只会进入 <code>blockHandler</code> 处理逻辑</strong>。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> <strong>直接抛出</strong>。</p></li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>

    <span class="token comment">// 对应的 \`handleException\` 函数需要位于 \`ExceptionUtil\` 类中，并且必须为 static 函数.</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">&quot;handleException&quot;</span><span class="token punctuation">,</span> blockHandlerClass <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 原函数</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">&quot;exceptionHandler&quot;</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token string">&quot;helloFallback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token keyword">long</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello at %d&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// Fallback 函数，函数签名与原函数一致或加一个 Throwable 类型的参数.</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helloFallback</span><span class="token punctuation">(</span><span class="token keyword">long</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Halooooo %d&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Block 异常处理函数，参数最后多一个 BlockException，其余与原函数一致.</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token keyword">long</span> s<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Do some log here.</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Oops, error occurred at &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-持久化" tabindex="-1"><a class="header-anchor" href="#_8-持久化" aria-hidden="true">#</a> 8. 持久化</h2><p>Dashboard 的推送规则方式是通过 API 将规则推送至客户端并直接更新到内存中，一旦重启应用，Sentinel 配置的规则就会丢失：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701175389.png" alt="Original push rules from Sentinel Dashboard" loading="lazy"></p><p>这种做法的好处是简单，无依赖；坏处是应用重启规则就会消失，仅用于简单测试，不能用于生产环境。生产环境肯定是需要持久化的，可以将规则持久化到某些持久层中，例如数据库。</p><p>我们这里演示一下持久化到 Nacos 配置中心里去。在 cloudalibaba-sentinel-service8401 pom 文件中添加依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yaml 配置文件，配置 sentinel 的 datasource：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>service
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>   <span class="token comment"># 配置Nacos地址</span>

    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>   <span class="token comment"># 配置 Sentinel Dashboard 地址</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>  <span class="token comment"># 默认 8719 端口，用于与 Sentinel Dashboard 交互</span>
      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
        <span class="token key atrule">ds1</span><span class="token punctuation">:</span>
          <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
            <span class="token key atrule">namespace</span><span class="token punctuation">:</span> public
            <span class="token key atrule">data-id</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service
            <span class="token key atrule">group-id</span><span class="token punctuation">:</span> DEFAULT_GROUP
            <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json
            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow   <span class="token comment"># 流控规则</span>

<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>  <span class="token comment"># Spring Actuator 监控，将所有可用的端点都公开出来，供外部访问。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Nacos 中添加流控规则的配置（其他规则的配置可自行搜索）：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;resource&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/rateLimit/byUrl&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;limitApp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;grade&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;strategy&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;controlBehavior&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;clusterMode&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token comment">/*
resource：资源名称；
limitApp：来源应用；
grade：阈值类型，0 表示线程数，1 表示 QPS；
count：单机阈值；
strategy：流控模式，0 表示直接，1 表示关联，2 表示链路；
controlBehavior：流控效果，0 表示快速失败，1 表示 Warm Up，2 表示排队等待；
clusterMode：是否集群。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701175005.png" alt="image-20231128203245098" loading="lazy"></p><p>查看 Sentinel Dashboard，发现已经有了该流控规则：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_12_02-1701521469.png" alt="image-20231128203627668" loading="lazy"></p>`,75),h={href:"http://localhost:8401/rateLimit/byUrl%EF%BC%8C%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99%E4%B9%9F%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%94%9F%E6%95%88%E7%9A%84%E3%80%82",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"现在我们重启 sentinel-service8401，发现 Dashboard 中的流控规则还是存在的（注意 Dashboard 是懒加载，得访问一次接口流控规则才会显示）。",-1),_=n("p",null,[s("通过将规则写在 Nacos 配置中心里可以达到持久化的目的，但是无疑过于繁琐，其实，Sentinel 有三种规则管理及推送模式，可以在 Sentinel Dashboard 中直接配置规则，然后应用中再进行持久化（Pull 模式）："),n("br"),n("img",{src:"https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701175698.png",alt:"Push rules from Sentinel Dashboard to local file",loading:"lazy"})],-1),f=n("p",null,"或者引入一个远程配置中心，通过 Dashboard 将配置写入远程配置中心，然后再将配置推送到应用（Push 模式）：",-1),S=n("p",null,[n("img",{src:"https://run-notes.oss-cn-beijing.aliyuncs.com/notes/Java%2FSpringCloudAlibaba.assets-2023_11_28-1701175711.png",alt:"Remote push rules to config center",loading:"lazy"})],-1),x={href:"https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel%E3%80%82",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.cnblogs.com/cdfive2018/p/9838577.html%E3%80%82",target:"_blank",rel:"noopener noreferrer"};function E(A,I){const t=l("router-link"),p=l("ExternalLinkIcon");return i(),u("div",null,[n("details",d,[k,n("nav",g,[n("ul",null,[n("li",null,[a(t,{to:"#_1-什么是-sentinel"},{default:e(()=>[s("1. 什么是 Sentinel")]),_:1})]),n("li",null,[a(t,{to:"#_2-快速开始"},{default:e(()=>[s("2. 快速开始")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_2-1-启动-dashboard"},{default:e(()=>[s("2.1 启动 Dashboard")]),_:1})]),n("li",null,[a(t,{to:"#_2-2-初始化工程"},{default:e(()=>[s("2.2 初始化工程")]),_:1})])])]),n("li",null,[a(t,{to:"#_3-流控规则"},{default:e(()=>[s("3. 流控规则")]),_:1})]),n("li",null,[a(t,{to:"#_4-熔断规则"},{default:e(()=>[s("4. 熔断规则")]),_:1})]),n("li",null,[a(t,{to:"#_5-热点参数限流"},{default:e(()=>[s("5. 热点参数限流")]),_:1})]),n("li",null,[a(t,{to:"#_6-系统自适应保护"},{default:e(()=>[s("6. 系统自适应保护")]),_:1})]),n("li",null,[a(t,{to:"#_7-sentinelresource"},{default:e(()=>[s("7. @SentinelResource")]),_:1})]),n("li",null,[a(t,{to:"#_8-持久化"},{default:e(()=>[s("8. 持久化")]),_:1})])])])]),v,n("p",null,[s("下面我们先下载 Dashboard，看看 Sentinel 的管理界面长什么样子。下载地址："),n("a",b,[s("https://github.com/alibaba/Sentinel/releases，直接下载"),a(p)]),s(" jar 包运行即可：")]),m,n("p",null,[s("快速访问 "),n("a",h,[s("http://localhost:8401/rateLimit/byUrl，流控规则也是可以生效的。"),a(p)])]),y,_,f,S,n("p",null,[s("实现要涉及到改造 Sentinel 客户端应用，具体内容看官方文档："),n("a",x,[s("https://github.com/alibaba/Sentinel/wiki/在生产环境中使用-Sentinel。"),a(p)])]),n("p",null,[s("持久化到 MySQL："),n("a",q,[s("https://www.cnblogs.com/cdfive2018/p/9838577.html。"),a(p)])])])}const F=c(r,[["render",E],["__file","sentinel入门.html.vue"]]);export{F as default};
