const t=JSON.parse('{"key":"v-d2ff9ba2","path":"/studynotes/design_pattern/pattern/structure_type/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"适配器模式","lang":"zh-CN","frontmatter":{"title":"适配器模式","date":"2023-04-15T00:00:00.000Z","order":4,"category":["设计模式"],"tag":["设计模式与范式"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 前言 适配器模式也是一种常用的结构型模式，它主要有两种实现方式，类适配器和对象适配器。下面就来介绍下适配器模式的原理和它的应用场景，以及它和前面的装饰器、代理模式又有何区别？ 1. 什么是适配器模式 1.1 定义","head":[["meta",{"property":"og:url","content":"https://aruni.me/studynotes/design_pattern/pattern/structure_type/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"适配器模式"}],["meta",{"property":"og:description","content":"本文内容 前言 适配器模式也是一种常用的结构型模式，它主要有两种实现方式，类适配器和对象适配器。下面就来介绍下适配器模式的原理和它的应用场景，以及它和前面的装饰器、代理模式又有何区别？ 1. 什么是适配器模式 1.1 定义"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-16T10:04:08.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"设计模式与范式"}],["meta",{"property":"article:published_time","content":"2023-04-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-16T10:04:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-16T10:04:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是适配器模式","slug":"_1-什么是适配器模式","link":"#_1-什么是适配器模式","children":[{"level":3,"title":"1.1 定义","slug":"_1-1-定义","link":"#_1-1-定义","children":[]},{"level":3,"title":"1.2 实现","slug":"_1-2-实现","link":"#_1-2-实现","children":[]}]},{"level":2,"title":"2. 应用场景","slug":"_2-应用场景","link":"#_2-应用场景","children":[{"level":3,"title":"2.1 封装有缺陷的接口设计","slug":"_2-1-封装有缺陷的接口设计","link":"#_2-1-封装有缺陷的接口设计","children":[]},{"level":3,"title":"2.2 统一多个类的接口设计","slug":"_2-2-统一多个类的接口设计","link":"#_2-2-统一多个类的接口设计","children":[]},{"level":3,"title":"2.3 替换依赖的外部系统","slug":"_2-3-替换依赖的外部系统","link":"#_2-3-替换依赖的外部系统","children":[]}]},{"level":2,"title":"3. Java 中的适配器模式","slug":"_3-java-中的适配器模式","link":"#_3-java-中的适配器模式","children":[{"level":3,"title":"3.1 Java IO 中的适配器模式","slug":"_3-1-java-io-中的适配器模式","link":"#_3-1-java-io-中的适配器模式","children":[]},{"level":3,"title":"3.2 Java 日志中的适配器模式","slug":"_3-2-java-日志中的适配器模式","link":"#_3-2-java-日志中的适配器模式","children":[]}]},{"level":2,"title":"4. 代理、装饰器、适配器模式的区别","slug":"_4-代理、装饰器、适配器模式的区别","link":"#_4-代理、装饰器、适配器模式的区别","children":[]}],"git":{"createdTime":1681536719000,"updatedTime":1694858648000,"contributors":[{"name":"aarynlu","email":"aarynlu@tencent.com","commits":2},{"name":"AruNi-01","email":"1298911600@qq.com","commits":1}]},"readingTime":{"minutes":12.83,"words":3850},"filePathRelative":"studynotes/design_pattern/pattern/structure_type/适配器模式.md","localizedDate":"2023年4月15日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">前言</p>\\n<p>适配器模式也是一种常用的结构型模式，它主要有两种实现方式，<strong>类适配器和对象适配器</strong>。下面就来介绍下适配器模式的原理和它的应用场景，以及它和前面的装饰器、代理模式又有何区别？</p>\\n</div>\\n<h2> 1. 什么是适配器模式</h2>\\n<h3> 1.1 定义</h3>","autoDesc":true}');export{t as data};
