const t=JSON.parse('{"key":"v-6cfce5e6","path":"/studynotes/design_pattern/pattern/structure_type/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html","title":"代理模式","lang":"zh-CN","frontmatter":{"title":"代理模式","date":"2023-04-06T00:00:00.000Z","order":1,"icon":"write","category":["设计模式"],"tag":["设计模式与范式"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"本文内容 前言 上几章中学习了几种 创建型 设计模式，它们主要解决 对象的创建问题。 而从本章开始，将学习 结构型 设计模式，主要总结了一些 类或对象组合在一起的经典结构，这些结构可以适用于特定的应用场景。 结构型设计模式包括：代理模式、桥接模式、装饰器模式、适配器模式、门面模式、组合模式、享元模式。","head":[["meta",{"property":"og:url","content":"https://aruni.me/studynotes/design_pattern/pattern/structure_type/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"AruNi"}],["meta",{"property":"og:title","content":"代理模式"}],["meta",{"property":"og:description","content":"本文内容 前言 上几章中学习了几种 创建型 设计模式，它们主要解决 对象的创建问题。 而从本章开始，将学习 结构型 设计模式，主要总结了一些 类或对象组合在一起的经典结构，这些结构可以适用于特定的应用场景。 结构型设计模式包括：代理模式、桥接模式、装饰器模式、适配器模式、门面模式、组合模式、享元模式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-10T13:25:13.000Z"}],["meta",{"property":"article:author","content":"AruNi_Lu"}],["meta",{"property":"article:tag","content":"设计模式与范式"}],["meta",{"property":"article:published_time","content":"2023-04-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-10T13:25:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代理模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-10T13:25:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AruNi_Lu\\",\\"url\\":\\"https://github.com/AruNi-01\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是代理模式","slug":"_1-什么是代理模式","link":"#_1-什么是代理模式","children":[]},{"level":2,"title":"2. 动态代理","slug":"_2-动态代理","link":"#_2-动态代理","children":[]},{"level":2,"title":"3. 代理模式的应用场景","slug":"_3-代理模式的应用场景","link":"#_3-代理模式的应用场景","children":[{"level":3,"title":"3.1 业务系统的非功能性需求开发","slug":"_3-1-业务系统的非功能性需求开发","link":"#_3-1-业务系统的非功能性需求开发","children":[]},{"level":3,"title":"3.2 代理模式在 RCP、缓存中的应用","slug":"_3-2-代理模式在-rcp、缓存中的应用","link":"#_3-2-代理模式在-rcp、缓存中的应用","children":[]}]},{"level":2,"title":"4. 总结","slug":"_4-总结","link":"#_4-总结","children":[]}],"git":{"createdTime":1680933227000,"updatedTime":1686403513000,"contributors":[{"name":"AruNi-01","email":"1298911600@qq.com","commits":2},{"name":"aarynlu","email":"aarynlu@tencent.com","commits":1}]},"readingTime":{"minutes":9.17,"words":2751},"filePathRelative":"studynotes/design_pattern/pattern/structure_type/代理模式.md","localizedDate":"2023年4月6日","excerpt":"<details class=\\"hint-container details\\"><summary>本文内容</summary>\\n\\n</details>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">前言</p>\\n<p>上几章中学习了几种 <strong>创建型</strong> 设计模式，它们主要解决 <strong>对象的创建问题</strong>。</p>\\n<p>而从本章开始，将学习 <strong>结构型</strong> 设计模式，主要总结了一些 <strong>类或对象组合在一起的经典结构</strong>，这些结构可以适用于特定的应用场景。</p>\\n<p>结构型设计模式包括：代理模式、桥接模式、装饰器模式、适配器模式、门面模式、组合模式、享元模式。</p>\\n</div>","autoDesc":true}');export{t as data};
