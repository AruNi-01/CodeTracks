import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,d as a,w as e,e as l,b as t}from"./app-fa4ea815.js";const u={},r={class:"hint-container details"},d=n("summary",null,"本文内容",-1),k={class:"table-of-contents"},m=l(`<h2 id="_1-设计" tabindex="-1"><a class="header-anchor" href="#_1-设计" aria-hidden="true">#</a> 1. 设计</h2><p>在上一章中，我们可以通过单元测试进行手动操作 Bean 对象的定义、注册和属性填充，以及最终获取对象调用方法。但是，实际上有个问题，在注册多个 Bean 时，<strong>如果依赖的属性很多，那么需要将这些属性一个一个地封装成 PropertyValue，再添加进PropertyValues</strong>，然后才进行属性填充，无疑增加了很多代码量。</p><p>所以这个章节，我们就用配置文件的方式，将所有的 Bean，以及 Bean 所依赖的属性都配置到 XML 文件。所以就需要一个 <strong>能解析 XML 配置文件的模块</strong>，将文件中的信息解析出来，然后由这个模块进行 PropertyValues 的处理，接着进行 Bean 的注册，此时就可以顺带把依赖的属性 PropertyValues 也传递进去。</p><p>我们读取的文件有多种，这里提供 ClassPath、File 和 远程的文件，整体设计结构如下图：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303141956101.png" alt="img" loading="lazy"></p><h2 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h2><p>由于资源加载器属于相对独立的部分，所以可以单独定义一个包 <code>core.io</code>，专门用来处理资源。</p><p>主要新增了一个资源接口 Resource，提供一个获取资源对应的输入流的方法（因为读取资源需要输入流），然后有三种加载资源的方式，分别是 ClassPathResource、FileSystemResource 和 UrlResource，它们实现了 Resource 接口，实现了具体的获取对应输入流的方法。</p><p>接着，<strong>为了方便调用者使用这三种加载资源的方式，因此再抽象出一个资源加载器接口 ResourceLoader</strong>，提供一个获取资源 Resource 的方法，由该接口的实现类具体实现该方法，判断获取哪种加载资源的方式。</p><p>新增一个 <strong>DefaultResourceLoader 类</strong>，实现 ResourceLoader 接口，<strong>实现具体获取哪种加载资源的方式的方法</strong>。</p><p>这样，资源加载模块就设计好了，不过现在有个问题。</p><p>如何将这个资源加载模块和 Bean 相关模块关联起来使用呢？具体来说，如果我们使用资源加载模块将配置文件中的 Bean 和依赖属性读取了出来，<strong>接着怎么将读取出来的 Bean 注册进 Bean 容器呢</strong>？</p><p>毕竟现在的资源加载模块与 Bean 相关模块是分离的，<strong>注册 Bean 的能力只有 DefaultListableBeanFactory 类有</strong>（它实现了 BeanDefinitionRegistry 接口，实现了 <code>registerBeanDefinition()</code> 方法），不可能也让资源加载模块的类去实现 BeanDefinitionRegistry 接口吧，毕竟该模块与 Bean 无关，这样做太混乱了，污染了 BeanDefinitionRegistry 接口。</p><p>所以，我们需要在新增一个接口 <strong>BeanDefinitionReader，它提供获取 BeanDefinitionRegistry 和 ResourceLoader 的方法，这样就将这两者关联起来了</strong>。同时，该接口还提供加载 BeanDefinition 的方法 <code>loadBeanDefinitions()</code>，此方法在实现类中具体实现。</p><p>有了接口，当然要有实现类了，所以再新增一个 <strong>AbstractBeanDefinitionReader 抽象类，提供注册类属性和资源加载类属性，并提供了构造函数，让外部的使用者把 BeanDefinitionRegistry 传递进来，也实现了 BeanDefinitionReader 接口，实现对应返回注册类属性或资源加载类属性的方法</strong>。</p><p>这样，就把资源加载模块和 Bean 相关模块关联起来了。</p><p>最后，再定义一个具体的 XML 文件解析类，用来做 <strong>具体的解析、注册</strong> 的工作，这个类就是 <strong>XmlBeanDefinitionReader</strong>，它只需要 <strong>继承 AbstractBeanDefinitionReader 类，就可以拥有资源加载模块和 Bean 相关模块的功能了</strong>。</p><p>到此，所有的设计就完成了，先来看看目录结构的更变：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303142055096.png" alt="image-20230314205532912" loading="lazy"></p><p>类图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303142348514.png" alt="step-05" loading="lazy"></p><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h2><p>UserDao 和 UserService 类和上一章相同，这里再建一个 resource 文件夹，用于存放测试需要的文件资源。</p><p>先来测试资源的加载：</p><ul><li><p>在 resource 文件夹中添加 <code>important.properties</code> 文件：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303142316112.png" alt="image-20230314231607360" loading="lazy"></p></li><li><p>测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ApiTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// DefaultResourceLoader，用于获取资源</span>
    <span class="token keyword">private</span> <span class="token class-name">DefaultResourceLoader</span> resourceLoader<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        resourceLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 下面三个方法分别测试 加载 ClassPath、FileSystem、URL 文件</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_classpath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:important.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">readUtf8</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/important.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">readUtf8</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 读取后可以从内容中搜索关键字；OLpj9823dZ</span>
        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;https://github.com/AruNi-01/small-spring/blob/main/small-spring-step-05/src/test/resources/important.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">readUtf8</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试结果：均可输出文件内容。</p></li></ul><p>再来测试真正的加载 XML 文件，解析 XML 文件里的属性，然后再注册 Bean 到容器：</p><ul><li><p>在 resource 文件夹中添加 <code>spring.xml</code> 文件：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303142320064.png" alt="image-20230314232020080" loading="lazy"></p></li><li><p>测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_xml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 初始化 beanFactory</span>
    <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 读取配置文件 &amp; 注册 Bean（DefaultListableBeanFactory 继承了 BeanDefinitionRegistry，所以能直接传参）</span>
    <span class="token class-name">XmlBeanDefinitionReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 获取 Bean 对象调用方法</span>
    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>查询用户信息：孙悟空
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>可以发现，只需要一份配置文件，便不用我们手动添加依赖属性和注册 Bean，极大的简化了开发，可以对比上一章注册 Bean 的流程。</p><h2 id="_4-流程" tabindex="-1"><a class="header-anchor" href="#_4-流程" aria-hidden="true">#</a> 4. 流程</h2><p>流程图如下：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202303142331163.png" alt="" loading="lazy"></p>`,31);function v(g,b){const s=o("router-link");return c(),i("div",null,[n("details",r,[d,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#_1-设计"},{default:e(()=>[t("1. 设计")]),_:1})]),n("li",null,[a(s,{to:"#_2-实现"},{default:e(()=>[t("2. 实现")]),_:1})]),n("li",null,[a(s,{to:"#_3-测试"},{default:e(()=>[t("3. 测试")]),_:1})]),n("li",null,[a(s,{to:"#_4-流程"},{default:e(()=>[t("4. 流程")]),_:1})])])])]),m])}const y=p(u,[["render",v],["__file","第05章：资源加载器解析文件注册对象.html.vue"]]);export{y as default};
