import{_ as l,Z as i,$ as u,a3 as n,a1 as a,a4 as t,a2 as s,a0 as c,E as p}from"./framework-63f054a3.js";const r={},k={class:"hint-container details"},d=n("summary",null,"本文内容",-1),v={class:"table-of-contents"},m=c('<div class="hint-container info"><p class="hint-container-title">前言</p><p>在上一篇文章中，我们知道了 <strong>观察者模式有几种不同的实现方式</strong>：</p><ul><li><strong>同步阻塞</strong>：经典实现方式，主要为了代码解耦；</li><li><strong>异步非阻塞</strong>：除了解耦外，也能提高执行效率；</li><li><strong>进程内</strong>：上面两种就属于进程内，在同一个程序中执行的；</li><li><strong>进程间</strong>：更加彻底的解耦，一般基于 MQ 实现。</li></ul><p>那么本篇文章将聚焦于异步非阻塞的方式，实现一个类似 Google Guava EventBus 的通用框架，对观察者模式进行封装，让其在项目中使用更简便。</p></div><h2 id="_1-异步非阻塞方式的简易实现" tabindex="-1"><a class="header-anchor" href="#_1-异步非阻塞方式的简易实现" aria-hidden="true">#</a> 1. 异步非阻塞方式的简易实现</h2><p>我们先来看看最简单的异步非阻塞方式实现的观察者模式，不用考虑通用型、复用性等，实现起来是非常容易的。</p>',3),b={href:"https://aruni.me/docs/studynotes/design_pattern/pattern/behaviour_type/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E7%90%86%E8%A7%A3%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html",target:"_blank",rel:"noopener noreferrer"},g=c(`<ul><li><p>创建一个新线程去执行每个监听者需要执行的方法，其他代码不变：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">RegisterPromotionListener</span> <span class="token keyword">implements</span> <span class="token class-name">RegisterListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">PromotionService</span> promotionService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegisterSuccess</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 启动一个线程去执行</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> promotionService<span class="token punctuation">.</span><span class="token function">issueNewUserExperienceCash</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在被监听者者的 <code>notifyListeners()</code> 方法中使用线程池来执行每个观察者的方法，其他代码不变：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 触发器（被监听者）</span>
<span class="token keyword">class</span> <span class="token class-name">RegisterDispatcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegisterListener</span><span class="token punctuation">&gt;</span></span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">RegisterListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">RegisterListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RegisterListener</span> listener <span class="token operator">:</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 使用线程池去执行该任务</span>
            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> listener<span class="token punctuation">.</span><span class="token function">handleRegisterSuccess</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>上面的实现方式虽然可行，但 <strong>无法做到复用</strong>，如果有多个业务模块都需要使用到异步非阻塞的观察者模式，那么每个业务模块都要实现一遍。</p><p>如果需求更极端一点，我们想要 <strong>在同步阻塞和异步非阻塞之间灵活切换</strong>，那就要 <strong>不停地修改对应的代码</strong>，也不符合 “对扩展开放，对修改关闭” 原则</p><p>那如何解决呢？造个轮子呗。我们知道，框架的作用主要就是 <strong>隐藏实现细节、降低开发难度、做到代码复用、解耦业务与非业务代码，让程序员聚焦业务的开发</strong>。</p><p>所以我们也可以将异步非阻塞的观察者模式抽象成一个框架来使用，这就是本章要实现的 EventBus。</p><h2 id="_2-guava-的-eventbus" tabindex="-1"><a class="header-anchor" href="#_2-guava-的-eventbus" aria-hidden="true">#</a> 2. Guava 的 EventBus</h2><h3 id="_2-1-使用-eventbus" tabindex="-1"><a class="header-anchor" href="#_2-1-使用-eventbus" aria-hidden="true">#</a> 2.1 使用 EventBus</h3><p><strong>EventBus</strong> 意为 “事件总线”，它提供了 <strong>观察者模式的骨架代码</strong>，基于它我们能很方便的在业务中使用观察者模式。</p><p>Google 的 Guava EventBus 是一个比较著名的 EventBus 框架，它支持同步阻塞和异步非阻塞模式。</p><p>我们还是通过上一章的例子，来看看 Guava EventBus 有哪些好用的功能。Guava EventBus 改造后的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 无需实现任何 Listener 接口</span>
<span class="token keyword">class</span> <span class="token class-name">RegisterPromotionListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">PromotionService</span> promotionService<span class="token punctuation">;</span>

    <span class="token comment">// 使用 @Subscribe 声明监听者</span>
    <span class="token annotation punctuation">@Subscribe</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegisterSuccess</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        promotionService<span class="token punctuation">.</span><span class="token function">issueNewUserExperienceCash</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RegisterNotificationListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">NotificationService</span> notificationService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Subscribe</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegisterSuccess</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        notificationService<span class="token punctuation">.</span><span class="token function">sendInboxMessage</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token string">&quot;Welcome...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_EVENTBUS_THREAD_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token comment">// eventBus = new EventBus(); // 同步阻塞模式</span>
    <span class="token keyword">private</span> <span class="token class-name">EventBus</span> eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncEventBus</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_EVENTBUS_THREAD_POOL_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> telephone<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略输入参数的校验代码</span>
        <span class="token comment">// 省略 userService.register() 异常的 try-catch 代码</span>
        <span class="token keyword">long</span> userId <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>telephone<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">addListenerOfRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 通过 eventBus.post 派发消息（触发被 @Subscribe 注解的方法）</span>
        eventBus<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 添加 Register 相关的 Listener，实际场景可以把 List 作为参数，由外部调用者决定要注入什么 Listener</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addListenerOfRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegisterNotificationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegisterPromotionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRegisterListeners</span><span class="token punctuation">(</span>listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token comment">// 向 eventBus 中注册监听者</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setRegisterListeners</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> listener <span class="token operator">:</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 EventBus 后，与之前的方式相比，主要有以下几点的异同：</p><ul><li>都需要使用 register 方法注册 Listener： <ul><li>之前的方式：使用一个 List 容器保存所有 Listener，register 方法就是向 List 中添加 Listener；</li><li>EventBus：无需容器，直接使用 eventBus 的 register 方法即可。</li></ul></li><li>都需要调用某个方法通知 Listener： <ul><li>之前的方式：使用 Dispatcher 提供的 notify 方法（遍历 List，执行 Listener 的业务逻辑）；</li><li>EventBus：使用 eventBus 的 post 方法即可。</li></ul></li><li><strong>基于 EventBus 无需定义 Listener 接口</strong>，任意类型的对象都可以注册到 EventBus 中，通过 <code>@Subscribe</code> 来标明。</li></ul><h3 id="_2-2-guava-eventbus-主要组件" tabindex="-1"><a class="header-anchor" href="#_2-2-guava-eventbus-主要组件" aria-hidden="true">#</a> 2.2 Guava EventBus 主要组件</h3><p>下面来看看 Guava EventBus 中的主要类和函数。</p><div class="hint-container tip"><p class="hint-container-title">EventBus、AsyncEventBus</p><p>Guava EventBus 对外暴露的所有接口都封装在 EventBus 类中，其中：</p><ul><li><strong>EventBus 是同步阻塞的观察者模式</strong>；</li><li><strong>AsyncEventBus</strong> 继承自 EventBus，提供了 <strong>异步非阻塞的观察者模式</strong>。</li></ul><p>具体使用方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">EventBus</span> eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步阻塞模式</span>
<span class="token class-name">EventBus</span> eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncEventBus</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>；<span class="token comment">// 异步阻塞模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">register() 函数</p><p>EventBus 使用 <strong><code>register()</code> 来注册观察者</strong>。函数签名如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它可以接受 <strong>任何类型（Object）的观察者</strong>。而经典实现方式中，<code>register()</code> 接受的类对象必须要实现某同一父观察者接口。</p></div><div class="hint-container tip"><p class="hint-container-title">unregister() 函数</p><p>与上面的 <code>register()</code> 相对，用来 <strong>从 EventBus 中删除一个观察者</strong>，函数签名如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unregister</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">post() 函数</p><p>EventBus 使用 <strong><code>post()</code> 函数给观察者发送消息</strong>，函数签名如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与经典的观察者模式不同，当调用 <code>post()</code> 函数发送消息时，并不是发送给所有的观察者，而是 <strong>发送给可匹配的观察者</strong>，可匹配指 <strong>能接收的消息类型是发送消息（post 函数中定义的 event）类型的同类或父类</strong>。</p><p>什么意思呢？举个例子你就懂了。假如：</p><ul><li>Listener_A 能接收的消息类型是 Msg_A；</li><li>Listener_B 能接收的消息类型是 Msg_B；</li><li>Listener_C 能接收的消息类型是 Msg_C；</li></ul><p>其中：</p><ul><li>Msg_A 是 Msg_B 的父类。</li></ul><p>当发送消息时，能接收到消息的可匹配观察者情况如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Listener_A</span> <span class="token punctuation">{</span>
    <span class="token comment">// Listener_A 能接收的消息类型是 Msg_A</span>
	<span class="token annotation punctuation">@Subscribe</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Msg_A</span> msgA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// ......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Listener_B</span> <span class="token punctuation">{</span>
    <span class="token comment">// Listener_B 能接收的消息类型是 Msg_B，但 Msg_B 继承自 Msg_A，所以此时 Listener_A 也能收到消息</span>
	<span class="token annotation punctuation">@Subscribe</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Msg_B</span> msgB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// ......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Listener_C 和 Msg_A、Msg_B、Msg_C 的定义略</span>

<span class="token comment">// 使用</span>
<span class="token class-name">Msg_A</span> <span class="token class-name">MsgA</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Msg_A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Msg_B</span> <span class="token class-name">MsgB</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Msg_B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Msg_C</span> <span class="token class-name">MsgC</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Msg_C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">MsgA</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// =&gt; Listener_A 接收到消息</span>
<span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">MsgB</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// =&gt; Listener_A、Listener_B 接收到消息</span>
<span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">MsgC</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// =&gt; Listener_C 接收到消息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说 post 函数 <strong>不仅会把消息发送给该消息所对应的 Listener，还会发给该消息类型的父类对应的 Listener</strong>。</p><p>每个 Listener 能接收的消息类型就是用 <code>@Subscribe</code> 注解标明。</p></div><div class="hint-container tip"><p class="hint-container-title">@Subscribe 注解</p><p>EventBus 通过 <strong><code>@Subscribe</code> 注解标明某个函数能接收哪种类型的消息</strong>。具体使用示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListenerA</span> <span class="token punctuation">{</span>
    <span class="token comment">//...省略其他属性和方法...</span>

    <span class="token annotation punctuation">@Subscribe</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token class-name">PMsg</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span>

    <span class="token annotation punctuation">@Subscribe</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">QMsg</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EventBus 整体流程如下：</p><ol><li><strong>通过 <code>register()</code> 函数将 ListenerA 类对象注册进 EventBus 时，EventBus 会根据 <code>@Subscribe</code> 注解找到 <code>f1()</code> 和 <code>f2()</code>，并将两个函数能接收的消息类型记录下来</strong>（PMsg -&gt; f1，QMsg -&gt; f2）；</li><li><strong>通过 <code>post(Object event)</code> 发送消息时，EventBus 会通过之前的记录（消息类型 -&gt; 函数），根据参数 event 调用相应的函数</strong>。</li></ol><p>所以我们在使用 Guava EventBus 时，一般都会定义自己的 event，然后使用 Listener 进行订阅（监听）event，等待消息的发送（使用 post）。</p></div><p>参考 Guava EventBus 的设计，我们下面就来简单的实现一下我们自己的 EventBus。</p><h2 id="_3-自己实现一个-eventbus-框架" tabindex="-1"><a class="header-anchor" href="#_3-自己实现一个-eventbus-框架" aria-hidden="true">#</a> 3. 自己实现一个 EventBus 框架</h2><h3 id="_3-1-eventbus-核心点剖析" tabindex="-1"><a class="header-anchor" href="#_3-1-eventbus-核心点剖析" aria-hidden="true">#</a> 3.1 EventBus 核心点剖析</h3><p>通过上面的分析，可以发现 EventBus 中最核心的就是 <strong><code>register()</code> 和 <code>post()</code></strong> 的实现，所以我们先来分析下这两个函数如何实现。</p><p>下面是这两个函数的实现原理图：</p><p><img src="https://run-notes.oss-cn-beijing.aliyuncs.com/notes/202306181741954.png" alt="image-20230618174104603"></p><p>可以发现，两个函数都使用到了 <strong>Observer 注册表，它记录了消息类型和可接收函数的对应关系</strong>：</p><ul><li>当调用 <code>register()</code> 注册观察者时，EventBus 通过解析 <code>@Sebscribe</code> 注解，生成 Observer 注册表；</li><li>当调用 <code>post()</code> 发送消息时，EventBus 通过注册表找到相应的可接收消息的函数，然后通过反射来动态地创建对象、执行相应的函数。</li></ul><p>而对于同步阻塞和异步非阻塞的实现，唯一的差异只在于：是在一个线程内依次执行相应的函数，还是使用一个线程池来执行。</p><h3 id="_3-2-eventbus-具体实现" tabindex="-1"><a class="header-anchor" href="#_3-2-eventbus-具体实现" aria-hidden="true">#</a> 3.2 EventBus 具体实现</h3><p>通过了上面的原理分析，下面的实现就比较简单了，整个 EventBus 由 5 个类组成：EventBus、AsyncEventBus、Subscribe、ObserverAction、ObserverRegistry。</p><div class="hint-container tip"><p class="hint-container-title">Subscribe</p></div><p>SubScribe 是一个注解，用于 <strong>标明观察者中的哪个函数可以接受消息</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@desc</span>: 用于标明观察者中的哪个函数可以接受消息
 * 注解 @Beta 是 Guava 中一个表示处于 Beta 阶段的 API（无影响）
 * <span class="token keyword">@author</span>: AruNi_Lu
 * <span class="token keyword">@date</span>: 2023-06-18
 */</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Beta</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Subscribe</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">ObserverAction</p></div><p><strong>ObserverAction 类用来表示 <code>@Subscribe</code> 注解的方法</strong>，其中：</p><ul><li>target 表示观察者类；</li><li>method 表示观察者类中的方法。</li></ul><p>该类主要用在 ObserverRegistry 的 Observer 注册表中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@desc</span>: 用来表示 @Subscribe 注解的方法
 * <span class="token keyword">@author</span>: AruNi_Lu
 * <span class="token keyword">@date</span>: 2023-06-18
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverAction</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Method</span> method<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ObserverAction</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Preconditions.checkNotNull() 由 google.common.base 提供</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span>

        <span class="token comment">// 暴力破解，使其具有直接访问和修改私有元素的能力</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 执行方法
     * <span class="token keyword">@param</span> <span class="token parameter">event</span> method 方法的参数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">ObserverRegistry</p></div><p>ObserverRegistry 类就是 Observer 注册表，也是最复杂的一个类，框架中的核心逻辑都在这个类中。</p><p>该类大量使用了 Java 的反射语法，还有一个比较巧妙的 CopyOnWriteArraySet 的使用。</p><blockquote><p><strong>CopyOnWriteArraySet</strong> 使用的是 <strong>写时复制技术</strong>，用来解决 <strong>读写时的并发问题</strong>。</p><p>具体来说，在写入数据时，会创建出一个新的 set，然后将原始数据 clone 到新的 set 中，在新的 set 中进行写操作，这样就不会影响读操作。等新的 set 中写入数据完成后，再用新的 set 替换老的 set 即可。</p><p>不用担心并发写问题，因为 <strong>CopyOnWriteArraySet 会通过加锁的方式避免并发写问题</strong>。</p></blockquote><p>该类的实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@desc</span>: Observer 注册表
 * <span class="token keyword">@author</span>: AruNi_Lu
 * <span class="token keyword">@date</span>: 2023-06-18
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverRegistry</span> <span class="token punctuation">{</span>

    <span class="token comment">// Observer 注册表</span>
    <span class="token keyword">private</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 注册 observer
     * <span class="token keyword">@param</span> <span class="token parameter">observer</span> observer 类
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Object</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取该 observer 类的所有 ObserverAction</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> observerActions <span class="token operator">=</span> <span class="token function">findAllObserverActions</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 遍历所有 ObserverAction，添加到 registry</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> observerActions<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> eventType <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span></span> eventActions <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span></span> registeredEventActions <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 初始化，避免并发场景下出现错误</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>registeredEventActions <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                registry<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                registeredEventActions <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            registeredEventActions<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>eventActions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取与该 event 向匹配的所有 ObserverAction（发送消息类型的同类或父类）
     * <span class="token keyword">@param</span> <span class="token parameter">event</span> event
     * <span class="token keyword">@return</span> 所有 ObserverAction
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMatchedObserverActions</span><span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span></span> matchedObservers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> postedEventType <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> registry<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> eventType <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span></span> eventActions <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 判断 eventType 是否由 postedEventType 派生而来，是说明该 eventType 对应的 eventActions 符合条件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>postedEventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                matchedObservers<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>eventActions<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> matchedObservers<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取该 observer 类的所有 ObserverAction
     * <span class="token keyword">@param</span> <span class="token parameter">observer</span> observer 类
     * <span class="token keyword">@return</span> 所有 eventType 和其对应的 ObserverAction
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllObserverActions</span><span class="token punctuation">(</span><span class="token class-name">Object</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> observerActions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> observer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取该类所有使用了 @Subscribe 标注的方法，遍历将其添加进 observerActions</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> <span class="token function">getAnnotatedMethods</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> eventType <span class="token operator">=</span> parameterTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token comment">// 初始化</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>observerActions<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                observerActions<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            observerActions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObserverAction</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> observerActions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取该类使用了 @Subscribe 标注的方法
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> 类
     * <span class="token keyword">@return</span> 符合条件的方法集合
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAnnotatedMethods</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> annotatedMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断该方法是否用了 @Subscribe 标注</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Subscribe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 方法的参数必须只有一个</span>
                <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;Method %s has @Subscribe annotation but has %s parameters.&quot;</span>
                                <span class="token operator">+</span> <span class="token string">&quot;Subscriber methods must have exactly 1 parameter.&quot;</span><span class="token punctuation">,</span>
                        method<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                annotatedMethods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> annotatedMethods<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">EventBus</p></div><p>EventBus 的实现是同步阻塞的，但是我们也使用到了线程池 Executor，因为这样可以做到代码复用，很容易就实现了后面的 AsyncEventBus（可以直接继承 EventBus）。</p><blockquote><p><code>MoreExecutors.directExecutor()</code> 是 Google Guava 提供的工具类，该 Executor 实际上是单线程。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@desc</span>: 同步阻塞的观察者模式
 * <span class="token keyword">@author</span>: AruNi_Lu
 * <span class="token keyword">@date</span>: 2023-06-18
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventBus</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ObserverRegistry</span> registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObserverRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// MoreExecutors.directExecutor()，Guava 提供的单线程 Executor</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">MoreExecutors</span><span class="token punctuation">.</span><span class="token function">directExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取消息可匹配的函数</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObserverAction</span><span class="token punctuation">&gt;</span></span> observerActions <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getMatchedObserverActions</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ObserverAction</span> observerAction <span class="token operator">:</span> observerActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> observerAction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">AsyncEventBus</p></div><p>AsyncEventBus 的实现就非常简单了，继承 EventBus，直接从外部传进来一个 Executor，再调用父类的构造器即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@desc</span>: 异步非阻塞的观察者模式
 * <span class="token keyword">@author</span>: AruNi_Lu
 * <span class="token keyword">@date</span>: 2023-06-18
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncEventBus</span> <span class="token keyword">extends</span> <span class="token class-name">EventBus</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AsyncEventBus</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，一个简易的 Eventbus 框架就完成了，可以将上面 Guava EventBus 的类全部替换成我们自己写的，来测试下看看效果是否一样。</p><p>当然了，在细节方面，Guava 做了很多优化，比如在注册表中查找消息可匹配函数的算法，这些可以去 Guava 源码中学习。</p>`,54);function y(w,h){const e=p("router-link"),o=p("ExternalLinkIcon");return i(),u("div",null,[n("details",k,[d,n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#_1-异步非阻塞方式的简易实现"},{default:t(()=>[s("1. 异步非阻塞方式的简易实现")]),_:1})]),n("li",null,[a(e,{to:"#_2-guava-的-eventbus"},{default:t(()=>[s("2. Guava 的 EventBus")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_2-1-使用-eventbus"},{default:t(()=>[s("2.1 使用 EventBus")]),_:1})]),n("li",null,[a(e,{to:"#_2-2-guava-eventbus-主要组件"},{default:t(()=>[s("2.2 Guava EventBus 主要组件")]),_:1})])])]),n("li",null,[a(e,{to:"#_3-自己实现一个-eventbus-框架"},{default:t(()=>[s("3. 自己实现一个 EventBus 框架")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_3-1-eventbus-核心点剖析"},{default:t(()=>[s("3.1 EventBus 核心点剖析")]),_:1})]),n("li",null,[a(e,{to:"#_3-2-eventbus-具体实现"},{default:t(()=>[s("3.2 EventBus 具体实现")]),_:1})])])])])])]),m,n("p",null,[s("还是拿 "),n("a",b,[s("观察者模式（上）：理解观察者模式"),a(o)]),s(" 中的例子说明，有两种实现方式：")]),g])}const E=l(r,[["render",y],["__file","观察者模式（下）：实现一个EventBus框架.html.vue"]]);export{E as default};
